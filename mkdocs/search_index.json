{
    "docs": [
        {
            "location": "/", 
            "text": "Get started with bots\n\n\nInstallation\n\n\nInstallation windows\n\n\nInstallation linux\n\n\nInstallation FAQ\n\n\nDependencies\n\n\n\n\n\n\nGet bots running\n\n\nTutorial\n\n\nView results\n\n\nWalk through setup\n\n\nWhat happened\n\n\n\n\n\n\n\n\n\n\nGuide for bots-monitor\n\n\nHow to rereceive\n\n\nCustomize menu\n\n\n\n\n\n\nConfiguration\n\n\nHow to do configuration\n\n\nDIY step by step\n\n\n\n\n\n\nRoute\n\n\nComposite routes\n\n\nPassThrough (no translation)\n\n\nRoute scripting\n\n\nOverview Exit points\n\n\nPreprocessing recipes\n\n\nTake over whole route\n\n\n\n\n\n\n\n\n\n\nChannel/communication\n\n\nFilenames\n\n\nDatabase communication\n\n\nChannel scripting\n\n\nSmall user script\n\n\nSubclassing\n\n\ncommunication type 'communicationscript'\n\n\n\n\n\n\nChannel port numbers\n\n\nSafe file writing/locking\n\n\n\n\n\n\nTranslation\n\n\nHow translations work\n\n\nWhat translation when?\n\n\nPartner specific translations\n\n\nOrganize partner specific translations\n\n\nChained translations (alt)\n\n\nMultiple versions\n\n\n\n\n\n\nMapping Scripts\n\n\nHow mapping works\n\n\nGet from message\n\n\nPut in message\n\n\nDiv mapping functions\n\n\nCode conversion\n\n\nPartner look-up\n\n\nCalculate and count\n\n\nPersist (store data)\n\n\nEAN/UCC check digits\n\n\nChange and delete\n\n\nAccess to envelope\n\n\n\n\n\n\nGrammars\n\n\nHow to get grammars\n\n\nSyntax parameters\n\n\nStructure\n\n\nRecorddefs\n\n\nNextmessage\n\n\nNextmessageblock\n\n\nPartner dependent syntax\n\n\nEdifact charsets\n\n\nXML namespaces\n\n\n\n\n\n\nDocument View (botskey)\n\n\nUser Scripting\n\n\nBots engine scripting\n\n\n\n\n\n\nConfirmations/acknowledgements\n\n\nSplit/merge/envelope\n\n\nSplit edi files\n\n\nMerge/envelope edi files\n\n\nEnvelope scripting\n\n\n\n\n\n\nEdi partners\n\n\nPartner specific translations\n\n\nOrganize partner specific translations\n\n\nPartner dependent syntax\n\n\nPartner groups\n\n\nEmail addresses\n\n\nPartner look-up\n\n\nEnvelope scripting\n\n\n\n\n\n\nCharacter-sets/unicode\n\n\n\n\n\n\nHow to debug\n\n\nPlugins\n\n\nInstall a plugin\n\n\nPlugins at sourceforge\n\n\nMake a plugin\n\n\nPlugin details\n\n\n\n\n\n\nDeployment and usage\n\n\nRunning bots-engine\n\n\nSchedule bots-engine\n\n\nJob Queue\n\n\nDirectory Monitor\n\n\nReturn codes\n\n\n\n\n\n\nHandle production errors\n\n\nEmail notification for errors\n\n\nArchiving of EDI files\n\n\nRun as service/daemon\n\n\nLinux Daemons\n\n\nWindows Services\n\n\n\n\n\n\nMultiple environments\n\n\nVirtual environments\n\n\n\n\n\n\nMaintenance\n\n\n\n\n\n\nAdvanced Deployment\n\n\nUser Rights\n\n\nBots-monitor over HTTPS\n\n\nUse Apache2\n\n\nUse MySQL/PostgreSQL\n\n\nUsing AS2 with Bots\n\n\nConfiguration change management\n\n\nIsolated acceptance test\n\n\nPush test-\nproduction\n\n\nBuild test-set\n\n\n\n\n\n\nPerformance/big volumes\n\n\n\n\n\n\nTroubleshooting FAQ\n\n\nOverview\n\n\nThe name \"Bots\"\n\n\nFeatures of bots\n\n\nTechnical overview\n\n\nDirectories and files\n\n\nConfiguration files\n\n\nGlossary of terms\n\n\n\n\n\n\nChanges and migrate\n\n\nBots 3.2.0\n\n\nChanges\n\n\n\n\n\n\nBots 3.1.0\n\n\nChanges\n\n\nMigrate\n\n\n\n\n\n\nBots 3.0.0\n\n\nChanges\n\n\nMigrate\n\n\nChanges 3.0.0rc/3.0.0\n\n\n\n\n\n\nChanges/migrate 2.2.0\n\n\nChanges/migrate 2.1.0\n\n\nMigrate Kid to Genshi\n\n\nMigrate Django versions\n\n\nMigrate database\n\n\n\n\n\n\nTutorials\n\n\nEDI Basics\n\n\nIntegration with Odoo/OpenERP\n\n\n\n\n\n\nNew to python?\n\n\nExternal reference links\n\n\nUseful Tools", 
            "title": "Home"
        }, 
        {
            "location": "/StartIntroduction/", 
            "text": "First steps\n\n\n\n\nInstall bots: \nInstallation\n \n\n\nGet bots running: \nGet bots running\n \n\n\nGet your first configuration running: \nTutorial\n \n    After that: check out some\n    \nplugins\n.\n\n\n\n\nOther info on bots\n\n\nWebsite\n is on sourceforge.\n\nThere is an active \nmailing\nlist\n.\n\nCheck the overview of\n\nfeatures\n\n\nAbout this wiki\n\n\n\n\nIf you want to ask questions please use the bots \nmailing\n    list\n.\n\n\nIt is very much appreciated if you want to contribute to this wiki.\n    Just let me know via the mailing list and you'll get the rights.\n\n\n\n\nIt's hard to get started\n\n\nOften people experience a steep learning curve when starting with edi.\n\nOne reason is that of lot of knowledge is involved:\n\n\n\n\nedi standards (edifact, x12, tradacoms, EANCOM etc)\n\n\nbusiness processes between you and your edi-partner (logistics!),\n    changes in the business processes\n\n\nunderstand what your edi-partner wants/requires\n\n\nedi communication methods (x400, VAN's, AS2 etc)\n\n\nimports and exports of your ERP system\n\n\nspecifics of the edi software.\n\n\netc\n\n\n\n\nIt is hard to find good information about edi: standards are not always\nfree (eg x12 is not free), decent example messages are hard to get and\noften if is hard to find good information on Internet.\n\n\nEdi is traditionally 'closed' and sparse with information.\n\n\nPartly this seems to be a 'cultural thing', partly because edi existed\nbefore Internet, partly because it is all about business data that is\nnot for the general public.\n\n\nDon't give up! ;-))\n\nI think everybody who started with edi has gone through this.", 
            "title": "Introduction"
        }, 
        {
            "location": "/StartIntroduction/#first-steps", 
            "text": "Install bots:  Installation    Get bots running:  Get bots running    Get your first configuration running:  Tutorial  \n    After that: check out some\n     plugins .", 
            "title": "First steps"
        }, 
        {
            "location": "/StartIntroduction/#other-info-on-bots", 
            "text": "Website  is on sourceforge. \nThere is an active  mailing\nlist . \nCheck the overview of features", 
            "title": "Other info on bots"
        }, 
        {
            "location": "/StartIntroduction/#about-this-wiki", 
            "text": "If you want to ask questions please use the bots  mailing\n    list .  It is very much appreciated if you want to contribute to this wiki.\n    Just let me know via the mailing list and you'll get the rights.", 
            "title": "About this wiki"
        }, 
        {
            "location": "/StartIntroduction/#its-hard-to-get-started", 
            "text": "Often people experience a steep learning curve when starting with edi. \nOne reason is that of lot of knowledge is involved:   edi standards (edifact, x12, tradacoms, EANCOM etc)  business processes between you and your edi-partner (logistics!),\n    changes in the business processes  understand what your edi-partner wants/requires  edi communication methods (x400, VAN's, AS2 etc)  imports and exports of your ERP system  specifics of the edi software.  etc   It is hard to find good information about edi: standards are not always\nfree (eg x12 is not free), decent example messages are hard to get and\noften if is hard to find good information on Internet.  Edi is traditionally 'closed' and sparse with information.  Partly this seems to be a 'cultural thing', partly because edi existed\nbefore Internet, partly because it is all about business data that is\nnot for the general public.  Don't give up! ;-)) \nI think everybody who started with edi has gone through this.", 
            "title": "It's hard to get started"
        }, 
        {
            "location": "/StartInstallProcedure/", 
            "text": "Bots works on operating systems with python installed.\n\nConfirmed is:\n\n\n\n\nwindows (2000, XP, Vista, windows7, Server 2008, Server 2012, etc)\n\n\napple OS.X\n\n\nlinux debian (ubuntu, mint, etc)\n\n\nlinux Red hat (Centos. Fedora)\n\n\nOpenSolaris\n\n\nFreeBSD\n\n\nAIX\n\n\n\n\nLet us know if it runs (or not) on another OS.", 
            "title": "Installation"
        }, 
        {
            "location": "/StartInstallWindows/", 
            "text": "Windows installation\n\n\n\n\n\n\nInstall Python \n\n\n\n\nCheck if Python is already installed. \n\n\nUse python version 2.6 or 2.7; Python >= 3.0 does\n    not work. \n\n\nDownload Python installer from http://www.Python.org \n\n\nInstall python (double-click). \n\n\n\n\n\n\n\n\nInstall bots\n\n\n\n\nDownload \nbots installer\n\n\nInstall bots (double-click).\n\n\nInstallation takes some time; be patient. During the installation the\n    libraries bots needs are installed.\n\n\nYou will be notified if the installation went OK.\n\n\nIf not: contact us via the \nmailing list\n.\n\n\n\n\n\n\n\n\nNote 1:\n\nmind your rights. Both Python and Bots need to be installed as\nadmin (windows vista/7/8).\n\n\nNote 2:\n\nthe windows installer includes all dependencies for standard\ninstallation. Some extra dependencies are needed for less used functions\n(eg. extracting data from excel or pdf files).", 
            "title": "Installation Windows"
        }, 
        {
            "location": "/StartInstallWindows/#windows-installation", 
            "text": "Install Python    Check if Python is already installed.   Use python version 2.6 or 2.7; Python >= 3.0 does\n    not work.   Download Python installer from http://www.Python.org   Install python (double-click).      Install bots   Download  bots installer  Install bots (double-click).  Installation takes some time; be patient. During the installation the\n    libraries bots needs are installed.  You will be notified if the installation went OK.  If not: contact us via the  mailing list .     Note 1: \nmind your rights. Both Python and Bots need to be installed as\nadmin (windows vista/7/8).  Note 2: \nthe windows installer includes all dependencies for standard\ninstallation. Some extra dependencies are needed for less used functions\n(eg. extracting data from excel or pdf files).", 
            "title": "Windows installation"
        }, 
        {
            "location": "/StartInstalllinux/", 
            "text": "Linux, Unix installation\n\n\nThere is no \n*\n.deb or \n*\n.rpm for bots - would be great if you have experience \nwith this and want to give some help.\n\nSo a standard python source code install is done.\n\n\n\n\n\n\nInstall Python\n\n\n\n\nCheck if Python is already installed - most of the time python\n    is already installed on \n*\nnix. Use python 2.6 or 2.7. (not\n    python >= 3.0).\n\n\nIf not: use package manager or see python web site.\n\n\n\n\n\n\n\n\nInstall dependencies/libraries\n\n\n\n\nSee \nlist of dependencies\n.\n\n\nEasiest is to use your package manager for installing.\n\n\n\n\n\n\n\n\nInstall bots\n\n\n\n\nDownload \nbots\n    installer\n\n    (e.g. bots-3.1.0.tar.gz)\n\n\nUnpack (command-line):\n    \ntar bots-3.1.0.tar.gz\n\n\nGo to created directory (command-line):\n    \ncd bots-3.1.0\n\n\nInstall (command-line):\n    \npython setup.py install\n\n\nPostinstall: depending on what do want: change rights for\n    directories botssys, usersys and config or place these elsewhere\n    and make symbolic links in the bots installation directories.\n\n\n\n\n\n\n\n\nTip: place the directories botssys, usersys and config somewhere else\n(out of /usr), change the owner/rights and make symbolic links in the\nbots installation to these directories.\n\n\nInstallation from scratch\n\n\n(Note that versions might not be correct anymore.)\n\n\nInstallation on amazon EC2, looks like red hat version of linux:\n\n\n#install django\nwget -O django.tar.gz https://www.djangoproject.com/download/1.4.13/tarball/\ntar -xf django.tar.gz\ncd Django-1.4.13\nsudo python setup.py install\ncd ..      \n#install cherrypy\nwget http://download.cherrypy.org/CherryPy/3.2.2/CherryPy-3.2.2.tar.gz\ntar -xf CherryPy-3.2.2.tar.gz\ncd CherryPy-3.2.2\nsudo python setup.py install\ncd ..      \n#install Genshi\nwget http://ftp.edgewall.com/pub/genshi/Genshi-0.7.tar.gz\ntar -xf Genshi-0.7.tar.gz\ncd Genshi-0.7\nsudo python setup.py install\ncd ..      \n#install bots\nwget -O bots-3.1.0.tar.gz http://sourceforge.net/projects/bots/files/bots%20open%20source%20edi%20software/3.1.0/bots-3.1.0.tar.gz/download\ntar -xf bots-3.1.0.tar.gz\ncd bots-3.1.0\nsudo python setup.py install\ncd .. \n#set rigths for bots directory to non-root:\nsudo chown -R myusername /usr/lib/python2.6/site-packages/bots\n\n#start up bots-webserver:\nbots-webserver.py\n\n\n\nInstallation from scratch (bots2.2)\n\n\n(Note that versions might not be correct anymore.)\n\n\nInstallation on vanilla CentOS6.2 (logged in as root):\n\n\n#install django\nwget http://www.djangoproject.com/download/1.3.1/tarball/\ntar -xf Django-1.3.1.tar.gz\ncd Django-1.3.1\npython setup.py install\ncd ..      \n#install cherrypy\nwget http://download.cherrypy.org/CherryPy/3.2.2/CherryPy-3.2.2.tar.gz\ntar -xf CherryPy-3.2.2.tar.gz\ncd CherryPy-3.2.2\npython setup.py install\ncd ..      \n#install Genshi\nwget http://ftp.edgewall.com/pub/genshi/Genshi-0.6.tar.gz\ntar -xf Genshi-0.6.tar.gz\ncd Genshi-0.6\npython setup.py install\ncd ..      \n#install bots\nwget http://sourceforge.net/projects/bots/files/bots%20open%20source%20edi%20software/2.2.1/bots-2.2.1.tar.gz/download\ntar -xf bots-2.2.1.tar.gz\ncd bots-2.2.1\npython setup.py install\ncd ..\n\n#start up bots-webserver:\nbots-webserver.py", 
            "title": "Installation Linux"
        }, 
        {
            "location": "/StartInstalllinux/#linux-unix-installation", 
            "text": "There is no  * .deb or  * .rpm for bots - would be great if you have experience \nwith this and want to give some help. \nSo a standard python source code install is done.    Install Python   Check if Python is already installed - most of the time python\n    is already installed on  * nix. Use python 2.6 or 2.7. (not\n    python >= 3.0).  If not: use package manager or see python web site.     Install dependencies/libraries   See  list of dependencies .  Easiest is to use your package manager for installing.     Install bots   Download  bots\n    installer \n    (e.g. bots-3.1.0.tar.gz)  Unpack (command-line):\n     tar bots-3.1.0.tar.gz  Go to created directory (command-line):\n     cd bots-3.1.0  Install (command-line):\n     python setup.py install  Postinstall: depending on what do want: change rights for\n    directories botssys, usersys and config or place these elsewhere\n    and make symbolic links in the bots installation directories.     Tip: place the directories botssys, usersys and config somewhere else\n(out of /usr), change the owner/rights and make symbolic links in the\nbots installation to these directories.", 
            "title": "Linux, Unix installation"
        }, 
        {
            "location": "/StartInstalllinux/#installation-from-scratch", 
            "text": "(Note that versions might not be correct anymore.)  Installation on amazon EC2, looks like red hat version of linux:  #install django\nwget -O django.tar.gz https://www.djangoproject.com/download/1.4.13/tarball/\ntar -xf django.tar.gz\ncd Django-1.4.13\nsudo python setup.py install\ncd ..      \n#install cherrypy\nwget http://download.cherrypy.org/CherryPy/3.2.2/CherryPy-3.2.2.tar.gz\ntar -xf CherryPy-3.2.2.tar.gz\ncd CherryPy-3.2.2\nsudo python setup.py install\ncd ..      \n#install Genshi\nwget http://ftp.edgewall.com/pub/genshi/Genshi-0.7.tar.gz\ntar -xf Genshi-0.7.tar.gz\ncd Genshi-0.7\nsudo python setup.py install\ncd ..      \n#install bots\nwget -O bots-3.1.0.tar.gz http://sourceforge.net/projects/bots/files/bots%20open%20source%20edi%20software/3.1.0/bots-3.1.0.tar.gz/download\ntar -xf bots-3.1.0.tar.gz\ncd bots-3.1.0\nsudo python setup.py install\ncd .. \n#set rigths for bots directory to non-root:\nsudo chown -R myusername /usr/lib/python2.6/site-packages/bots\n\n#start up bots-webserver:\nbots-webserver.py", 
            "title": "Installation from scratch"
        }, 
        {
            "location": "/StartInstalllinux/#installation-from-scratch-bots22", 
            "text": "(Note that versions might not be correct anymore.)  Installation on vanilla CentOS6.2 (logged in as root):  #install django\nwget http://www.djangoproject.com/download/1.3.1/tarball/\ntar -xf Django-1.3.1.tar.gz\ncd Django-1.3.1\npython setup.py install\ncd ..      \n#install cherrypy\nwget http://download.cherrypy.org/CherryPy/3.2.2/CherryPy-3.2.2.tar.gz\ntar -xf CherryPy-3.2.2.tar.gz\ncd CherryPy-3.2.2\npython setup.py install\ncd ..      \n#install Genshi\nwget http://ftp.edgewall.com/pub/genshi/Genshi-0.6.tar.gz\ntar -xf Genshi-0.6.tar.gz\ncd Genshi-0.6\npython setup.py install\ncd ..      \n#install bots\nwget http://sourceforge.net/projects/bots/files/bots%20open%20source%20edi%20software/2.2.1/bots-2.2.1.tar.gz/download\ntar -xf bots-2.2.1.tar.gz\ncd bots-2.2.1\npython setup.py install\ncd ..\n\n#start up bots-webserver:\nbots-webserver.py", 
            "title": "Installation from scratch (bots2.2)"
        }, 
        {
            "location": "/StartInstallFaq/", 
            "text": "Installation FAQ\n\n\n\n\nI try to install bots at Windows Vista/7, but.....\n\n\nProbably a rights problem - you'll have to have administrator rights in order to do a proper install.\n\n\nRight click the installer program, and choose 'Run as Administrator'.\n\n\nBots works on Vista/7/8!\n\n\nsometimes the shortcut is not installed in the menu, and you will have to make this manually. See \nStartGetBotsRunning\n\n\n\n\n\n\nDoes bots have edifact and x12 messages installed out-of-the-box?\n\n\nNo. But this can be downloaded on the \nsourceforge site\n either as part of a working configuration (plugin) of separate (grammars).\n\n\n\n\n\n\nBots is not working on linux - rights problems.\n\n\nStart bots-webserver and bots-engine with sufficient rights - e.g. as root.\n\n\nChange the owner/rights of the files in botssys, usersys and config; run bots-webserver/bots-engine without root rights.\n\n\n\n\n\n\nDuring windows installation: Error:\n\n\n\n\nclose failed in file object destructor: \nsys.excepthook is missing \nlost sys.stderr\n\n\n\n\n-   seems to happen when UAC is turned off.\n-   Actually bots just seems to be installed OK, and works OK.....\n-   Fixed this in version 3.2", 
            "title": "Installation FAQ"
        }, 
        {
            "location": "/StartInstallFaq/#installation-faq", 
            "text": "I try to install bots at Windows Vista/7, but.....  Probably a rights problem - you'll have to have administrator rights in order to do a proper install.  Right click the installer program, and choose 'Run as Administrator'.  Bots works on Vista/7/8!  sometimes the shortcut is not installed in the menu, and you will have to make this manually. See  StartGetBotsRunning    Does bots have edifact and x12 messages installed out-of-the-box?  No. But this can be downloaded on the  sourceforge site  either as part of a working configuration (plugin) of separate (grammars).    Bots is not working on linux - rights problems.  Start bots-webserver and bots-engine with sufficient rights - e.g. as root.  Change the owner/rights of the files in botssys, usersys and config; run bots-webserver/bots-engine without root rights.    During windows installation: Error:   close failed in file object destructor: \nsys.excepthook is missing \nlost sys.stderr  -   seems to happen when UAC is turned off.\n-   Actually bots just seems to be installed OK, and works OK.....\n-   Fixed this in version 3.2", 
            "title": "Installation FAQ"
        }, 
        {
            "location": "/StartInstallDependencies/", 
            "text": "Dependencies\n\n\nAlways needed\n\n\n\n\nNeeds: python 2.6/2.7. Python 2.5 works but extra dependencies are needed. Python \n= 3.0 does not work.\n\n\nNeeds: django \n= 1.4.0, django \n= 1.7.0\n\n\nNeeds: cherrypy \n 3.1.0\n\n\n\n\nOptional\n\n\n\n\nGenshi (when using templates/mapping to HTML).\n\n\nSFTP needs paramiko and pycrypto. Newer versions of paramiko also need ecdsa.\n\n\nCdecimals speeds up bots. See \nwebsite\n\n\nbots-dirmonitor needs:\n\n\npyinotify on \n*\nnix\n\n\nPython for Windows extensions (pywin) for windows\n\n\n\n\n\n\nxlrd (when using incoming editype 'excel').\n\n\nmysql-Python \n= 1.2.2, MySQL (when using database MySQL).\n\n\npsycopg2, PostgreSQL (when using database PostgreSQL).", 
            "title": "Dependencies"
        }, 
        {
            "location": "/StartInstallDependencies/#dependencies", 
            "text": "", 
            "title": "Dependencies"
        }, 
        {
            "location": "/StartInstallDependencies/#always-needed", 
            "text": "Needs: python 2.6/2.7. Python 2.5 works but extra dependencies are needed. Python  = 3.0 does not work.  Needs: django  = 1.4.0, django  = 1.7.0  Needs: cherrypy   3.1.0", 
            "title": "Always needed"
        }, 
        {
            "location": "/StartInstallDependencies/#optional", 
            "text": "Genshi (when using templates/mapping to HTML).  SFTP needs paramiko and pycrypto. Newer versions of paramiko also need ecdsa.  Cdecimals speeds up bots. See  website  bots-dirmonitor needs:  pyinotify on  * nix  Python for Windows extensions (pywin) for windows    xlrd (when using incoming editype 'excel').  mysql-Python  = 1.2.2, MySQL (when using database MySQL).  psycopg2, PostgreSQL (when using database PostgreSQL).", 
            "title": "Optional"
        }, 
        {
            "location": "/StartGetBotsRunning/", 
            "text": "Main components of bots\n\n\n\n\nBots-monitor: the user interface; the GUI; this is a web interface and runs in a web browser like Firefox, Chrome, or Internet Explorer. \n\n\nNote: bots uses web technology for the interface - but bots does NOT communicate to the internet for this. All is on your local computer. \n\n\nBots-monitor can be accessed from all workstations in your LAN. \n\n\nWarning: out-of-the-box bots-monitor uses plain HTTP and is not secure. Advised is either: \n\n\ndo not use bots-monitor over a public network (such as Internet) \n\n\nsecure the connection using \nHTTPS/SSL\n. \n\n\n\n\n\n\n\n\n\n\nBots-webserver: program that serves web pages to bots-monitor. The bots-webserver has to run in order to use bots-monitor. \n\n\nBots-engine: this program does the actual edi communication and translation. \n\n\nBots-engine does the communications and translations (of eg edifact or x12). \n\n\nBots-engine has no user interface (is a batch process). \n\n\nTo view the results of bots-engine, use bots-monitor. \n\n\nAfter performing its actions bots-engine stops.\n\n\n\n\n\n\n\n\nStart bots-monitor (using bots-webserver)\n\n\n\n\nStart bots-webserver; several options:\n\n\nWhen bots is installed using with Windows installer use the\n    'shortcut' to Bots-webserver in your 'Programs' menu.\n\n\n(\n*\nnix) Command line: \nbots-webserver.py\n\n\n(Windows, python 2.7) go to command line and:\n    \nc:\\python27\\python c:\\python27\\Scripts\\bots-webserver.py\n\n\n\n\n\n\nBots-webserver should stay running (and not disappear). If not, see\n    \nStart-up FAQ\n.\n\n\nView using your Internet browser\n\n\nWhen bots-webserver runs on the same computer, use address:\n    \nhttp://localhost:8080\n\n\nuse Firefox, Chrome, Opera or Internet Explorer. Bots does NOT\n    support Internet Explorer 6. Issues have been reported with IE8,\n    but for some IE8 does work.\n\n\nWhen accessing bots-monitor over your LAN (bots-webserver runs\n    on another computer) the IP address or DNS name of that\n    computer, e.g.: \nhttp://192.168.10.10:8080\n.\n\n\n\n\n\n\nDefault login: user name 'bots', password 'botsbots'.\n\n\nTip: add 'bots' to your favorites/bookmarks.\n\n\n\n\nStart bots-engine\n\n\nThere are several ways to start bots-engine:\n\n\n\n\n(windows, \n*\nnix) Start from bots-monitor: \nbots-monitor->Run->Run\n    (only new)\n\n\n(\n*\nnix) Command line: \nbots-engine.py\n\n\n(Windows, python 2.7) go to command line and:\n    \nc:\\python27\\python c:\\python27\\Scripts\\bots-engine.py\n\n\n\n\nThe results of what bots-engine has done can be viewed in the bots-monitor. \nNote: if you did not configure of bots to do something, the bots-engine\nwill run but will not do much. To get bots to do something see \nTutorial\n.\n\n\nFAQ\n\n\nWhen starting bots-webserver the window disappears after a few seconds?\n\n\n\n\nStart the bots-webserver from the command line; you will be able to\n    see what goes wrong. (Windows, python 2.7) go to command line and:\n    \nc:\\python27\\python c:\\python27\\Scripts\\bots-webserver.py\n\n\nFor the most common cause for the problem see the next question.\n\n\n\n\nBots-webserver gives error: IOError: Port 8080 not free on 'x.x.x.x' (or\nsimilar).\n\n\n\n\nAnother program already uses this 'port'.\n\n\nAdapt the port bots uses: in configuration file\n    \nbots/config/bots.ini\n look for 'port'.\n\n\nChange port to eg 8090\n\n\nStart bots-webserver again.\n\n\nIn your browser you will have to indicate another port eg:\n    \nhttp://localhost:8090\n\n\n\n\nCan I run multiple instances of bots-engine in parallel?\n\n\nNo, this is not possible.\n\n\nInstead bots >= 3.0 has better control of running the engine: \njobqueue-server\n.", 
            "title": "Get bots running"
        }, 
        {
            "location": "/StartGetBotsRunning/#main-components-of-bots", 
            "text": "Bots-monitor: the user interface; the GUI; this is a web interface and runs in a web browser like Firefox, Chrome, or Internet Explorer.   Note: bots uses web technology for the interface - but bots does NOT communicate to the internet for this. All is on your local computer.   Bots-monitor can be accessed from all workstations in your LAN.   Warning: out-of-the-box bots-monitor uses plain HTTP and is not secure. Advised is either:   do not use bots-monitor over a public network (such as Internet)   secure the connection using  HTTPS/SSL .       Bots-webserver: program that serves web pages to bots-monitor. The bots-webserver has to run in order to use bots-monitor.   Bots-engine: this program does the actual edi communication and translation.   Bots-engine does the communications and translations (of eg edifact or x12).   Bots-engine has no user interface (is a batch process).   To view the results of bots-engine, use bots-monitor.   After performing its actions bots-engine stops.", 
            "title": "Main components of bots"
        }, 
        {
            "location": "/StartGetBotsRunning/#start-bots-monitor-using-bots-webserver", 
            "text": "Start bots-webserver; several options:  When bots is installed using with Windows installer use the\n    'shortcut' to Bots-webserver in your 'Programs' menu.  ( * nix) Command line:  bots-webserver.py  (Windows, python 2.7) go to command line and:\n     c:\\python27\\python c:\\python27\\Scripts\\bots-webserver.py    Bots-webserver should stay running (and not disappear). If not, see\n     Start-up FAQ .  View using your Internet browser  When bots-webserver runs on the same computer, use address:\n     http://localhost:8080  use Firefox, Chrome, Opera or Internet Explorer. Bots does NOT\n    support Internet Explorer 6. Issues have been reported with IE8,\n    but for some IE8 does work.  When accessing bots-monitor over your LAN (bots-webserver runs\n    on another computer) the IP address or DNS name of that\n    computer, e.g.:  http://192.168.10.10:8080 .    Default login: user name 'bots', password 'botsbots'.  Tip: add 'bots' to your favorites/bookmarks.", 
            "title": "Start bots-monitor (using bots-webserver)"
        }, 
        {
            "location": "/StartGetBotsRunning/#start-bots-engine", 
            "text": "There are several ways to start bots-engine:   (windows,  * nix) Start from bots-monitor:  bots-monitor->Run->Run\n    (only new)  ( * nix) Command line:  bots-engine.py  (Windows, python 2.7) go to command line and:\n     c:\\python27\\python c:\\python27\\Scripts\\bots-engine.py   The results of what bots-engine has done can be viewed in the bots-monitor. \nNote: if you did not configure of bots to do something, the bots-engine\nwill run but will not do much. To get bots to do something see  Tutorial .", 
            "title": "Start bots-engine"
        }, 
        {
            "location": "/StartGetBotsRunning/#faq", 
            "text": "When starting bots-webserver the window disappears after a few seconds?   Start the bots-webserver from the command line; you will be able to\n    see what goes wrong. (Windows, python 2.7) go to command line and:\n     c:\\python27\\python c:\\python27\\Scripts\\bots-webserver.py  For the most common cause for the problem see the next question.   Bots-webserver gives error: IOError: Port 8080 not free on 'x.x.x.x' (or\nsimilar).   Another program already uses this 'port'.  Adapt the port bots uses: in configuration file\n     bots/config/bots.ini  look for 'port'.  Change port to eg 8090  Start bots-webserver again.  In your browser you will have to indicate another port eg:\n     http://localhost:8090   Can I run multiple instances of bots-engine in parallel?  No, this is not possible.  Instead bots >= 3.0 has better control of running the engine:  jobqueue-server .", 
            "title": "FAQ"
        }, 
        {
            "location": "/StartMyFirstPlugin/", 
            "text": "My first plugin\n\n\nPurpose of this tutorial is to get your first edi configuration\nrunning.\n\nThis is done by installing plugin 'my_first_plugin'; this plugin\nprovides a working configuration.\n\nWhen run, this configuration will read and write example edi messages\n(provided in the plugin) from your system.\n\nIn this configuration incoming edifact orders are translated to a fixed\nfile format.\n\n\nInstall plugin 'my_first_plugin'\n\n\nAssumed is:\n\n\n\n\nYou've installed bots, see \ninstallation\n\n\nYou've managed to get bots-monitor running, see \nget bots\n    running\n.\n\n\n\n\nNow download and install plugin 'my_first_plugin'.\n\nInstructions for installing a plugin are \nhere\n.\n\nThe plugin can be downloaded from \nthe bots sourceforge\nsite\n.\n\n\nActivate the route\n\n\n\n\ngo to the routes screen: \nbots-monitor->Configuration->Routes\n\n\nnote that route 'myfirstroute' is not active now (indicated by red\n    icon)\n\n\nselect the tick-box in front of the route 'myfirstroute'\n\n\nselect action 'activate/de-activate'\n\n\nclick on the 'Go'-button behind the selected action.\n\n\nnote that route 'myfirstroute' is active now (indicated by green\n    icon)\n\n\n\n\nRun the translation\n\n\nRun the translation: \nbots-monitor->Run->Run (Only New)\n.\n\nYou will get notified that the bots-engine is started.\n\nBots-engine is the part of bots that does the translations and\ncommunications; it runs in the background. Bots-engine will be finished\nin approximately one second.\n\n\nView the results\n\n\nNow let's view the results of the translation:\n\n\n\n\nFirst look at the results of the run: \nbots-monitor->All\n    runs->Reports (per run)\n. Each run of bots is represented by a\n    line; the last run is on top.\n\n\nView the incoming files via \nbots-monitor->Last run->Incoming\n.\n    Click on the incoming file to see its contents.\n\n\nView the outgoing files (the results of the translation) go to or\n    \nbots-monitor->Last run->outgoing\n. Again: click on the file name\n    to see its contents.\n\n\n\n\nNote: this configuration reads the incoming files but does not delete\nthem. So you can run it over and over again.\n\n\nMore\n\n\n\n\nScreenshots and information about \nviewing the\n    results\n.\n\n\nWalk through the configuration in this plugin is\n    \nhere\n.\n\n\nA more detailed explanation about the 'run' and what happens in a\n    run is \nhere\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/StartMyFirstPlugin/#my-first-plugin", 
            "text": "Purpose of this tutorial is to get your first edi configuration\nrunning. \nThis is done by installing plugin 'my_first_plugin'; this plugin\nprovides a working configuration. \nWhen run, this configuration will read and write example edi messages\n(provided in the plugin) from your system. \nIn this configuration incoming edifact orders are translated to a fixed\nfile format.", 
            "title": "My first plugin"
        }, 
        {
            "location": "/StartMyFirstPlugin/#install-plugin-my95first95plugin", 
            "text": "Assumed is:   You've installed bots, see  installation  You've managed to get bots-monitor running, see  get bots\n    running .   Now download and install plugin 'my_first_plugin'. \nInstructions for installing a plugin are  here . \nThe plugin can be downloaded from  the bots sourceforge\nsite .", 
            "title": "Install plugin 'my_first_plugin'"
        }, 
        {
            "location": "/StartMyFirstPlugin/#activate-the-route", 
            "text": "go to the routes screen:  bots-monitor->Configuration->Routes  note that route 'myfirstroute' is not active now (indicated by red\n    icon)  select the tick-box in front of the route 'myfirstroute'  select action 'activate/de-activate'  click on the 'Go'-button behind the selected action.  note that route 'myfirstroute' is active now (indicated by green\n    icon)", 
            "title": "Activate the route"
        }, 
        {
            "location": "/StartMyFirstPlugin/#run-the-translation", 
            "text": "Run the translation:  bots-monitor->Run->Run (Only New) . \nYou will get notified that the bots-engine is started. \nBots-engine is the part of bots that does the translations and\ncommunications; it runs in the background. Bots-engine will be finished\nin approximately one second.", 
            "title": "Run the translation"
        }, 
        {
            "location": "/StartMyFirstPlugin/#view-the-results", 
            "text": "Now let's view the results of the translation:   First look at the results of the run:  bots-monitor->All\n    runs->Reports (per run) . Each run of bots is represented by a\n    line; the last run is on top.  View the incoming files via  bots-monitor->Last run->Incoming .\n    Click on the incoming file to see its contents.  View the outgoing files (the results of the translation) go to or\n     bots-monitor->Last run->outgoing . Again: click on the file name\n    to see its contents.   Note: this configuration reads the incoming files but does not delete\nthem. So you can run it over and over again.", 
            "title": "View the results"
        }, 
        {
            "location": "/StartMyFirstPlugin/#more", 
            "text": "Screenshots and information about  viewing the\n    results .  Walk through the configuration in this plugin is\n     here .  A more detailed explanation about the 'run' and what happens in a\n    run is  here .", 
            "title": "More"
        }, 
        {
            "location": "/StartMyFirstPluginResults/", 
            "text": "View runs\n\n\nFor each run of bots-engine you can see the results\nin \nbots-monitor->All runs->Reports (per run)\n:\n\n\n\n\nIf you go to the star in front of a line, a drop-down menu appears where\nyou can zoom in on the results of the run.\n\n\nIncoming\n\n\nIncoming files of the last run can be viewed via \nbots-monitor->Last\nrun->Incoming\n:\n\n\n\n\nView all incoming files via \nbots-monitor->All runs->Incoming\n:\\\n\n\n \n\n\nBy using the 'Change selection' button you can change the selection\ncriteria for the view.\n\nBy clicking a filename you can view the contents of that file.\n\n\nOutgoing\n\n\nThe outgoing files of the last run can be viewed via\n\nbots-monitor->Last run->Outgoing\n:\n\n\n\nBy clicking a filename you can view the contents of that file.\n\n\nDetail screen\n\n\nWhen you are in the 'incoming' screen and go to the star in front of a\nline, a drop-down menu appears where you can zoom in on the details of\nthe processing of the incoming file:  \n\n\n \n\n\nHere the detailed steps in processing an incoming file are shown.", 
            "title": "View results"
        }, 
        {
            "location": "/StartMyFirstPluginResults/#view-runs", 
            "text": "For each run of bots-engine you can see the results\nin  bots-monitor->All runs->Reports (per run) :   If you go to the star in front of a line, a drop-down menu appears where\nyou can zoom in on the results of the run.", 
            "title": "View runs"
        }, 
        {
            "location": "/StartMyFirstPluginResults/#incoming", 
            "text": "Incoming files of the last run can be viewed via  bots-monitor->Last\nrun->Incoming :   View all incoming files via  bots-monitor->All runs->Incoming :\\     By using the 'Change selection' button you can change the selection\ncriteria for the view. \nBy clicking a filename you can view the contents of that file.", 
            "title": "Incoming"
        }, 
        {
            "location": "/StartMyFirstPluginResults/#outgoing", 
            "text": "The outgoing files of the last run can be viewed via bots-monitor->Last run->Outgoing :  \nBy clicking a filename you can view the contents of that file.", 
            "title": "Outgoing"
        }, 
        {
            "location": "/StartMyFirstPluginResults/#detail-screen", 
            "text": "When you are in the 'incoming' screen and go to the star in front of a\nline, a drop-down menu appears where you can zoom in on the details of\nthe processing of the incoming file:       Here the detailed steps in processing an incoming file are shown.", 
            "title": "Detail screen"
        }, 
        {
            "location": "/StartMyFirstPluginSetup/", 
            "text": "The setup in my_first_plugin\n\n\nLook at the configured route\n\n\nTo view the route configured: \nbots-monitor->Configuration->Routes\n\nThis will look like:\n\n\n \n\n\nA route tells bots what to do: where to get the edi-files, what type of files these\nare (this determines the translation done), and where to put the translated edi-files..\n\nOne route is configured, called 'myfirstfoute'.\n\nThe route uses communication channel 'myfirstroute_in' to get incoming\nedi-files.\n\nThese are edifact format: \nfromeditype=edifact\n,\n\nfrommessagetype=edifact\n.\n\nBots will figure out the exact messagetype (like ORDERSD96AUN) by\nitself.\n\nThe translated edi-files (fixed format) go to communication channel\n\nmyfirstroute\\_out\n.\n\n\nView the communication channels\n\n\nTo view the communication channels configured:\n\nbots-monitor->Configuration->Channels\n\nThis will look like:\n\n\n \n\n\nA communications channel communicates edi-files in or out of bots.\n\nThere are different types of channels, eg: file, ftp, smtp, pop3, etc.\n\nIn this plugin 2 routes are configured. Both are type \nfile\n:\n\nall reading and writing is to file system.\n\nThere is one \nin\n-channel and one \nout\n-channel.\n\nChannels for file-system require a path and a filename.\n\n\nThe translations in this configuration\n\n\nTo view the translations configured:\n\nbots-monitor->Configuration->Translations\n\nThis will look like:\n\n\n There is\none \ntranslation\n configured.\n\nThis translation translates edi messages of editype \nedifact\n and\nmessagetype \nORDERSD96AUNEAN008\n using mappingscript\n\nmyfirstscriptordersedi2fixed\n to edi messages of editype \nfixed\n and\nmessagetype \nordersfixed\n.  \n\n\nEach messagetype has a \ngrammar\n which\ndescribes the message: records, fields, formats. The grammar is a file;\nyou can find it in:\n\n\nC:\\Python27\\Lib\\site-packages\\bots\\usersys\\grammars\\fixed\n\nThe \nmapping\n script does the actual\ntranslation; basically it gets data from the incoming message and puts\nthe data in the outgoing message.\n\nThe mapping script is a file; you can find it in:\n\n\nC:\\Python27\\Lib\\site-packages\\bots\\usersys\\mappings\\edifact", 
            "title": "Walk through setup"
        }, 
        {
            "location": "/StartMyFirstPluginSetup/#the-setup-in-my95first95plugin", 
            "text": "", 
            "title": "The setup in my_first_plugin"
        }, 
        {
            "location": "/StartMyFirstPluginSetup/#look-at-the-configured-route", 
            "text": "To view the route configured:  bots-monitor->Configuration->Routes \nThis will look like:     A route tells bots what to do: where to get the edi-files, what type of files these\nare (this determines the translation done), and where to put the translated edi-files.. \nOne route is configured, called 'myfirstfoute'. \nThe route uses communication channel 'myfirstroute_in' to get incoming\nedi-files. \nThese are edifact format:  fromeditype=edifact , frommessagetype=edifact . \nBots will figure out the exact messagetype (like ORDERSD96AUN) by\nitself. \nThe translated edi-files (fixed format) go to communication channel myfirstroute\\_out .", 
            "title": "Look at the configured route"
        }, 
        {
            "location": "/StartMyFirstPluginSetup/#view-the-communication-channels", 
            "text": "To view the communication channels configured: bots-monitor->Configuration->Channels \nThis will look like:     A communications channel communicates edi-files in or out of bots. \nThere are different types of channels, eg: file, ftp, smtp, pop3, etc. \nIn this plugin 2 routes are configured. Both are type  file : \nall reading and writing is to file system. \nThere is one  in -channel and one  out -channel. \nChannels for file-system require a path and a filename.", 
            "title": "View the communication channels"
        }, 
        {
            "location": "/StartMyFirstPluginSetup/#the-translations-in-this-configuration", 
            "text": "To view the translations configured: bots-monitor->Configuration->Translations \nThis will look like:   There is\none  translation  configured. \nThis translation translates edi messages of editype  edifact  and\nmessagetype  ORDERSD96AUNEAN008  using mappingscript myfirstscriptordersedi2fixed  to edi messages of editype  fixed  and\nmessagetype  ordersfixed .    Each messagetype has a  grammar  which\ndescribes the message: records, fields, formats. The grammar is a file;\nyou can find it in:  C:\\Python27\\Lib\\site-packages\\bots\\usersys\\grammars\\fixed \nThe  mapping  script does the actual\ntranslation; basically it gets data from the incoming message and puts\nthe data in the outgoing message. \nThe mapping script is a file; you can find it in:  C:\\Python27\\Lib\\site-packages\\bots\\usersys\\mappings\\edifact", 
            "title": "The translations in this configuration"
        }, 
        {
            "location": "/StartMyFirstPluginDepth/", 
            "text": "How does this 'run' thing work?\n\n\n\n\nWhen you run bots-engine, each active route is run. \n\n\nPer route bots will perform all configured\n    actions (read, translate, write): \n\n\nIn bots-monitor you can view the results of the run(s), \n    the incoming edi-files, the outgoing edi-files,\n    etc.\n\n\n\n\nDetailed explanation\n\n\n \n\n\nAll actions in the picture take place in the route 'myfirstroute'.\n\nThe route contains:\n\n\n\n\nan in-channel - fetches the incoming orders.\n\n\nin the route is indicated that it should translate\n\n\nan out-channel - transports the in-house orders to your file system.\n\n\n\n\nWhen the incoming files have been read via the in-channel, bots starts\nto translate:\n\n\n\n\nbots parses the incoming file, using the information in the route:\n    editype=edifact, messagetype=edifact.\n\n\nas edifact is a standard bots can find out itself that the incoming\n    edifact file contains order messages of messagetype\n    ORDERSD96AUNEAN008\n\n\nbots looks in the translation table (see\n    \nbots-monitor->Configuration->translations\n) to find out what to\n    do: what mapping script to use, to what editype and messagetype\n    should be translated. In this case the mapping script\n    'myfirstscriptordersedi2fixed' translates to editype 'fixed',\n    messagetype 'ordersfixed'.\n\n\nthe mapping script is the heart of the translation. In the mapping\n    script the data from the incoming message is fetched and place into\n    the outgoing message.\n\n\n\n\nA complete translation in bots needs:\n\n\nConfigure of the translation\n(\nbots-monitor->Configuration->Translations\n).\n\n\nA grammar for the incoming message. A grammar describes an edi-message:\nthe records, sequence of the records, fields in the records, field\nlengths etc.\n\n\nA mapping script. The mapping script gets data from the incoming message\nand puts it in the outgoing message. A mapping script is a Python\nscript. You do not need to be proficient in Python to do this; only the\nbasics of Python are used. And Python is a relatively easy computer\nlanguage. There are a lot of good examples of mapping scripts in the\nplugins.\n\n\nA grammar for the outgoing message.", 
            "title": "What happened"
        }, 
        {
            "location": "/StartMyFirstPluginDepth/#how-does-this-run-thing-work", 
            "text": "When you run bots-engine, each active route is run.   Per route bots will perform all configured\n    actions (read, translate, write):   In bots-monitor you can view the results of the run(s), \n    the incoming edi-files, the outgoing edi-files,\n    etc.", 
            "title": "How does this 'run' thing work?"
        }, 
        {
            "location": "/StartMyFirstPluginDepth/#detailed-explanation", 
            "text": "All actions in the picture take place in the route 'myfirstroute'. \nThe route contains:   an in-channel - fetches the incoming orders.  in the route is indicated that it should translate  an out-channel - transports the in-house orders to your file system.   When the incoming files have been read via the in-channel, bots starts\nto translate:   bots parses the incoming file, using the information in the route:\n    editype=edifact, messagetype=edifact.  as edifact is a standard bots can find out itself that the incoming\n    edifact file contains order messages of messagetype\n    ORDERSD96AUNEAN008  bots looks in the translation table (see\n     bots-monitor->Configuration->translations ) to find out what to\n    do: what mapping script to use, to what editype and messagetype\n    should be translated. In this case the mapping script\n    'myfirstscriptordersedi2fixed' translates to editype 'fixed',\n    messagetype 'ordersfixed'.  the mapping script is the heart of the translation. In the mapping\n    script the data from the incoming message is fetched and place into\n    the outgoing message.   A complete translation in bots needs:  Configure of the translation\n( bots-monitor->Configuration->Translations ).  A grammar for the incoming message. A grammar describes an edi-message:\nthe records, sequence of the records, fields in the records, field\nlengths etc.  A mapping script. The mapping script gets data from the incoming message\nand puts it in the outgoing message. A mapping script is a Python\nscript. You do not need to be proficient in Python to do this; only the\nbasics of Python are used. And Python is a relatively easy computer\nlanguage. There are a lot of good examples of mapping scripts in the\nplugins.  A grammar for the outgoing message.", 
            "title": "Detailed explanation"
        }, 
        {
            "location": "/MonitorIntroduction/", 
            "text": "information and screen-shots of bots-monitor!\n\n\nMenu in bots-monitor\n\n\n\n\nHome: start page and general information.\n\n\nLast run: view results of the last run:\n\n\nincoming: view incoming files and results\n\n\ndocument: view status of business document. An edi file can\n    contain multiple documents (eg orders). In this view are the\n    results of the separate business documents. See \nsetting\n    document views\n\n\noutgoing: view outgoing files and results\n\n\nprocess errors: view process errors; mostly these will be\n    communication errors.\n\n\n\n\n\n\nAll runs: view results of all runs:\n\n\nreports: view of all runs and results\n\n\nincoming: view incoming files and results\n\n\ndocument: view status of business document. An edi file can\n    contain multiple documents (eg orders). In this view are the\n    results of the separate business documents. See \nsetting\n    document views\n\n\noutgoing: view outgoing files and results\n\n\nprocess errors: view process errors; mostly these will be\n    communication errors.\n\n\nconfirmations: view the results of confirmations you wanted and\n    confirmation you gave. See \nsetup\n    confirmations\n\n\n\n\n\n\nSelect: use criteria like date/time to view results you want to see\n    like eg editype edifact or x12.\n\n\nNote: select screens can also be used using 'select' button in\n    other views.\n\n\n\n\n\n\nConfiguration: configuration of the edi setup.\n\n\nSystem tasks (administrators only): read plugins, create plugins,\n    maintain users, etc.\n\n\nRun: manually start a run of bots-engine:\n\n\nRun (only new): receive, translate, and send new edi messages.\n\n\nRun userindicated rerecieves: receive previously received\n    edi-files again from archive. User has to mark edi-files as\n    're-receive' via incoming view.\n\n\nRun userindicated resends: resend previously send edi-files\n    again. User has to mark edi-files as 're-send' via outgoing\n    view.\n\n\n\n\n\n\n\n\nUser interface tips\n\n\n\n\nView screens often have a star at the beginning of each line; moving\n    over the star will show possible actions.\n\n\nIn view screens, you can see the contents of an edi file if you click on\n    the file name.\n\n\nWhen viewing the contents of an edi file, you can go backwards and\n    forwards to see the processing steps of the file.\n\n\nMight be handy to use tabbed browsing.\n\n\nBots uses user rights (viewers, administrators and superuser). See\n    \nsetting user rights", 
            "title": "Introduction"
        }, 
        {
            "location": "/MonitorIntroduction/#menu-in-bots-monitor", 
            "text": "Home: start page and general information.  Last run: view results of the last run:  incoming: view incoming files and results  document: view status of business document. An edi file can\n    contain multiple documents (eg orders). In this view are the\n    results of the separate business documents. See  setting\n    document views  outgoing: view outgoing files and results  process errors: view process errors; mostly these will be\n    communication errors.    All runs: view results of all runs:  reports: view of all runs and results  incoming: view incoming files and results  document: view status of business document. An edi file can\n    contain multiple documents (eg orders). In this view are the\n    results of the separate business documents. See  setting\n    document views  outgoing: view outgoing files and results  process errors: view process errors; mostly these will be\n    communication errors.  confirmations: view the results of confirmations you wanted and\n    confirmation you gave. See  setup\n    confirmations    Select: use criteria like date/time to view results you want to see\n    like eg editype edifact or x12.  Note: select screens can also be used using 'select' button in\n    other views.    Configuration: configuration of the edi setup.  System tasks (administrators only): read plugins, create plugins,\n    maintain users, etc.  Run: manually start a run of bots-engine:  Run (only new): receive, translate, and send new edi messages.  Run userindicated rerecieves: receive previously received\n    edi-files again from archive. User has to mark edi-files as\n    're-receive' via incoming view.  Run userindicated resends: resend previously send edi-files\n    again. User has to mark edi-files as 're-send' via outgoing\n    view.", 
            "title": "Menu in bots-monitor"
        }, 
        {
            "location": "/MonitorIntroduction/#user-interface-tips", 
            "text": "View screens often have a star at the beginning of each line; moving\n    over the star will show possible actions.  In view screens, you can see the contents of an edi file if you click on\n    the file name.  When viewing the contents of an edi file, you can go backwards and\n    forwards to see the processing steps of the file.  Might be handy to use tabbed browsing.  Bots uses user rights (viewers, administrators and superuser). See\n     setting user rights", 
            "title": "User interface tips"
        }, 
        {
            "location": "/MonitorRereceive/", 
            "text": "How to re-receive\n\n\nIncoming files can be 're-received'.\n\nWhen re-receiving the (previously received) file is taken from the\narchive, and re-processed.\n\nAs the file from the archive is used, no (outside) communication is\nused.\n\n\nSteps\n\n\n\n\nin the incoming screen, go to the start (in front of each line); a\n    small menu will pop-up. Choose 'rereceive' from this menu. The file\n    will be marked as 'rereveive'. Mark all files that you want to\n    re-receive.\n\n\nGo to main menu->Run->Run user-indicated re-receives\n\n\nThe engine will now start, and do all the re-receives you marked.\n\n\n\n\nRe-receive many files\n\n\nAs the files need to be marked one by one, this can be troublesome when\nyou need to re-receive many files.  \n\n\nIn the screen for incoming there is a button called 'Rereceive all'.\nWhen you use this button all files in the selection are marked as\nre-receive. This might take some while.  \n\n\nWarning: \nall\n files in the selection are marked, not only the ones\nvisible on your page.\n\n\nTip: first make the right selection via the button 'Change Selection'.\nAdditional individual files can be marked/de-marked later.", 
            "title": "How to rereceive"
        }, 
        {
            "location": "/MonitorRereceive/#how-to-re-receive", 
            "text": "Incoming files can be 're-received'. \nWhen re-receiving the (previously received) file is taken from the\narchive, and re-processed. \nAs the file from the archive is used, no (outside) communication is\nused.", 
            "title": "How to re-receive"
        }, 
        {
            "location": "/MonitorRereceive/#steps", 
            "text": "in the incoming screen, go to the start (in front of each line); a\n    small menu will pop-up. Choose 'rereceive' from this menu. The file\n    will be marked as 'rereveive'. Mark all files that you want to\n    re-receive.  Go to main menu->Run->Run user-indicated re-receives  The engine will now start, and do all the re-receives you marked.", 
            "title": "Steps"
        }, 
        {
            "location": "/MonitorRereceive/#re-receive-many-files", 
            "text": "As the files need to be marked one by one, this can be troublesome when\nyou need to re-receive many files.    In the screen for incoming there is a button called 'Rereceive all'.\nWhen you use this button all files in the selection are marked as\nre-receive. This might take some while.    Warning:  all  files in the selection are marked, not only the ones\nvisible on your page.  Tip: first make the right selection via the button 'Change Selection'.\nAdditional individual files can be marked/de-marked later.", 
            "title": "Re-receive many files"
        }, 
        {
            "location": "/OverviewConfiguration/", 
            "text": "Configuration Overview\n\n\nOut of the box bots does nothing. You have to configure bots for your\nspecific edi requirements.\n\nCheck out different ways to \nstart your own configuration\n.\n\nSee \ndebug overview\n for info how to debug while making a\nconfiguration.\n\nBots also has nice features for \nconfiguration change management\n \n(build test sets for you configuration, easier pushing of changes from test to \nproduction).\n\n\nConfiguration explained in short\n\n\n\n\n'routes' are edi-workflows.\n\n\n'channels' do the communication (from file system, ftp, etc).\n\n\neach route hs an 'inchannel' and an 'outchannel'\n\n\nTranslations rules determine: translate what to what.\n\n\n\n\nMost asked configuration topics\n\n\n\n\ncomposite routes\n\n\npassthrough route\n (without translation)\n\n\noptions for outgoing filenames\n\n\ndirect database communication\n\n\npartner specific translations\n\n\ncode conversion\n\n\nview \nbusiness documents\n instead of edi-files.\n\n\nconfirmations/acknowledgements\n\n\nmerging and enveloping outgoing edi files\n\n\npartner specific syntax\n (especially for x12\n    and edifact)", 
            "title": "Overview"
        }, 
        {
            "location": "/OverviewConfiguration/#configuration-overview", 
            "text": "Out of the box bots does nothing. You have to configure bots for your\nspecific edi requirements. \nCheck out different ways to  start your own configuration . \nSee  debug overview  for info how to debug while making a\nconfiguration. \nBots also has nice features for  configuration change management  \n(build test sets for you configuration, easier pushing of changes from test to \nproduction).", 
            "title": "Configuration Overview"
        }, 
        {
            "location": "/OverviewConfiguration/#configuration-explained-in-short", 
            "text": "'routes' are edi-workflows.  'channels' do the communication (from file system, ftp, etc).  each route hs an 'inchannel' and an 'outchannel'  Translations rules determine: translate what to what.", 
            "title": "Configuration explained in short"
        }, 
        {
            "location": "/OverviewConfiguration/#most-asked-configuration-topics", 
            "text": "composite routes  passthrough route  (without translation)  options for outgoing filenames  direct database communication  partner specific translations  code conversion  view  business documents  instead of edi-files.  confirmations/acknowledgements  merging and enveloping outgoing edi files  partner specific syntax  (especially for x12\n    and edifact)", 
            "title": "Most asked configuration topics"
        }, 
        {
            "location": "/ConfigurationHow/", 
            "text": "How do I make an edi configuration?\n\n\n\n\nUse \nplugins\n. This is a quick and easy way to install predefined configurations of bots.\n\n\nDownloads: \nbots sourceforge site\n\n\nDescription of plugins: \non this wiki page\n\n\nPlugins can be shared by users and communities. Send your plugin!\n\n\n\n\n\n\nUse a plugin 'close' to what you want, and adapt.\n\n\nDo your own configuration:\n\n\nTake a look at \nthe tutorial\n.\n\n\nUse bots-monitor for configuration of routes, channels, translations and partners.\n\n\nThere are grammars for all edifact and x12 messages \n    \non the bots sourceforge site\n.\n\n\nGrammars and mapping require knowledge of edi and edi-standards and some python knowledge. \n    (python is a relatively easy programming, no deep knowledge of python is needed).\n\n\nUse command line tool 'bots-xml2botsgrammar.py' to generate a grammar from an xml file.\n\n\nCheck a grammar using the command line tool 'bots-grammar.py'.\n\n\n\n\n\n\nA step by step \ndescription\n of making a configuration.\n\n\nIf you are doing your own configuration check out \nhow to debug\n\n\nHire us (\nEbbersConsult\n - the makers of Bots) to help you with configuring bots: we are the edi experts.", 
            "title": "How to do configuration"
        }, 
        {
            "location": "/ConfigurationHow/#how-do-i-make-an-edi-configuration", 
            "text": "Use  plugins . This is a quick and easy way to install predefined configurations of bots.  Downloads:  bots sourceforge site  Description of plugins:  on this wiki page  Plugins can be shared by users and communities. Send your plugin!    Use a plugin 'close' to what you want, and adapt.  Do your own configuration:  Take a look at  the tutorial .  Use bots-monitor for configuration of routes, channels, translations and partners.  There are grammars for all edifact and x12 messages \n     on the bots sourceforge site .  Grammars and mapping require knowledge of edi and edi-standards and some python knowledge. \n    (python is a relatively easy programming, no deep knowledge of python is needed).  Use command line tool 'bots-xml2botsgrammar.py' to generate a grammar from an xml file.  Check a grammar using the command line tool 'bots-grammar.py'.    A step by step  description  of making a configuration.  If you are doing your own configuration check out  how to debug  Hire us ( EbbersConsult  - the makers of Bots) to help you with configuring bots: we are the edi experts.", 
            "title": "How do I make an edi configuration?"
        }, 
        {
            "location": "/ConfigurationDIY/", 
            "text": "Configuration \"Do It Yourself\" step by step\n\n\nThis is how I start with a new route and translation...\n\n\n\n\n\n\nCreate some \nchannels\n (eg. test_in and test_out). These are just \"file\" channels that read \n    from \nbotssys\\infile\\(some-dir)\n and write to \nbotssys\\outfile\\(some-dir)\n. You should have some sample input documents \n    from your partner, put one or a few of these in the infile location. Make sure the test channel is NOT set to delete them.\n\n\n\n\n\n\nGet (or create) the incoming \ngrammar\n. If incoming is edifact or X12 then this part is already \n    done for you, download the grammars from the bots website. For XML there is a conversion tool to make a start. \n    For fixed/csv etc. you need to do it yourself, it is best to start with one of the plugin examples. Creating a fully \n    working correct grammar can be the most difficult part of setting up bots, but is a once-off task. From then on that \n    edi type can be used in any route.\n\n\n\n\n\n\nConfigure a \nroute\n to get files from your inchannel and specify the editype and messagetype \n    corresponding to your grammar. You can use the same editype for outgoing too for now. Don't worry about translation yet, \n    just run bots engine, check errors, and keep adjusting your grammar and testing iteratively until the file is \"received\" ok. \n    It will then be \"stuck\" because there's no translation. If you get syntax errors when using a downloaded grammar, most \n    likely the input file actually contains errors! Contact your partner about this, or correct them by editing the file and \n    continue testing.\n\n\n\n\n\n\nAs you did for incoming, create your outgoing grammar and configure it in the route. If you are creating your own grammars \n    try at first to keep them simple with no mandatory segments etc. This can be added later.\n\n\n\n\n\n\nConfigure a \ntranslation\n and create a \nmapping\n script. \n    Start with mapping just the bare minimum mapping one or two fields (eg. order number) and again iteratively \n    modify and test until you have some output. (if your output grammar is edifact or X12 for example, you'll need \n    to at least map the mandatory segments to create a valid document).\n\n\n\n\n\n\nWhen testing a mapping, it's very useful to insert print statements to help with \ndebugging\n. \n    The output will be seen in the webserver console window if you run bots engine from the GUI menu.\n\n\n\n\n\n\nOnce you can run the route with no errors and get \"something\" output you'll feel that sense of achievement and can then go on to add everything else you need into the mapping and grammar, piece by piece. If you have many mappings to do, create a module of common functions you create, and import into every mapping. Also check out the bots built in \nmapping functions\n provided. The \ncode conversion tables\n are particularly useful.\n\n\nThe channels are the final part once it's all working and tested, to read and write from the actual systems involved. Create the new channels and change the route to use them.\n\n\nI would say the learning curve is a little steep at first, but once started you'll be glad you did.", 
            "title": "DIY step by step"
        }, 
        {
            "location": "/ConfigurationDIY/#configuration-do-it-yourself-step-by-step", 
            "text": "This is how I start with a new route and translation...    Create some  channels  (eg. test_in and test_out). These are just \"file\" channels that read \n    from  botssys\\infile\\(some-dir)  and write to  botssys\\outfile\\(some-dir) . You should have some sample input documents \n    from your partner, put one or a few of these in the infile location. Make sure the test channel is NOT set to delete them.    Get (or create) the incoming  grammar . If incoming is edifact or X12 then this part is already \n    done for you, download the grammars from the bots website. For XML there is a conversion tool to make a start. \n    For fixed/csv etc. you need to do it yourself, it is best to start with one of the plugin examples. Creating a fully \n    working correct grammar can be the most difficult part of setting up bots, but is a once-off task. From then on that \n    edi type can be used in any route.    Configure a  route  to get files from your inchannel and specify the editype and messagetype \n    corresponding to your grammar. You can use the same editype for outgoing too for now. Don't worry about translation yet, \n    just run bots engine, check errors, and keep adjusting your grammar and testing iteratively until the file is \"received\" ok. \n    It will then be \"stuck\" because there's no translation. If you get syntax errors when using a downloaded grammar, most \n    likely the input file actually contains errors! Contact your partner about this, or correct them by editing the file and \n    continue testing.    As you did for incoming, create your outgoing grammar and configure it in the route. If you are creating your own grammars \n    try at first to keep them simple with no mandatory segments etc. This can be added later.    Configure a  translation  and create a  mapping  script. \n    Start with mapping just the bare minimum mapping one or two fields (eg. order number) and again iteratively \n    modify and test until you have some output. (if your output grammar is edifact or X12 for example, you'll need \n    to at least map the mandatory segments to create a valid document).    When testing a mapping, it's very useful to insert print statements to help with  debugging . \n    The output will be seen in the webserver console window if you run bots engine from the GUI menu.    Once you can run the route with no errors and get \"something\" output you'll feel that sense of achievement and can then go on to add everything else you need into the mapping and grammar, piece by piece. If you have many mappings to do, create a module of common functions you create, and import into every mapping. Also check out the bots built in  mapping functions  provided. The  code conversion tables  are particularly useful.  The channels are the final part once it's all working and tested, to read and write from the actual systems involved. Create the new channels and change the route to use them.  I would say the learning curve is a little steep at first, but once started you'll be glad you did.", 
            "title": "Configuration \"Do It Yourself\" step by step"
        }, 
        {
            "location": "/RoutesIntroduction/", 
            "text": "Introduction\n\n\n\n\nDefinition: \nA route is a workflow for edi-files\n\n\n\n\nA route determines where to get the incoming files, what to do with\nthese edi-files (translate!) and their destination.\n\n'Routes' are the most important concept in configuring bots.\n\nRoutes are independent: an edi-file in a route stays in that route.\n\nRoute are configured in \nbots-monitor->Configuration->Routes\n.  \n\n\n\n\nSchema of a simple route\n\n \n\n\nTo get a route like this working the following must be configured:\n\n\n\n\n\n\nthe route itself in \nbots-monitor->Configuration->Routes\n.\n\n\nan in-channel for incoming edi files.\n\n\nan out-channel for outgoing edi files.\n\n\nthe \ntranslation\n.\n\n\n\n\nThe route above is a simple route; files come from one source, there is\none translation, one destination.\n\nMore options are possible using \ncomposite routes", 
            "title": "Introduction"
        }, 
        {
            "location": "/RoutesIntroduction/#introduction", 
            "text": "Definition:  A route is a workflow for edi-files   A route determines where to get the incoming files, what to do with\nthese edi-files (translate!) and their destination. \n'Routes' are the most important concept in configuring bots. \nRoutes are independent: an edi-file in a route stays in that route. \nRoute are configured in  bots-monitor->Configuration->Routes .     Schema of a simple route \n   To get a route like this working the following must be configured:    the route itself in  bots-monitor->Configuration->Routes .  an in-channel for incoming edi files.  an out-channel for outgoing edi files.  the  translation .   The route above is a simple route; files come from one source, there is\none translation, one destination. \nMore options are possible using  composite routes", 
            "title": "Introduction"
        }, 
        {
            "location": "/RoutesComposite/", 
            "text": "Composite routes\n\n\nIntroduction\n\n\nA simple route reads the edi files from one inchannel, translates, and sends the translated files\nto one outchannel.\n\nMore flexibility is offered by the use of composite routes.\n\nIn a composite route there are several entries in the routes screen,\neach with the same 'idroute' but a different 'seq' (sequence number\nwithin route). Each entry (with different 'seq') is called\n\nroute-part\n.\n\nBest way to use this is to have each route-part do one thing; either:\n\n\n\n\nfetch incoming files; you can fetch files from multiple sources\n\n\ntranslate (typically once per route)\n\n\nsend outgoing files to different destinations/partners using\n    \nfiltering\n It is advised to set up\n    composite routes this way (using at least 3 route-parts).\n\n\n\n\nUse cases\n\n\n\n\nSend edi files via ftp where each partner has its own ftp-server.\n\n\nConfirmations/acknowledgements: acknowledgements for incoming\n    edi-files are routed back to the sender (filter by\n    editype/messagetype).\n\n\nFetch from multiple sources, eg ftp-servers of different partners..\n\n\nRoute to different internal destinations: invoices to another system\n    than ASN's (filter by messagetype)\n\n\nUse a VAN, but one partner uses AS2 (filter by partner)\n\n\nIncoming files are translated multiple times, each message-type goes\n    to different destination. Eg: translate orders both to in-house file\n    (import ERP) and an HTML-email (for viewing).\n\n\n\n\nExample plugin\n\n\nDownload \nthe plugin demo_composite_route\n\nThis plugin has one composite route consisting of:\n\n\n\n\n2 input parts\n\n\ntranslate part\n\n\n3 output parts, using filtering\n    Detailled description \nhere\n\n\n\n\nFiltering for different outchannels\n\n\nYou can filter per outchannel; eg send only asn's through this outchannel.  \n\n\nIn route-screen (\nbots-monitor->Configuration->Routes\n) the fields\nused for filtering under 'Filtering for outchannel'.  \n\n\nIf eg. \ntoeditype=csv\n, only csv-files will be sent over the\noutchannel.  \n\n\nNOTE: if filtering is not specified, all outgoing files in the route\nare sent through the outchannel.\n\n\nSchematic\n\n\nSchematic overview of a route consisting of 5 parts:\n \n\n\nNotes:\n\n\n\n\nif no inchannel in route-part nothing comes in for that route-part.\n\n\nif 'translate' in a route-part is off, no translation in that\n    route-part.\n\n\nif no outchannel in route-part nothing goes out for that route-part.", 
            "title": "Composite routes"
        }, 
        {
            "location": "/RoutesComposite/#composite-routes", 
            "text": "", 
            "title": "Composite routes"
        }, 
        {
            "location": "/RoutesComposite/#introduction", 
            "text": "A simple route reads the edi files from one inchannel, translates, and sends the translated files\nto one outchannel. \nMore flexibility is offered by the use of composite routes. \nIn a composite route there are several entries in the routes screen,\neach with the same 'idroute' but a different 'seq' (sequence number\nwithin route). Each entry (with different 'seq') is called route-part . \nBest way to use this is to have each route-part do one thing; either:   fetch incoming files; you can fetch files from multiple sources  translate (typically once per route)  send outgoing files to different destinations/partners using\n     filtering  It is advised to set up\n    composite routes this way (using at least 3 route-parts).", 
            "title": "Introduction"
        }, 
        {
            "location": "/RoutesComposite/#use-cases", 
            "text": "Send edi files via ftp where each partner has its own ftp-server.  Confirmations/acknowledgements: acknowledgements for incoming\n    edi-files are routed back to the sender (filter by\n    editype/messagetype).  Fetch from multiple sources, eg ftp-servers of different partners..  Route to different internal destinations: invoices to another system\n    than ASN's (filter by messagetype)  Use a VAN, but one partner uses AS2 (filter by partner)  Incoming files are translated multiple times, each message-type goes\n    to different destination. Eg: translate orders both to in-house file\n    (import ERP) and an HTML-email (for viewing).", 
            "title": "Use cases"
        }, 
        {
            "location": "/RoutesComposite/#example-plugin", 
            "text": "Download  the plugin demo_composite_route \nThis plugin has one composite route consisting of:   2 input parts  translate part  3 output parts, using filtering\n    Detailled description  here", 
            "title": "Example plugin"
        }, 
        {
            "location": "/RoutesComposite/#filtering-for-different-outchannels", 
            "text": "You can filter per outchannel; eg send only asn's through this outchannel.    In route-screen ( bots-monitor->Configuration->Routes ) the fields\nused for filtering under 'Filtering for outchannel'.    If eg.  toeditype=csv , only csv-files will be sent over the\noutchannel.    NOTE: if filtering is not specified, all outgoing files in the route\nare sent through the outchannel.", 
            "title": "Filtering for different outchannels"
        }, 
        {
            "location": "/RoutesComposite/#schematic", 
            "text": "Schematic overview of a route consisting of 5 parts:\n   Notes:   if no inchannel in route-part nothing comes in for that route-part.  if 'translate' in a route-part is off, no translation in that\n    route-part.  if no outchannel in route-part nothing goes out for that route-part.", 
            "title": "Schematic"
        }, 
        {
            "location": "/RoutesPass/", 
            "text": "Routes pass through\n\n\nSometimes you want to pass an edi-file through bots without translation.\n\n\nIn this case bots is only used to manage/register the sending or\nreceiving of edi-files.\n\n\nfor bots >= 3.0\n\n\nIn route (\nbots-monitor->Configuration->Routes\n) use value\n'Pass-through' for 'translate'.\n\n\nfor bots \\\n= 2.2\n\n\nUse a routescript:\n\n\n\n\nconfigure route the normal way\n    (\nbots-monitor->Configuration->Routes\n)\n\n\nmake a routescript with the same name as the routeID\n\n\nplace the routescript in \nbots/usersys/routescripts/routeid.py\n\n\n\n\nContents of routescript:\n\n\nfrom bots.botsconfig import *\nimport bots.transform as transform\n\ndef postincommunication(routedict,*args,**kwargs): \n    # postincommunication() is run after fromchannel communication.\n    # the status of incoming files is changed to outgoing. \n    # bots skips parsing and translation.\n    transform.addinfo(change={'status':MERGED},where={'status':FILEIN,'idroute':routedict['idroute']})", 
            "title": "PassThrough (no translation)"
        }, 
        {
            "location": "/RoutesPass/#routes-pass-through", 
            "text": "Sometimes you want to pass an edi-file through bots without translation.  In this case bots is only used to manage/register the sending or\nreceiving of edi-files.", 
            "title": "Routes pass through"
        }, 
        {
            "location": "/RoutesPass/#for-bots-62-30", 
            "text": "In route ( bots-monitor->Configuration->Routes ) use value\n'Pass-through' for 'translate'.", 
            "title": "for bots >= 3.0"
        }, 
        {
            "location": "/RoutesPass/#for-bots-22", 
            "text": "Use a routescript:   configure route the normal way\n    ( bots-monitor->Configuration->Routes )  make a routescript with the same name as the routeID  place the routescript in  bots/usersys/routescripts/routeid.py   Contents of routescript:  from bots.botsconfig import *\nimport bots.transform as transform\n\ndef postincommunication(routedict,*args,**kwargs): \n    # postincommunication() is run after fromchannel communication.\n    # the status of incoming files is changed to outgoing. \n    # bots skips parsing and translation.\n    transform.addinfo(change={'status':MERGED},where={'status':FILEIN,'idroute':routedict['idroute']})", 
            "title": "for bots \\&lt;= 2.2"
        }, 
        {
            "location": "/RoutesScripts/", 
            "text": "Route scripting\n\n\nWhen the standard routing of bots does not fit your needs, use routescripts.\n\n\nRoutescripts are python programs.\n\nThere are 2 types of routescripts:\n\n\n\n\nUser exits: at certain points in a route, bots calls your user exit.\n    See \noverview of exit points\n. Most\n    common usage is 'pre-processing' an edi file, see\n    \nrecipes\n.\n\n\nYour script takes over the whole route. This is done by using\n    function \nmain()\n in your routescript. See\n    \nExample\n.\n\n\n\n\nHow to set up a route-script:\n\n\nuse bots-monitor to add a new route.\n\n\nmake a routescript with the same name as the routeID in\n\nbots/usersys/routescripts/\nrouteid\n.py", 
            "title": "Introduction"
        }, 
        {
            "location": "/RoutesScripts/#route-scripting", 
            "text": "When the standard routing of bots does not fit your needs, use routescripts.  Routescripts are python programs. \nThere are 2 types of routescripts:   User exits: at certain points in a route, bots calls your user exit.\n    See  overview of exit points . Most\n    common usage is 'pre-processing' an edi file, see\n     recipes .  Your script takes over the whole route. This is done by using\n    function  main()  in your routescript. See\n     Example .   How to set up a route-script:  use bots-monitor to add a new route.  make a routescript with the same name as the routeID in bots/usersys/routescripts/ routeid .py", 
            "title": "Route scripting"
        }, 
        {
            "location": "/RouteScriptsOverviewExits/", 
            "text": "List of Exit Points in Routes\n\n\nThese examples show all of the available exit points for route-scripts\n\n\ndef start(routedict,*args,**kwargs): \n    # run before anything is done is route.\n    print routedict['idroute'],'start'\n\ndef preincommunication(routedict,*args,**kwargs): \n    # if there is a fromchannel: run before fromchannel communication.\n    print routedict['idroute'],'preincommunication'\n\ndef postincommunication(routedict,*args,**kwargs): \n    # if there is a fromchannel: run after fromchannel communication.\n    print routedict['idroute'],'postincommunication'\n\ndef pretranslation(routedict,*args,**kwargs): \n    # if translation is done in route: run before translation.\n    print routedict['idroute'],'pretranslation'\n\ndef posttranslation(routedict,*args,**kwargs): \n    # if translation is done in route: run after translation.\n    print routedict['idroute'],'posttranslation'\n\ndef premerge(routedict,*args,**kwargs): \n    # if there is a outchannel: run before merging.\n    print routedict['idroute'],'premerge'\n\ndef postmerge(routedict,*args,**kwargs): \n    # if there is a outchannel: run after merging.\n    print routedict['idroute'],'postmerge'\n\ndef preoutcommunication(routedict,*args,**kwargs): \n    # if there is a outchannel: run before outchannel communication.\n    print routedict['idroute'],'preoutcommunication'\n\ndef postoutcommunication(routedict,*args,**kwargs): \n    # if there is a outchannel: run after outchannel communication.\n    # eg. call an external program to process files just sent into ERP system\n    print routedict['idroute'],'postoutcommunication'\n\ndef end(routedict,*args,**kwargs): \n    # after everything is done in route\n    print routedict['idroute'],'end'", 
            "title": "Overview Exit points"
        }, 
        {
            "location": "/RouteScriptsOverviewExits/#list-of-exit-points-in-routes", 
            "text": "These examples show all of the available exit points for route-scripts  def start(routedict,*args,**kwargs): \n    # run before anything is done is route.\n    print routedict['idroute'],'start'\n\ndef preincommunication(routedict,*args,**kwargs): \n    # if there is a fromchannel: run before fromchannel communication.\n    print routedict['idroute'],'preincommunication'\n\ndef postincommunication(routedict,*args,**kwargs): \n    # if there is a fromchannel: run after fromchannel communication.\n    print routedict['idroute'],'postincommunication'\n\ndef pretranslation(routedict,*args,**kwargs): \n    # if translation is done in route: run before translation.\n    print routedict['idroute'],'pretranslation'\n\ndef posttranslation(routedict,*args,**kwargs): \n    # if translation is done in route: run after translation.\n    print routedict['idroute'],'posttranslation'\n\ndef premerge(routedict,*args,**kwargs): \n    # if there is a outchannel: run before merging.\n    print routedict['idroute'],'premerge'\n\ndef postmerge(routedict,*args,**kwargs): \n    # if there is a outchannel: run after merging.\n    print routedict['idroute'],'postmerge'\n\ndef preoutcommunication(routedict,*args,**kwargs): \n    # if there is a outchannel: run before outchannel communication.\n    print routedict['idroute'],'preoutcommunication'\n\ndef postoutcommunication(routedict,*args,**kwargs): \n    # if there is a outchannel: run after outchannel communication.\n    # eg. call an external program to process files just sent into ERP system\n    print routedict['idroute'],'postoutcommunication'\n\ndef end(routedict,*args,**kwargs): \n    # after everything is done in route\n    print routedict['idroute'],'end'", 
            "title": "List of Exit Points in Routes"
        }, 
        {
            "location": "/RouteScriptsExample/", 
            "text": "Preprocessing and Postprocessing examples\n\n\nSome recipes for preprocessing edi files.\n\nPlugin 'demo_preprocessing' at \nthe bots sourceforge\nsite\n demonstrates\npreprocessing.\n\n\nExample 1: Discard input files that are too small\n\n\nimport os\nimport bots.preprocess as preprocess\nfrom bots.botsconfig import *\n\ndef postincommunication(routedict,*args,**kwargs):\n    ''' function is called after the communication in the route.'''\n    preprocess.preprocess(routedict=routedict,function=discard_file)\n\ndef discard_file(ta_from,endstatus,*args,**kwargs):\n    ''' discard files that are to small (zero files)''' \n    ta_from.synall()\n    filesize = ta_from.filesize\n    if filesize \n 100:    #filesize in bytes\n        ta_from.update(statust=DONE)                       #statust=DONE: bots discards file, gives no errors.\n    else:\n        ta_to = ta_from.copyta(status=endstatus)           #make new transaction for bots database\n        ta_to.update(statust=OK,filename=ta_from.filename) #update outmessage transaction (same) filename\n\n\n\nExample 2: Extract data from PDF file (to csv)\n\n\n# Extract data from PDF file (to csv)\n# x_group: group text closer than this as one field (default 10)\n# y_group: group lines closer than this as one line (default 5)\n# password: if required\n\nimport bots.preprocess as preprocess\n\ndef postincommunication(routedict,*args,**kwargs):\n    preprocess.preprocess(routedict,preprocess.extractpdf,x_group=12,y_group=3,password='secret')\n\n\n\nExample 3: Manipulate records without BOTSID\n\n\nimport bots.preprocess as preprocess\nimport bots.botslib as botslib\nimport bots.botsglobal as botsglobal\nfrom bots.botsconfig import *\n\ndef postincommunication(routedict,*args,**kwargs):\n    preprocess.preprocess(routedict,custom_preprocess)\n\ndef custom_preprocess(ta_from,endstatus,*args,**kwargs):\n    try:\n        # copy ta for preprocessing\n        ta_to = ta_from.copyta(status=endstatus)\n\n        # open the files\n        infile = botslib.opendata(ta_from.filename,'r')\n        tofile = botslib.opendata(str(ta_to.idta),'wb')\n\n        # preprocessing: read infile, write tofile\n        # This file has headers and lines, but no field that can be used for BOTSID!\n        # Determine the line type from the data, and add HDR or LIN in first column\n        # Text heading lines and blank lines are omitted\n        for line in infile:\n            if '\\tAU' in line: \n                tofile.write('HDR\\t' + line)\n            elif ('\\tWAIT' in line or\n                  '\\tFULL' in line or\n                  '\\tEMPTY' in line):\n                tofile.write('LIN\\t' + line)\n\n        infile.close()\n        tofile.close()\n\n        ta_to.update(statust=OK,filename=str(ta_to.idta)) #update outmessage transaction with ta_info; \n    except:\n        txt=botslib.txtexc()\n        botsglobal.logger.error(u'Custom preprocess failed. Error:\\n%s',txt)\n        raise botslib.InMessageError(u'Custom preprocess failed. Error:\\n$error',error=txt)\n\n\n\nExample 4: Sort input file\n\n\nimport bots.preprocess as preprocess\nimport bots.botslib as botslib\nimport bots.botsglobal as botsglobal\nfrom bots.botsconfig import *\n\ndef postincommunication(routedict,*args,**kwargs):\n    preprocess.preprocess(routedict,sort_file)\n\ndef sort_file(ta_from,endstatus,*args,**kwargs):\n    try:\n        # copy ta for preprocessing\n        ta_to = ta_from.copyta(status=endstatus)\n\n        # open the files\n        infile = botslib.opendata(ta_from.filename,'r')\n        tofile = botslib.opendata(str(ta_to.idta),'wb')\n\n        # sort output\n        lines = infile.readlines()\n        lines.sort()\n        for line in lines:\n            tofile.write(line)\n\n        infile.close()\n        tofile.close()\n\n        ta_to.update(statust=OK,filename=str(ta_to.idta)) #update outmessage transaction with ta_info; \n    except:\n        txt=botslib.txtexc()\n        botsglobal.logger.error(u'Sort preprocess failed. Error:\\n%s',txt)\n        raise botslib.InMessageError(u'Sort preprocess failed. Error:\\n$error',error=txt)\n\n\n\nExample 5: Postprocessing\n\n\nPost processing works the same way as pre processing, except it is done\nbefore out communication.\n\n\nimport bots.preprocess as preprocess\nimport bots.botslib as botslib\nimport bots.botsglobal as botsglobal\nfrom bots.botsconfig import *\n\ndef preoutcommunication(routedict,*args,**kwargs):\n    preprocess.postprocess(routedict,split_lines)\n\ndef split_lines(ta_from,endstatus,,*args,**kwargs):\n    try:\n        # copy ta for postprocessing, open the files\n        ta_to = ta_from.copyta(status=endstatus)\n        infile = botslib.opendata(ta_from.filename,'r')\n        tofile = botslib.opendata(str(ta_to.idta),'wb')\n\n        # split every line at the first separator (space)\n        # output the two parts on separate lines\n        for line in infile:\n            part = line.partition(' ')\n            tofile.write(part[0] + '\\n' + part[2])\n\n        # close files and update outmessage transaction with ta_info\n        infile.close()\n        tofile.close()\n        ta_to.update(statust=OK,filename=str(ta_to.idta))\n\n    except:\n        txt=botslib.txtexc()\n        botsglobal.logger.error(_(u'split_lines postprocess failed. Error:\\n%s'),txt)\n        raise botslib.OutMessageError(_(u'split_lines postprocess failed. Error:\\n$error'),error=txt)\n\n\n\nExample 6: Preprocessing an encrypted file\n\n\nThis example uses gnupg to decrypt a file before processing it in Bots.\n\n\nimport bots.preprocess as preprocess\nimport bots.botslib as botslib\nimport gnupg\n\n# Preprocessing - Decrypt infile using GPG\n# Dependencies: python-gnupg-0.3.0\n#   botssys/gnugpghome directory, containing:\n#     gpg binary files (gpg.exe and iconv.dll)\n#     keys (pubring.gpg, secring.gpg, trustdb.gpg)\n#     passphrase.txt\n\ndef postincommunication(routedict,*args,**kwargs):\n    # preprocess to decrypt, then passthrough (no translation)\n    preprocess.preprocess(routedict,decrypt_GPG)\n    transform.addinfo(change={'status':MERGED},where={'status':FILEIN,'idroute':routedict['idroute']})\n\ndef decrypt_GPG(ta_from,endstatus,*args,**kwargs):\n\n    # copy ta for preprocessing\n    ta_to = ta_from.copyta(status=endstatus)\n\n    # gnupghome contains the gpg binary files, public/private keys, and passphrase\n    gnupghome = botslib.join(botsglobal.ini.get('directories','botssys'),'gnupghome')\n    passphrase = open(botslib.join(gnupghome,'passphrase.txt'),'r').read()\n    gpgbinary = botslib.join(gnupghome,'gpg.exe')\n\n    # Here is where we do the actual decryption\n    gpg = gnupg.GPG(gnupghome=gnupghome,gpgbinary=gpgbinary)\n    with botslib.opendata(ta_from.filename,'rb') as input:\n        status = gpg.decrypt_file(input, passphrase=passphrase,output=botslib.abspathdata(str(ta_to.idta)))\n\n    # log the results and finish\n    botsglobal.logger.debug(status.stderr)\n    if status.ok:\n        botsglobal.logger.info(status.status)\n        ta_to.update(statust=OK,filename=str(ta_to.idta))\n    else:\n        botsglobal.logger.error(status.status)\n        ta_to.update(statust=ERROR,filename=str(ta_to.idta))\n        raise PreprocessError(status.status + '\\n' + status.stderr)\n\nclass PreprocessError(botslib.BotsError):\n    pass\n\n\n\nExample 7: Preprocessing to ignore/remove XML namespaces\n\n\nThis example changes the default namespace to a namespace prefix (so it\nis ignored). It also removes a namespace prefix (ENV). You may need to\nuse either or both of these methods, depending on the content of your\nXML file.\n\n\n#-------------------------------------------------------------------------------\n# preprocess - Remove XML namespaces to simplify grammar and mapping\n# Generally Bots does not need to use the xmlns for incoming files\n# This example handles both default and prefix namespaces\n\ndef postincommunication(routedict):\n\n    def _preprocess(ta_from,endstatus,**argv):\n\n        # copy ta for preprocessing\n        ta_to = ta_from.copyta(status=endstatus)\n\n        # open the files\n        infile = botslib.opendata(ta_from.filename,'r')\n        tofile = botslib.opendata(str(ta_to.idta),'wb')\n\n        for line in infile:\n            tofile.write(line.replace('xmlns=','xmlns:NOTUSED=').replace('\nENV:','\n').replace('\n/ENV:','\n/'))\n\n        # close files and update outmessage transaction\n        infile.close()\n        tofile.close()\n        ta_to.update(statust=OK,filename=str(ta_to.idta))\n\n    preprocess.preprocess(routedict,_preprocess)", 
            "title": "Preprocessing recipes"
        }, 
        {
            "location": "/RouteScriptsExample/#preprocessing-and-postprocessing-examples", 
            "text": "Some recipes for preprocessing edi files. \nPlugin 'demo_preprocessing' at  the bots sourceforge\nsite  demonstrates\npreprocessing.", 
            "title": "Preprocessing and Postprocessing examples"
        }, 
        {
            "location": "/RouteScriptsExample/#example-1-discard-input-files-that-are-too-small", 
            "text": "import os\nimport bots.preprocess as preprocess\nfrom bots.botsconfig import *\n\ndef postincommunication(routedict,*args,**kwargs):\n    ''' function is called after the communication in the route.'''\n    preprocess.preprocess(routedict=routedict,function=discard_file)\n\ndef discard_file(ta_from,endstatus,*args,**kwargs):\n    ''' discard files that are to small (zero files)''' \n    ta_from.synall()\n    filesize = ta_from.filesize\n    if filesize   100:    #filesize in bytes\n        ta_from.update(statust=DONE)                       #statust=DONE: bots discards file, gives no errors.\n    else:\n        ta_to = ta_from.copyta(status=endstatus)           #make new transaction for bots database\n        ta_to.update(statust=OK,filename=ta_from.filename) #update outmessage transaction (same) filename", 
            "title": "Example 1: Discard input files that are too small"
        }, 
        {
            "location": "/RouteScriptsExample/#example-2-extract-data-from-pdf-file-to-csv", 
            "text": "# Extract data from PDF file (to csv)\n# x_group: group text closer than this as one field (default 10)\n# y_group: group lines closer than this as one line (default 5)\n# password: if required\n\nimport bots.preprocess as preprocess\n\ndef postincommunication(routedict,*args,**kwargs):\n    preprocess.preprocess(routedict,preprocess.extractpdf,x_group=12,y_group=3,password='secret')", 
            "title": "Example 2: Extract data from PDF file (to csv)"
        }, 
        {
            "location": "/RouteScriptsExample/#example-3-manipulate-records-without-botsid", 
            "text": "import bots.preprocess as preprocess\nimport bots.botslib as botslib\nimport bots.botsglobal as botsglobal\nfrom bots.botsconfig import *\n\ndef postincommunication(routedict,*args,**kwargs):\n    preprocess.preprocess(routedict,custom_preprocess)\n\ndef custom_preprocess(ta_from,endstatus,*args,**kwargs):\n    try:\n        # copy ta for preprocessing\n        ta_to = ta_from.copyta(status=endstatus)\n\n        # open the files\n        infile = botslib.opendata(ta_from.filename,'r')\n        tofile = botslib.opendata(str(ta_to.idta),'wb')\n\n        # preprocessing: read infile, write tofile\n        # This file has headers and lines, but no field that can be used for BOTSID!\n        # Determine the line type from the data, and add HDR or LIN in first column\n        # Text heading lines and blank lines are omitted\n        for line in infile:\n            if '\\tAU' in line: \n                tofile.write('HDR\\t' + line)\n            elif ('\\tWAIT' in line or\n                  '\\tFULL' in line or\n                  '\\tEMPTY' in line):\n                tofile.write('LIN\\t' + line)\n\n        infile.close()\n        tofile.close()\n\n        ta_to.update(statust=OK,filename=str(ta_to.idta)) #update outmessage transaction with ta_info; \n    except:\n        txt=botslib.txtexc()\n        botsglobal.logger.error(u'Custom preprocess failed. Error:\\n%s',txt)\n        raise botslib.InMessageError(u'Custom preprocess failed. Error:\\n$error',error=txt)", 
            "title": "Example 3: Manipulate records without BOTSID"
        }, 
        {
            "location": "/RouteScriptsExample/#example-4-sort-input-file", 
            "text": "import bots.preprocess as preprocess\nimport bots.botslib as botslib\nimport bots.botsglobal as botsglobal\nfrom bots.botsconfig import *\n\ndef postincommunication(routedict,*args,**kwargs):\n    preprocess.preprocess(routedict,sort_file)\n\ndef sort_file(ta_from,endstatus,*args,**kwargs):\n    try:\n        # copy ta for preprocessing\n        ta_to = ta_from.copyta(status=endstatus)\n\n        # open the files\n        infile = botslib.opendata(ta_from.filename,'r')\n        tofile = botslib.opendata(str(ta_to.idta),'wb')\n\n        # sort output\n        lines = infile.readlines()\n        lines.sort()\n        for line in lines:\n            tofile.write(line)\n\n        infile.close()\n        tofile.close()\n\n        ta_to.update(statust=OK,filename=str(ta_to.idta)) #update outmessage transaction with ta_info; \n    except:\n        txt=botslib.txtexc()\n        botsglobal.logger.error(u'Sort preprocess failed. Error:\\n%s',txt)\n        raise botslib.InMessageError(u'Sort preprocess failed. Error:\\n$error',error=txt)", 
            "title": "Example 4: Sort input file"
        }, 
        {
            "location": "/RouteScriptsExample/#example-5-postprocessing", 
            "text": "Post processing works the same way as pre processing, except it is done\nbefore out communication.  import bots.preprocess as preprocess\nimport bots.botslib as botslib\nimport bots.botsglobal as botsglobal\nfrom bots.botsconfig import *\n\ndef preoutcommunication(routedict,*args,**kwargs):\n    preprocess.postprocess(routedict,split_lines)\n\ndef split_lines(ta_from,endstatus,,*args,**kwargs):\n    try:\n        # copy ta for postprocessing, open the files\n        ta_to = ta_from.copyta(status=endstatus)\n        infile = botslib.opendata(ta_from.filename,'r')\n        tofile = botslib.opendata(str(ta_to.idta),'wb')\n\n        # split every line at the first separator (space)\n        # output the two parts on separate lines\n        for line in infile:\n            part = line.partition(' ')\n            tofile.write(part[0] + '\\n' + part[2])\n\n        # close files and update outmessage transaction with ta_info\n        infile.close()\n        tofile.close()\n        ta_to.update(statust=OK,filename=str(ta_to.idta))\n\n    except:\n        txt=botslib.txtexc()\n        botsglobal.logger.error(_(u'split_lines postprocess failed. Error:\\n%s'),txt)\n        raise botslib.OutMessageError(_(u'split_lines postprocess failed. Error:\\n$error'),error=txt)", 
            "title": "Example 5: Postprocessing"
        }, 
        {
            "location": "/RouteScriptsExample/#example-6-preprocessing-an-encrypted-file", 
            "text": "This example uses gnupg to decrypt a file before processing it in Bots.  import bots.preprocess as preprocess\nimport bots.botslib as botslib\nimport gnupg\n\n# Preprocessing - Decrypt infile using GPG\n# Dependencies: python-gnupg-0.3.0\n#   botssys/gnugpghome directory, containing:\n#     gpg binary files (gpg.exe and iconv.dll)\n#     keys (pubring.gpg, secring.gpg, trustdb.gpg)\n#     passphrase.txt\n\ndef postincommunication(routedict,*args,**kwargs):\n    # preprocess to decrypt, then passthrough (no translation)\n    preprocess.preprocess(routedict,decrypt_GPG)\n    transform.addinfo(change={'status':MERGED},where={'status':FILEIN,'idroute':routedict['idroute']})\n\ndef decrypt_GPG(ta_from,endstatus,*args,**kwargs):\n\n    # copy ta for preprocessing\n    ta_to = ta_from.copyta(status=endstatus)\n\n    # gnupghome contains the gpg binary files, public/private keys, and passphrase\n    gnupghome = botslib.join(botsglobal.ini.get('directories','botssys'),'gnupghome')\n    passphrase = open(botslib.join(gnupghome,'passphrase.txt'),'r').read()\n    gpgbinary = botslib.join(gnupghome,'gpg.exe')\n\n    # Here is where we do the actual decryption\n    gpg = gnupg.GPG(gnupghome=gnupghome,gpgbinary=gpgbinary)\n    with botslib.opendata(ta_from.filename,'rb') as input:\n        status = gpg.decrypt_file(input, passphrase=passphrase,output=botslib.abspathdata(str(ta_to.idta)))\n\n    # log the results and finish\n    botsglobal.logger.debug(status.stderr)\n    if status.ok:\n        botsglobal.logger.info(status.status)\n        ta_to.update(statust=OK,filename=str(ta_to.idta))\n    else:\n        botsglobal.logger.error(status.status)\n        ta_to.update(statust=ERROR,filename=str(ta_to.idta))\n        raise PreprocessError(status.status + '\\n' + status.stderr)\n\nclass PreprocessError(botslib.BotsError):\n    pass", 
            "title": "Example 6: Preprocessing an encrypted file"
        }, 
        {
            "location": "/RouteScriptsExample/#example-7-preprocessing-to-ignoreremove-xml-namespaces", 
            "text": "This example changes the default namespace to a namespace prefix (so it\nis ignored). It also removes a namespace prefix (ENV). You may need to\nuse either or both of these methods, depending on the content of your\nXML file.  #-------------------------------------------------------------------------------\n# preprocess - Remove XML namespaces to simplify grammar and mapping\n# Generally Bots does not need to use the xmlns for incoming files\n# This example handles both default and prefix namespaces\n\ndef postincommunication(routedict):\n\n    def _preprocess(ta_from,endstatus,**argv):\n\n        # copy ta for preprocessing\n        ta_to = ta_from.copyta(status=endstatus)\n\n        # open the files\n        infile = botslib.opendata(ta_from.filename,'r')\n        tofile = botslib.opendata(str(ta_to.idta),'wb')\n\n        for line in infile:\n            tofile.write(line.replace('xmlns=','xmlns:NOTUSED=').replace(' ENV:',' ').replace(' /ENV:',' /'))\n\n        # close files and update outmessage transaction\n        infile.close()\n        tofile.close()\n        ta_to.update(statust=OK,filename=str(ta_to.idta))\n\n    preprocess.preprocess(routedict,_preprocess)", 
            "title": "Example 7: Preprocessing to ignore/remove XML namespaces"
        }, 
        {
            "location": "/RouteScriptsExampleWholeRoute/", 
            "text": "Example route script that takes over whole route\n\n\n# imports needed for some functions below\nfrom bots.botsconfig import *\nimport bots.transform as transform\nimport bots.botsglobal as botsglobal\nimport bots.botslib as botslib\nimport bots.cleanup as cleanup\nimport bots.pluglib as pluglib\nimport os\nimport time\n\ndef main(routedict,*args,**kwargs):\n    # if main is present, it takes over the whole route (nothing is done in route except this function).\n    # for example, create a daily route that does a backup and cleanup\n\n    # Prevent this script from accidentally running more than once per day\n    if transform.persist_lookup(routedict['idroute'],'run_date') != time.strftime('%Y%m%d'):\n        transform.persist_add_update(routedict['idroute'],'run_date',time.strftime('%Y%m%d'))\n\n        # backup directory and subdirectory - one per weekday gives a 7 day rolling backup\n        backup_dir = botslib.join(botsglobal.ini.get('directories','botssys'), 'backup')\n        makedir(backup_dir) \n        backup_dir = botslib.join(backup_dir, time.strftime('%w-%a'))\n        makedir(backup_dir)\n\n        # Create a bots backup (as a plugin)\n        botsglobal.logger.info('Create a bots backup')\n        pluglib.plugoutcore({\n             'databaseconfiguration': True,\n             'umlists': True,\n             'fileconfiguration': True,\n             'infiles': False,\n             'charset': False,\n             'databasetransactions': False,\n             'data': False,\n             'logfiles': True,\n             'config': True,\n             'database': True,\n             'filename': botslib.join(backup_dir,'bots-backup.zip')})\n\n        # Do cleanup, if scheduled daily\n        # In bots.ini set whencleanup=daily (other values are always or never)\n        if botsglobal.ini.get('settings','whencleanup','always') == 'daily':\n            botsglobal.logger.info(u'Cleanup of database and files')\n            cleanup.cleanup()\n\ndef makedir(dir):\n    try: os.makedirs(dir) \n    except: pass", 
            "title": "Take over whole route"
        }, 
        {
            "location": "/RouteScriptsExampleWholeRoute/#example-route-script-that-takes-over-whole-route", 
            "text": "# imports needed for some functions below\nfrom bots.botsconfig import *\nimport bots.transform as transform\nimport bots.botsglobal as botsglobal\nimport bots.botslib as botslib\nimport bots.cleanup as cleanup\nimport bots.pluglib as pluglib\nimport os\nimport time\n\ndef main(routedict,*args,**kwargs):\n    # if main is present, it takes over the whole route (nothing is done in route except this function).\n    # for example, create a daily route that does a backup and cleanup\n\n    # Prevent this script from accidentally running more than once per day\n    if transform.persist_lookup(routedict['idroute'],'run_date') != time.strftime('%Y%m%d'):\n        transform.persist_add_update(routedict['idroute'],'run_date',time.strftime('%Y%m%d'))\n\n        # backup directory and subdirectory - one per weekday gives a 7 day rolling backup\n        backup_dir = botslib.join(botsglobal.ini.get('directories','botssys'), 'backup')\n        makedir(backup_dir) \n        backup_dir = botslib.join(backup_dir, time.strftime('%w-%a'))\n        makedir(backup_dir)\n\n        # Create a bots backup (as a plugin)\n        botsglobal.logger.info('Create a bots backup')\n        pluglib.plugoutcore({\n             'databaseconfiguration': True,\n             'umlists': True,\n             'fileconfiguration': True,\n             'infiles': False,\n             'charset': False,\n             'databasetransactions': False,\n             'data': False,\n             'logfiles': True,\n             'config': True,\n             'database': True,\n             'filename': botslib.join(backup_dir,'bots-backup.zip')})\n\n        # Do cleanup, if scheduled daily\n        # In bots.ini set whencleanup=daily (other values are always or never)\n        if botsglobal.ini.get('settings','whencleanup','always') == 'daily':\n            botsglobal.logger.info(u'Cleanup of database and files')\n            cleanup.cleanup()\n\ndef makedir(dir):\n    try: os.makedirs(dir) \n    except: pass", 
            "title": "Example route script that takes over whole route"
        }, 
        {
            "location": "/ChannelsIntroduction/", 
            "text": "Channels Introduction\n\n\nChannels take care of communication: file I/O, ftp, email, etc.\nA channel is either incoming or outgoing.\n\nExamples of channels:\n\n\n\n\nreceive email from a pop3-mailbox\n\n\nsend to a ftp-server\n\n\npick up in-house invoices from a directory on your computer\n\n\nput orders in a file queue for import in your application.\n\n\n\n\n\n\nExample of communication channels for bots:\n \n\n\n\n\nNotes on naming conventions:\n\n\n\n\nincoming = incoming to bots\n\n\noutgoing = going out bots\n\n\ninbound = my organization receives\n\n\noutbound = going out of my organization\n\n\n\n\nNote: Bots does client communicates (no server). If you need a\ncommunication server (eg for ftp, as2), use a separate server.", 
            "title": "Introduction"
        }, 
        {
            "location": "/ChannelsIntroduction/#channels-introduction", 
            "text": "Channels take care of communication: file I/O, ftp, email, etc.\nA channel is either incoming or outgoing. \nExamples of channels:   receive email from a pop3-mailbox  send to a ftp-server  pick up in-house invoices from a directory on your computer  put orders in a file queue for import in your application.    Example of communication channels for bots:\n    Notes on naming conventions:   incoming = incoming to bots  outgoing = going out bots  inbound = my organization receives  outbound = going out of my organization   Note: Bots does client communicates (no server). If you need a\ncommunication server (eg for ftp, as2), use a separate server.", 
            "title": "Channels Introduction"
        }, 
        {
            "location": "/Filenames/", 
            "text": "Filenames\n\n\nIn a perfect world, filenames are unimportant in the EDI\nflow. All that is required is that they are unique so no file is ever\noverwritten. Bots takes care of this automatically by default when\ncreating files, by using counters to generate unique numeric filenames.\nBut sometimes in the \"real world\" implementation of system interfaces,\nyou want or need to have specific filenames: \n\n\n\n\nbecause your trading partner requires it \n\n\nlimitations of other systems regarding filenames \n\n\nto provide easy identification of files \n\n\nnicer for end users (eg. when emailing attachments)\n\n\n\n\nInput filenames\n\n\nBots uses \nfilename pattern\nmatching\n to\nselect input files. This allows you to select all files, or only\nspecific files, from the channel path. Some points to consider:\n\n\n\n\nMany types of channel (eg. ftp) are case sensitive. \n*\n.TXT is not\n    the same as \n*\n.txt\n\n\nFiles with and without extensions may be treated differently; \n*\n is\n    not the same as \n*\n.\n*\n\n\n\n\nfor \"safety\" you should use a partially specified name if possible.\n    This prevents accidentally picking up files that should not be\n    there. eg. use ORDER\n*\n.TXT rather than \n*\n.\n*\n For an in-channel\n    with type=file a wild-card can be used in the path.\n     If directory structure is like this:\n\n\n\n\nbotssys/infile/partner1\n\n\nbotssys/infile/partner2\n\n\nbotssys/infile/partner3\n\n\n\n\nuse path botssys/infile/\n*\n to read the files in all these directories.\n\n\n\n\n\n\nOutput filenames\n\n\n\n\nA unique name can be generated with an asterisk; the asterisk is\n    replaced by an unique number. Eg: order\n_*\n.edi -> order1.edi,\n    order2.edi, order3.edi etc\n\n\n(bots > = 3.0) Any \nta\n value can be used; eg. `{botskey},\n    {alt}, {editype}, {messagetype}, {frompartner}, {topartner},\n    {fromchannel}, {tochannel}, {idroute}.\n\n\n(bots > = 3.0) Date/time using \n{datetime}\n with any valid \ndate or\n    time format\n\n    specification; eg. \n{datetime:%Y%m%d}, {datetime:%H%M%S}\n etc.\n\n\n(bots > = 3.0) Incoming filename can be used (name and extension,\n    or either part separately); eg.\n    \n{infile}, {infile:name}, {infile:ext}\n\n\n\n\nWarning:\n Do not change out.ta_info['filename'] in your scripts.\n    Although it may appear to work, it messes up Bots internal file\n    storage.\n\n\n\n\n\n\nSome examples are shown in the table below.\n\n\n\n\n\n\n\n\n\n\n\n\nChannel filename\n\n\nDescription\n\n\nExample filename generated\n\n\n\n\n\n\n\n\n\n\n*\n or blank\n\n\ncreate a unique name, no extension\n\n\n39724\n\n\n\n\n\n\n*.txt\n\n\ncreate a unique name with .txt extension\n\n\n39724.txt\n\n\n\n\n\n\n{botskey}.txt\n\n\nuse incoming \nbotskey\n value (eg. order number) with .txt extension. Note: {botskey} can only be used if merge is False for the messagetype\n\n\nBA7358-0.txt\n\n\n\n\n\n\n{infile}\n\n\npassthrough incoming filename \n extension to output\n\n\nOrder001.edi\n\n\n\n\n\n\n{infile:name}.txt\n\n\npassthrough incoming filename but change extension to .txt\n\n\nOrder001.txt\n\n\n\n\n\n\n{editype}_{messagetype}_{datetime:%Y%m%d}_*.{infile:ext}\n\n\nuse editype, messagetype, date and unique number with extension from the incoming file\n\n\nedifact_ORDERSD93AUN_20120926_39724.edi\n\n\n\n\n\n\n{frompartner}/{editype}/{infile}\n\n\nYou can also use subdirectories in the filename, but they must already exist. These will be appended to the path.\n\n\nKMART/edifact/Order001.edi\n\n\n\n\n\n\n{frompartner}/INPUT/ORDER_{botskey}.csv\n\n\nFixed values can also be included as part of the directory structure or filename\n\n\nKMART/INPUT/ORDER_BA7358-0.csv\n\n\n\n\n\n\n{overwrite}daily_report.txt\n\n\nForce overwriting of a file if it exists. \nUse this with caution; make sure it is really what you want!\n May be required on some sftp servers that do not support append mode.\n\n\ndaily_report.txt\n\n\n\n\n\n\n{infile[4]}{infile[5]}{infile[6]}{infile[7]}.xml\n\n\nThis functionality uses the Python \nFormat String Syntax\n which does not have support for \"slicing\", but you can use this workaround to pick a range of single characters. \nBeware: this does not check for wrong string positions.\n\n\ninfile: \nINV_7389.txt\n generates: \n7389.xml\n\n\n\n\n\n\n\n\nUser scripting for output filenames\n\n\nBots has the capability to set output filenames with a\n\ncommunicationscript\n; however this requires a new\nscript for each channel and is somewhat complex. Prior to version 3.0\nthis was the only method available. It can still be used for difficult\nrequirements (but let us know about your needs through the mailing list,\nwe may be able to integrate it).", 
            "title": "Filenames"
        }, 
        {
            "location": "/Filenames/#filenames", 
            "text": "In a perfect world, filenames are unimportant in the EDI\nflow. All that is required is that they are unique so no file is ever\noverwritten. Bots takes care of this automatically by default when\ncreating files, by using counters to generate unique numeric filenames.\nBut sometimes in the \"real world\" implementation of system interfaces,\nyou want or need to have specific filenames:    because your trading partner requires it   limitations of other systems regarding filenames   to provide easy identification of files   nicer for end users (eg. when emailing attachments)", 
            "title": "Filenames"
        }, 
        {
            "location": "/Filenames/#input-filenames", 
            "text": "Bots uses  filename pattern\nmatching  to\nselect input files. This allows you to select all files, or only\nspecific files, from the channel path. Some points to consider:   Many types of channel (eg. ftp) are case sensitive.  * .TXT is not\n    the same as  * .txt  Files with and without extensions may be treated differently;  *  is\n    not the same as  * . *   for \"safety\" you should use a partially specified name if possible.\n    This prevents accidentally picking up files that should not be\n    there. eg. use ORDER * .TXT rather than  * . *  For an in-channel\n    with type=file a wild-card can be used in the path.\n     If directory structure is like this:   botssys/infile/partner1  botssys/infile/partner2  botssys/infile/partner3   use path botssys/infile/ *  to read the files in all these directories.", 
            "title": "Input filenames"
        }, 
        {
            "location": "/Filenames/#output-filenames", 
            "text": "A unique name can be generated with an asterisk; the asterisk is\n    replaced by an unique number. Eg: order _* .edi -> order1.edi,\n    order2.edi, order3.edi etc  (bots > = 3.0) Any  ta  value can be used; eg. `{botskey},\n    {alt}, {editype}, {messagetype}, {frompartner}, {topartner},\n    {fromchannel}, {tochannel}, {idroute}.  (bots > = 3.0) Date/time using  {datetime}  with any valid  date or\n    time format \n    specification; eg.  {datetime:%Y%m%d}, {datetime:%H%M%S}  etc.  (bots > = 3.0) Incoming filename can be used (name and extension,\n    or either part separately); eg.\n     {infile}, {infile:name}, {infile:ext}   Warning:  Do not change out.ta_info['filename'] in your scripts.\n    Although it may appear to work, it messes up Bots internal file\n    storage.    Some examples are shown in the table below.       Channel filename  Description  Example filename generated      *  or blank  create a unique name, no extension  39724    *.txt  create a unique name with .txt extension  39724.txt    {botskey}.txt  use incoming  botskey  value (eg. order number) with .txt extension. Note: {botskey} can only be used if merge is False for the messagetype  BA7358-0.txt    {infile}  passthrough incoming filename   extension to output  Order001.edi    {infile:name}.txt  passthrough incoming filename but change extension to .txt  Order001.txt    {editype}_{messagetype}_{datetime:%Y%m%d}_*.{infile:ext}  use editype, messagetype, date and unique number with extension from the incoming file  edifact_ORDERSD93AUN_20120926_39724.edi    {frompartner}/{editype}/{infile}  You can also use subdirectories in the filename, but they must already exist. These will be appended to the path.  KMART/edifact/Order001.edi    {frompartner}/INPUT/ORDER_{botskey}.csv  Fixed values can also be included as part of the directory structure or filename  KMART/INPUT/ORDER_BA7358-0.csv    {overwrite}daily_report.txt  Force overwriting of a file if it exists.  Use this with caution; make sure it is really what you want!  May be required on some sftp servers that do not support append mode.  daily_report.txt    {infile[4]}{infile[5]}{infile[6]}{infile[7]}.xml  This functionality uses the Python  Format String Syntax  which does not have support for \"slicing\", but you can use this workaround to pick a range of single characters.  Beware: this does not check for wrong string positions.  infile:  INV_7389.txt  generates:  7389.xml", 
            "title": "Output filenames"
        }, 
        {
            "location": "/Filenames/#user-scripting-for-output-filenames", 
            "text": "Bots has the capability to set output filenames with a communicationscript ; however this requires a new\nscript for each channel and is somewhat complex. Prior to version 3.0\nthis was the only method available. It can still be used for difficult\nrequirements (but let us know about your needs through the mailing list,\nwe may be able to integrate it).", 
            "title": "User scripting for output filenames"
        }, 
        {
            "location": "/ChannelsDatabase/", 
            "text": "Direct database communication\n\n\nBots can read and write from a database.\n\nSee plugin demo_databasecommunication on the \nbots sourceforge\nsite\n.\n\n\nDiscussion: direct database communication or not\n\n\nIn most edi setups there is no direct database communication, but an\nintermediate file is used:\n\n\n\n\ninbound edi: bots translates edi files to your import format\n\n\noutbound edi: the export files of your application are translated by\n    bots to the wished edi format.\n\n\n\n\nReasons to set up edi using an intermediate file:\n\n\n\n\nit is better to do the import/export with the tools you are familiar\n    with, and not to use a new tool (knowledge, maintenance).\n\n\ndifferent edi partners do use different standards (dialects of the\n    standards, different interpretations, different countries, different\n    sectors, edi standards are not that good). Try to use one\n    import/export format; let the edi software handle the differences\n    between partners.\n\n\n\n\nReasons to use direct database format:\n\n\n\n\nimport/exports are very simple/straightforward\n\n\nyour system does not (yet) have good functionality for handling the\n    incoming edi data. Example: receive sales reports, but what to do\n    with this? This data is quite simple, just import this in one (new)\n    table. The users can query this table for information.\n\n\n\n\nInbound edi (write to database)\n\n\n\n\nTranslation rule should be to edi-type 'db'\n\n\nIn the mapping script: out.root should be a python object (dict,\n    list, class, etc); this object is passed to the actual database\n    connector.\n\n\nOutgoing channel should be type 'db'.\n\n\nUse a communication script for the outgoing channel\n    (usersys/communicationscripts/channelname.py). This communication\n    script does the actual communication with the database.\n\n\nIn the communication script should be 3 functions:\n\n\nconnect - build database connection.\n\n\nout-communicate - put the data in the database using the data as\n    received from the mapping script.\n\n\ndisconnect - close database connection.\n\n\n\n\n\n\nUse the database connector as needed, eg: python provides by default\n    the sqlite3 connector, mysql-Python as MySQL database connector,\n    psycopg2 as PostgreSQL database connector, etc\n\n\n\n\nOutbound edi (read from database)\n\n\n\n\n\n\nIncoming channel should be type 'db'.\n\n\n\n\n\n\nUse a communication script for the incoming channel\n    (usersys/communicationscripts/channelname.py). This communication script\n    does the actual communication with the database.\n\n\n\n\n\n\nIn the communication script should be 3 functions:\n\n\n\n\nconnect - build database connection.\n\n\nincommunicate - fetch the data from the database, send it to the\n    mapping script.\n\n\ndisconnect - close database connection.\n\n\n\n\n\n\n\n\nUse the database connector as needed, eg: python provides by default the\n    sqlite3 connector, mysql-Python as MySQL database connector, psycopg2 as\n    PostgreSQL database connector, etc\n\n\n\n\n\n\nTranslation should be from edi-type 'db'\n\n\n\n\n\n\nIn the mapping script: inn.root is the data as received from the\n    database connector.\n\n\n\n\n\n\nNote: the data passed from the communication-script can be any python\n    object (eg dict, list). If a list (or tuple) is return from the\n    communication script, bots passes each member of the list as a separate\n    edi-message to the mapping script.", 
            "title": "Database communication"
        }, 
        {
            "location": "/ChannelsDatabase/#direct-database-communication", 
            "text": "Bots can read and write from a database. \nSee plugin demo_databasecommunication on the  bots sourceforge\nsite .", 
            "title": "Direct database communication"
        }, 
        {
            "location": "/ChannelsDatabase/#discussion-direct-database-communication-or-not", 
            "text": "In most edi setups there is no direct database communication, but an\nintermediate file is used:   inbound edi: bots translates edi files to your import format  outbound edi: the export files of your application are translated by\n    bots to the wished edi format.   Reasons to set up edi using an intermediate file:   it is better to do the import/export with the tools you are familiar\n    with, and not to use a new tool (knowledge, maintenance).  different edi partners do use different standards (dialects of the\n    standards, different interpretations, different countries, different\n    sectors, edi standards are not that good). Try to use one\n    import/export format; let the edi software handle the differences\n    between partners.   Reasons to use direct database format:   import/exports are very simple/straightforward  your system does not (yet) have good functionality for handling the\n    incoming edi data. Example: receive sales reports, but what to do\n    with this? This data is quite simple, just import this in one (new)\n    table. The users can query this table for information.", 
            "title": "Discussion: direct database communication or not"
        }, 
        {
            "location": "/ChannelsDatabase/#inbound-edi-write-to-database", 
            "text": "Translation rule should be to edi-type 'db'  In the mapping script: out.root should be a python object (dict,\n    list, class, etc); this object is passed to the actual database\n    connector.  Outgoing channel should be type 'db'.  Use a communication script for the outgoing channel\n    (usersys/communicationscripts/channelname.py). This communication\n    script does the actual communication with the database.  In the communication script should be 3 functions:  connect - build database connection.  out-communicate - put the data in the database using the data as\n    received from the mapping script.  disconnect - close database connection.    Use the database connector as needed, eg: python provides by default\n    the sqlite3 connector, mysql-Python as MySQL database connector,\n    psycopg2 as PostgreSQL database connector, etc", 
            "title": "Inbound edi (write to database)"
        }, 
        {
            "location": "/ChannelsDatabase/#outbound-edi-read-from-database", 
            "text": "Incoming channel should be type 'db'.    Use a communication script for the incoming channel\n    (usersys/communicationscripts/channelname.py). This communication script\n    does the actual communication with the database.    In the communication script should be 3 functions:   connect - build database connection.  incommunicate - fetch the data from the database, send it to the\n    mapping script.  disconnect - close database connection.     Use the database connector as needed, eg: python provides by default the\n    sqlite3 connector, mysql-Python as MySQL database connector, psycopg2 as\n    PostgreSQL database connector, etc    Translation should be from edi-type 'db'    In the mapping script: inn.root is the data as received from the\n    database connector.    Note: the data passed from the communication-script can be any python\n    object (eg dict, list). If a list (or tuple) is return from the\n    communication script, bots passes each member of the list as a separate\n    edi-message to the mapping script.", 
            "title": "Outbound edi (read from database)"
        }, 
        {
            "location": "/ChannelsScripting/", 
            "text": "Channel scripting (communicationscripts)\n\n\nWhen the standard communication of bots does not fit your needs, use\ncommunicationscripts.\n\nInstruction to make a channel script:\n\n\n\n\nthere must be channel in bots-monitor (or make a new one)\\\n\n\nmake a communicationscript with the \nsame name\n as the channelID\\\n\n\nplace the communicationscript in\n    \nbots/usersys/communicationscripts/channelid.py\n\n\n\n\nUse cases:\n\n\n\n\ncommunication method not provided by bots\n\n\nexisting communication needs customization\n\n\ncall external program to write edi message to your ERP system.\n\n\nadditional requirements: Eg. use partner name or order number in\n    output file name.\n\n\ncontrol archive file naming\n\n\n\n\nThere are 3 types of communication scripts:\n\n\n\n\n\n\nsmall user exits: at certain places in normal communication a user\n    script is called. Examples of \n    \nsmall user exits\n\n\n\n\n\n\nsubclass: take-over of (parts of) communication script: user script\n    subclasses existing communication type.\\\n\n\n\n\n\n\ncommunication type 'communicationscript'. Bots tries to do the\n    bots-handling of files, you provide the communication details. Examples\n    of \ncommunication type\n    'communicationscript'", 
            "title": "Introduction"
        }, 
        {
            "location": "/ChannelsScripting/#channel-scripting-communicationscripts", 
            "text": "When the standard communication of bots does not fit your needs, use\ncommunicationscripts. \nInstruction to make a channel script:   there must be channel in bots-monitor (or make a new one)\\  make a communicationscript with the  same name  as the channelID\\  place the communicationscript in\n     bots/usersys/communicationscripts/channelid.py   Use cases:   communication method not provided by bots  existing communication needs customization  call external program to write edi message to your ERP system.  additional requirements: Eg. use partner name or order number in\n    output file name.  control archive file naming   There are 3 types of communication scripts:    small user exits: at certain places in normal communication a user\n    script is called. Examples of \n     small user exits    subclass: take-over of (parts of) communication script: user script\n    subclasses existing communication type.\\    communication type 'communicationscript'. Bots tries to do the\n    bots-handling of files, you provide the communication details. Examples\n    of  communication type\n    'communicationscript'", 
            "title": "Channel scripting (communicationscripts)"
        }, 
        {
            "location": "/CommunicationScriptsExample/", 
            "text": "Examples for small user exit\n\n\nFilter email attachments\n\n\nSome edi-partners send signatures etc in their email. Script does a\nsimple check if incoming attachment starts with 'UNB'. (Note: Bots\ntreats any text in the email body as another \"attachment\")\n\n\ndef accept_incoming_attachment(channeldict,ta,charset,content,contenttype,*args,**kwargs):\n    if 'UNB' in content[0:50]:\n        return True   #attachments is OK\n    else:\n        return False  #skip this attachment\n\n\n\nSet email subject\n\n\nSome edi-partners send signatures etc in their email.\\\n By default bots uses a number for emails.\\\n Sometimes you want a more meaningfull subject.\\\n\n\ndef subject(channeldict,ta,subjectstring,content,*args,**kwargs):\n    ta.synall()        #needed to get access to attributes of object ta (eg ta.frompartner)\n    return 'EDI messages from ' + ta.frompartner + '_' + subjectstring\n\n\n\nName archive file same as input file\n\n\nNot needed for bots 3.\n; do this via setting in bots.ini\n\n\n\nimport os\nimport bots.botslib as botslib\n\ndef archivename(channeldict,idta,filename,*args,**kwargs):\n     taparent=botslib.OldTransaction(idta=idta)\n     ta_list = botslib.trace_origin(ta=taparent,where={'status':EXTERNIN})\n     archivename = os.path.basename(ta_list[0].filename)\n     return archivename\n\n\n\nSet the archive path\n\n\nPath root is set in channel.\n\nAdd sub-dir per date, then sub-dir per channel under it.\n\n\nimport time\nimport bots.botslib as botslib\n\ndef archivepath(channeldict,*args,**kwargs):\n    archivepath = botslib.join(channeldict['archivepath'],time.strftime('%Y%m%d'),channeldict['idchannel'])\n    return archivepath\n\n\n\nPartners in the output file name\n\n\nNot needed for bots 3.\n; do this via file name in GUI\n\n\ndef filename(channeldict,filename,ta,*args,**kwargs):\n    ta.synall()        #needed to get access to attributes of object ta (eg ta.frompartner)\n    return ta.frompartner + '_' + ta.topartner + '_' + filename\n\n\n\nName the output file from botskey\n\n\nbotskey can be set in grammar or mapping, eg. from customer's order\nnumber.\n\nIf no botskey is found, the default file naming method will be used.\n\nSyntax must contain 'merge':False.\n\nNot needed for bots 3.\n; do this via file name in GUI.\n\n\ndef filename(channeldict,filename,ta,*args,**kwargs):\n    ta.synall()\n    if ta.botskey:\n        return filename + ta.botskey\n    else:\n        return filename\n\n\n\nName the output file same as input file\n\n\nSyntax must contain 'merge':False.\n\nNot needed for bots 3.", 
            "title": "Small user script"
        }, 
        {
            "location": "/CommunicationScriptsExample/#examples-for-small-user-exit", 
            "text": "", 
            "title": "Examples for small user exit"
        }, 
        {
            "location": "/CommunicationScriptsExample/#filter-email-attachments", 
            "text": "Some edi-partners send signatures etc in their email. Script does a\nsimple check if incoming attachment starts with 'UNB'. (Note: Bots\ntreats any text in the email body as another \"attachment\")  def accept_incoming_attachment(channeldict,ta,charset,content,contenttype,*args,**kwargs):\n    if 'UNB' in content[0:50]:\n        return True   #attachments is OK\n    else:\n        return False  #skip this attachment", 
            "title": "Filter email attachments"
        }, 
        {
            "location": "/CommunicationScriptsExample/#set-email-subject", 
            "text": "Some edi-partners send signatures etc in their email.\\\n By default bots uses a number for emails.\\\n Sometimes you want a more meaningfull subject.\\  def subject(channeldict,ta,subjectstring,content,*args,**kwargs):\n    ta.synall()        #needed to get access to attributes of object ta (eg ta.frompartner)\n    return 'EDI messages from ' + ta.frompartner + '_' + subjectstring", 
            "title": "Set email subject"
        }, 
        {
            "location": "/CommunicationScriptsExample/#name-archive-file-same-as-input-file", 
            "text": "Not needed for bots 3. ; do this via setting in bots.ini  import os\nimport bots.botslib as botslib\n\ndef archivename(channeldict,idta,filename,*args,**kwargs):\n     taparent=botslib.OldTransaction(idta=idta)\n     ta_list = botslib.trace_origin(ta=taparent,where={'status':EXTERNIN})\n     archivename = os.path.basename(ta_list[0].filename)\n     return archivename", 
            "title": "Name archive file same as input file"
        }, 
        {
            "location": "/CommunicationScriptsExample/#set-the-archive-path", 
            "text": "Path root is set in channel. \nAdd sub-dir per date, then sub-dir per channel under it.  import time\nimport bots.botslib as botslib\n\ndef archivepath(channeldict,*args,**kwargs):\n    archivepath = botslib.join(channeldict['archivepath'],time.strftime('%Y%m%d'),channeldict['idchannel'])\n    return archivepath", 
            "title": "Set the archive path"
        }, 
        {
            "location": "/CommunicationScriptsExample/#partners-in-the-output-file-name", 
            "text": "Not needed for bots 3. ; do this via file name in GUI  def filename(channeldict,filename,ta,*args,**kwargs):\n    ta.synall()        #needed to get access to attributes of object ta (eg ta.frompartner)\n    return ta.frompartner + '_' + ta.topartner + '_' + filename", 
            "title": "Partners in the output file name"
        }, 
        {
            "location": "/CommunicationScriptsExample/#name-the-output-file-from-botskey", 
            "text": "botskey can be set in grammar or mapping, eg. from customer's order\nnumber. \nIf no botskey is found, the default file naming method will be used. \nSyntax must contain 'merge':False. \nNot needed for bots 3. ; do this via file name in GUI.  def filename(channeldict,filename,ta,*args,**kwargs):\n    ta.synall()\n    if ta.botskey:\n        return filename + ta.botskey\n    else:\n        return filename", 
            "title": "Name the output file from botskey"
        }, 
        {
            "location": "/CommunicationScriptsExample/#name-the-output-file-same-as-input-file", 
            "text": "Syntax must contain 'merge':False. \nNot needed for bots 3.", 
            "title": "Name the output file same as input file"
        }, 
        {
            "location": "/CommunicationScriptsSubclass/", 
            "text": "Subclassing communication\n\n\nIt is possible to overwrite bots communication methods completely.\n\nThis is done using python subclassing.\n\nAgain, as with all communication scripting there should be a file in\nusersys/communicationscripts with the same name as the channel (and\nextension '.py')\n\n\nExample 1\n\n\nIn this case communication-type of the channel is 'file'. Bots will\ncheck the communication-script file if there is a class called 'file'\nand use that.\n The class 'file' subclasses the standard 'file' method of bots.\n\n\nimport bots.communication as communication\n\nclass file(communication.file):\n    def connect(self,*args,**kwargs):\n        #do the preparing work\n        print 'in connect method'\n\n\n\nExample 2\n\n\nIn this case communication-type of the channel is 'ftp'.\n The class 'ftp' subclasses the standard 'ftp' method of bots. The\n'outcommunicate' method of the ftp class is taken over with this\nimplementation.\n\n\nimport bots.communication as communication\nimport bots.botslib as botslib\nfrom bots.botsconfig import *\n\nclass ftp(communication.ftp):\n    @botslib.log_session\n    def outcommunicate(self,*args,**kwargs):\n        #get right filename_mask \n determine if fixed name (append) or files with unique names\n        filename_mask = self.channeldict['filename'] if self.channeldict['filename'] else '*'\n        if '{overwrite}' in filename_mask:\n            filename_mask = filename_mask.replace('{overwrite}','')\n            mode = 'STOR '\n        else:\n            mode = 'APPE '\n        for row in botslib.query('''SELECT idta,filename,numberofresends\n                                    FROM ta\n                                    WHERE idta\n%(rootidta)s\n                                      AND status=%(status)s\n                                      AND statust=%(statust)s\n                                      AND tochannel=%(tochannel)s\n                                        ''',\n                                    {'tochannel':self.channeldict['idchannel'],'rootidta':self.rootidta,\n                                    'status':FILEOUT,'statust':OK}):\n            try:\n                ta_from = botslib.OldTransaction(row['idta'])\n                ta_to = ta_from.copyta(status=EXTERNOUT)\n                tofilename = self.filename_formatter(filename_mask,ta_from)\n                if self.channeldict['ftpbinary']:\n                    fromfile = botslib.opendata(row['filename'], 'rb')\n                    self.session.storbinary(mode + tofilename, fromfile)\n                else:\n                    fromfile = botslib.opendata(row['filename'], 'r')\n                    self.session.storlines(mode + tofilename, fromfile)\n                fromfile.close()\n            except:\n                txt = botslib.txtexc()\n                ta_to.update(statust=ERROR,errortext=txt,filename='ftp:/'+posixpath.join(self.dirpath,tofilename),numberofresends=row['numberofresends']+1)\n            else:\n                ta_to.update(statust=DONE,filename='ftp:/'+posixpath.join(self.dirpath,tofilename),numberofresends=row['numberofresends']+1)\n            finally:\n                ta_from.update(statust=DONE)\n\n\n\nExample 3\n\n\nIn this case communication-type of the channel is 'ftp' or 'sftp'.\n\nThe class 'ftp' subclasses the standard 'ftp' method of bots. The\n'disconnect' method of the ftp class is taken over with this\nimplementation. The bots channel should be configured to upload either\nto a 'tmp' sub-directory, or with a '.tmp' extension. This function\nrenames the files once uploads are complete, this preventing the\nrecipient from processing partial files.\n\n\n'''\nFor safety when uploading to ftp servers, it is a good idea to rename/move\nfiles once complete. This prevents the receiver processing partial files.\nWhen all files have been sent and before the session is disconnected, the\nfiles are renamed so the receiver can process them.\n\nTwo methods are available:\n 1. Append extension \".tmp\" to the channel filename\n    This method is simpler, but the receiver may still process the\n    .tmp files if it does not look for specific extensions to process.\n 2. Append subdirectory \"/tmp\" to the channel path\n    This requires an extra directory created on the server, you may not\n    be authorised to do this.\n\nSubclassing of ftp.disconnect. Import this to your communicationscript (ftp or sftp as required):\n    from _ftp_rename import ftp\n    from _ftp_rename import sftp\n\nMike Griffin  4/09/2013\n\n'''\n\nimport bots.communication as communication\nimport bots.botslib as botslib\nimport bots.botsglobal as botsglobal\n\nclass ftp(communication.ftp):\n    def disconnect(self,*args,**kwargs):\n\n        # rename files to remove .tmp extensions\n        if self.channeldict['filename'].endswith('.tmp'):\n            for f in self.session.nlst():\n                if f.endswith('.tmp'):\n                    try:\n                        self.session.rename(f,f[:-4])\n                    except:\n                        pass\n\n        # rename files from tmp subdirectory to parent directory\n        if self.channeldict['path'].endswith('/tmp'):\n            for f in self.session.nlst():\n                try:\n                    self.session.rename(f,'../%s' %f)\n                except:\n                    pass\n\n        try:\n            self.session.quit()\n        except:\n            self.session.close()\n        botslib.settimeout(botsglobal.ini.getint('settings','globaltimeout',10))\n\nclass sftp(communication.sftp):\n    def disconnect(self,*args,**kwargs):\n\n        # rename files to remove .tmp extensions\n        if self.channeldict['filename'].endswith('.tmp'):\n            for f in self.session.listdir('.'):\n                if f.endswith('.tmp'):\n                    try:\n                        self.session.rename(f,f[:-4])\n                    except:\n                        pass\n\n        # rename files from tmp subdirectory to parent directory\n        if self.channeldict['path'].endswith('/tmp'):\n            for f in self.session.listdir('.'):\n                try:\n                    self.session.rename(f,'../%s' %f)\n                except:\n                    pass\n\n        self.session.close()\n        self.transport.close()\n\n\n\nExample 4\n\n\nIn this case communication-type of the channel is 'ftp'.\n\nThe class 'ftp' subclasses the standard 'ftp' method of bots. The\n'disconnect' method of the ftp class is taken over with this\nimplementation. This provides a way to submit a remote command to the\nftp server, for example to run a program on that server. The bots\nchannel is configured with the command in the 'parameters' field.\n\n\n'''\nBefore disconnecting, send a remote command\nChannel \"parameters\" holds the command to send\n\nSubclassing of ftp.disconnect. Import this to your communicationscript:\n    from _ftp_remote_command import ftp\n\nMike Griffin  13/09/2013\n'''\n\nimport bots.communication as communication\nimport bots.botsglobal as botsglobal\n\nclass ftp(communication.ftp):\n    def disconnect(self,*args,**kwargs):\n\n        # send remote command to ftp server\n        botsglobal.logger.info('Send remote command: %s',self.channeldict['parameters'])\n        self.session.sendcmd('RCMD %s' %self.channeldict['parameters'])\n\n        try:\n            self.session.quit()\n        except:\n            self.session.close()\n        botslib.settimeout(botsglobal.ini.getint('settings','globaltimeout',10))", 
            "title": "Subclassing"
        }, 
        {
            "location": "/CommunicationScriptsSubclass/#subclassing-communication", 
            "text": "It is possible to overwrite bots communication methods completely. \nThis is done using python subclassing. \nAgain, as with all communication scripting there should be a file in\nusersys/communicationscripts with the same name as the channel (and\nextension '.py')", 
            "title": "Subclassing communication"
        }, 
        {
            "location": "/CommunicationScriptsSubclass/#example-1", 
            "text": "In this case communication-type of the channel is 'file'. Bots will\ncheck the communication-script file if there is a class called 'file'\nand use that.\n The class 'file' subclasses the standard 'file' method of bots.  import bots.communication as communication\n\nclass file(communication.file):\n    def connect(self,*args,**kwargs):\n        #do the preparing work\n        print 'in connect method'", 
            "title": "Example 1"
        }, 
        {
            "location": "/CommunicationScriptsSubclass/#example-2", 
            "text": "In this case communication-type of the channel is 'ftp'.\n The class 'ftp' subclasses the standard 'ftp' method of bots. The\n'outcommunicate' method of the ftp class is taken over with this\nimplementation.  import bots.communication as communication\nimport bots.botslib as botslib\nfrom bots.botsconfig import *\n\nclass ftp(communication.ftp):\n    @botslib.log_session\n    def outcommunicate(self,*args,**kwargs):\n        #get right filename_mask   determine if fixed name (append) or files with unique names\n        filename_mask = self.channeldict['filename'] if self.channeldict['filename'] else '*'\n        if '{overwrite}' in filename_mask:\n            filename_mask = filename_mask.replace('{overwrite}','')\n            mode = 'STOR '\n        else:\n            mode = 'APPE '\n        for row in botslib.query('''SELECT idta,filename,numberofresends\n                                    FROM ta\n                                    WHERE idta %(rootidta)s\n                                      AND status=%(status)s\n                                      AND statust=%(statust)s\n                                      AND tochannel=%(tochannel)s\n                                        ''',\n                                    {'tochannel':self.channeldict['idchannel'],'rootidta':self.rootidta,\n                                    'status':FILEOUT,'statust':OK}):\n            try:\n                ta_from = botslib.OldTransaction(row['idta'])\n                ta_to = ta_from.copyta(status=EXTERNOUT)\n                tofilename = self.filename_formatter(filename_mask,ta_from)\n                if self.channeldict['ftpbinary']:\n                    fromfile = botslib.opendata(row['filename'], 'rb')\n                    self.session.storbinary(mode + tofilename, fromfile)\n                else:\n                    fromfile = botslib.opendata(row['filename'], 'r')\n                    self.session.storlines(mode + tofilename, fromfile)\n                fromfile.close()\n            except:\n                txt = botslib.txtexc()\n                ta_to.update(statust=ERROR,errortext=txt,filename='ftp:/'+posixpath.join(self.dirpath,tofilename),numberofresends=row['numberofresends']+1)\n            else:\n                ta_to.update(statust=DONE,filename='ftp:/'+posixpath.join(self.dirpath,tofilename),numberofresends=row['numberofresends']+1)\n            finally:\n                ta_from.update(statust=DONE)", 
            "title": "Example 2"
        }, 
        {
            "location": "/CommunicationScriptsSubclass/#example-3", 
            "text": "In this case communication-type of the channel is 'ftp' or 'sftp'. \nThe class 'ftp' subclasses the standard 'ftp' method of bots. The\n'disconnect' method of the ftp class is taken over with this\nimplementation. The bots channel should be configured to upload either\nto a 'tmp' sub-directory, or with a '.tmp' extension. This function\nrenames the files once uploads are complete, this preventing the\nrecipient from processing partial files.  '''\nFor safety when uploading to ftp servers, it is a good idea to rename/move\nfiles once complete. This prevents the receiver processing partial files.\nWhen all files have been sent and before the session is disconnected, the\nfiles are renamed so the receiver can process them.\n\nTwo methods are available:\n 1. Append extension \".tmp\" to the channel filename\n    This method is simpler, but the receiver may still process the\n    .tmp files if it does not look for specific extensions to process.\n 2. Append subdirectory \"/tmp\" to the channel path\n    This requires an extra directory created on the server, you may not\n    be authorised to do this.\n\nSubclassing of ftp.disconnect. Import this to your communicationscript (ftp or sftp as required):\n    from _ftp_rename import ftp\n    from _ftp_rename import sftp\n\nMike Griffin  4/09/2013\n\n'''\n\nimport bots.communication as communication\nimport bots.botslib as botslib\nimport bots.botsglobal as botsglobal\n\nclass ftp(communication.ftp):\n    def disconnect(self,*args,**kwargs):\n\n        # rename files to remove .tmp extensions\n        if self.channeldict['filename'].endswith('.tmp'):\n            for f in self.session.nlst():\n                if f.endswith('.tmp'):\n                    try:\n                        self.session.rename(f,f[:-4])\n                    except:\n                        pass\n\n        # rename files from tmp subdirectory to parent directory\n        if self.channeldict['path'].endswith('/tmp'):\n            for f in self.session.nlst():\n                try:\n                    self.session.rename(f,'../%s' %f)\n                except:\n                    pass\n\n        try:\n            self.session.quit()\n        except:\n            self.session.close()\n        botslib.settimeout(botsglobal.ini.getint('settings','globaltimeout',10))\n\nclass sftp(communication.sftp):\n    def disconnect(self,*args,**kwargs):\n\n        # rename files to remove .tmp extensions\n        if self.channeldict['filename'].endswith('.tmp'):\n            for f in self.session.listdir('.'):\n                if f.endswith('.tmp'):\n                    try:\n                        self.session.rename(f,f[:-4])\n                    except:\n                        pass\n\n        # rename files from tmp subdirectory to parent directory\n        if self.channeldict['path'].endswith('/tmp'):\n            for f in self.session.listdir('.'):\n                try:\n                    self.session.rename(f,'../%s' %f)\n                except:\n                    pass\n\n        self.session.close()\n        self.transport.close()", 
            "title": "Example 3"
        }, 
        {
            "location": "/CommunicationScriptsSubclass/#example-4", 
            "text": "In this case communication-type of the channel is 'ftp'. \nThe class 'ftp' subclasses the standard 'ftp' method of bots. The\n'disconnect' method of the ftp class is taken over with this\nimplementation. This provides a way to submit a remote command to the\nftp server, for example to run a program on that server. The bots\nchannel is configured with the command in the 'parameters' field.  '''\nBefore disconnecting, send a remote command\nChannel \"parameters\" holds the command to send\n\nSubclassing of ftp.disconnect. Import this to your communicationscript:\n    from _ftp_remote_command import ftp\n\nMike Griffin  13/09/2013\n'''\n\nimport bots.communication as communication\nimport bots.botsglobal as botsglobal\n\nclass ftp(communication.ftp):\n    def disconnect(self,*args,**kwargs):\n\n        # send remote command to ftp server\n        botsglobal.logger.info('Send remote command: %s',self.channeldict['parameters'])\n        self.session.sendcmd('RCMD %s' %self.channeldict['parameters'])\n\n        try:\n            self.session.quit()\n        except:\n            self.session.close()\n        botslib.settimeout(botsglobal.ini.getint('settings','globaltimeout',10))", 
            "title": "Example 4"
        }, 
        {
            "location": "/CommunicationScriptsType/", 
            "text": "communication type 'communicationscript'\n\n\nIn this case, the channel must be configured with Type: communicationscript.\n\nIn the communicationscript some functions will be called:\n\n\n\n\nconnect (required)\n\n\nmain (optional, 'main' should handle files one by one)\n\n\ndisconnect (optional)\n\n\n\n\nDifferent ways of working:\n\n\n\n\n\n\nfor incoming files (bots receives the files):\n\n\n\n\nconnect puts all files in a directory, there is no 'main'\n    function. bots can remove the files (if you use the 'remove'\n    switch of the channel). See example 1.\n\n\nconnect only builds the connection, 'main' is a generator that\n    passes the messages one by one (using 'yield'). bots can remove\n    the files (if you use the 'remove' switch of the channel). See\n    example 2.\n\n\n\n\n\n\n\n\nfor outgoing files (bots sends the files):\n\n\n\n\nno 'main' function: the processing of all the files can be done\n    in 'disconnect'. bots can remove the files (if you use the\n    'remove' switch of the channel). See example 3.\n\n\nif there is a 'main' function: the 'main' function is called by\n    bots after writing each file. bots can remove the files (if you\n    use the 'remove' switch of the channel). See example 4.\n\n\n\n\n\n\n\n\nExample 1: incoming files via external program all at once\n\n\nCalls an external program.\n\nThink eg of a specific communication module for a VAN.\n\nAll files are received at once to a folder, then processed like a\nnormal file channel. \n\n\nimport subprocess\n\ndef connect(channeldict,*args,**kwargs):\n    subprocess.call(['C:/Program files/my VAN/comms-module.exe','-receive'])\n\n\n\nExample 2: incoming files via external program one by one\n\n\nTODO: make a valid example using yield.\n\nmain is a generator.\n\n\nimport subprocess\n\ndef connect(channeldict,*args,**kwargs):\n    ''' function does nothing but it is required.'''\n    pass\n\ndef main(channeldict,*args,**kwargs):\n\n    yield ?\n\n\n\n\\\n\n\nExample 3: outgoing files via external program all at once\n\n\nCalls an external program.\n\nThink eg of a specific communication module for a VAN.\n\nIn this example the 'disconnect' script is called after all files are\nwritten to directory;\n\nin disconnect all files are passed to external communication-module.\n\n\nimport subprocess\nimport os\n\ndef connect(channeldict,*args,**kwargs):\n    ''' function does nothing but it is required.'''\n    pass\n\ndef disconnect(channeldict,*args,**kwargs):\n    subprocess.call(['C:/Program files/my VAN/comms-module.exe','-send',os.path.join(channeldict['path'],'*.xml'])\n\n\n\nExample 4: outgoing files via external program one by one\n\n\nCalls an external program.\n\nThink eg of a specific communication module for a VAN.\n\nIn this example the 'main' script is called for each outgoing file.\n\n\nimport subprocess\n\ndef connect(channeldict,*args,**kwargs):\n    ''' function does nothing but it is required.'''\n    pass\n\ndef main(channeldict,filename,ta,*args,**kwargs):\n    subprocess.call(['C:/Program files/my VAN/comms-module.exe','-send',filename])\n\n\n\nExample 5: outgoing files to a printer\n\n\nSend data (eg. ZPL code to print fancy labels) directly to a Windows\nconfigured printer.\n\nThe printer can be defined in Windows either as \"Generic/Text Only\" or\nwith the proper driver, because this script just sends raw data, bypassing the\ndriver.\n\nDependencies: Requires pywin32\n\nReference: \nhttp://timgolden.me.uk/pywin32-docs/win32print.html\n\n\nimport os\nimport win32print\nimport bots.transform as transform\n\ndef connect(channeldict,*args,**kwargs):\n    ''' function does nothing but it is required.'''\n    pass\n\ndef main(channeldict,filename,ta,*args,**kwargs):\n\n    # set printer values required\n    ta.synall()\n    printer = transform.partnerlookup(ta.topartner,'attr1')\n    jobname = ta.botskey\n\n    # read the output file\n    with open(filename,'r') as content_file:\n        content = content_file.read()\n\n    # send data to the printer\n    hPrinter = win32print.OpenPrinter(printer)\n    hJob = win32print.StartDocPrinter(hPrinter,1,(jobname,None,'RAW'))\n    win32print.WritePrinter(hPrinter,content)\n    win32print.EndDocPrinter(hPrinter)\n    win32print.ClosePrinter(hPrinter)", 
            "title": "communication type 'communicationscript'"
        }, 
        {
            "location": "/CommunicationScriptsType/#communication-type-communicationscript", 
            "text": "In this case, the channel must be configured with Type: communicationscript. \nIn the communicationscript some functions will be called:   connect (required)  main (optional, 'main' should handle files one by one)  disconnect (optional)   Different ways of working:    for incoming files (bots receives the files):   connect puts all files in a directory, there is no 'main'\n    function. bots can remove the files (if you use the 'remove'\n    switch of the channel). See example 1.  connect only builds the connection, 'main' is a generator that\n    passes the messages one by one (using 'yield'). bots can remove\n    the files (if you use the 'remove' switch of the channel). See\n    example 2.     for outgoing files (bots sends the files):   no 'main' function: the processing of all the files can be done\n    in 'disconnect'. bots can remove the files (if you use the\n    'remove' switch of the channel). See example 3.  if there is a 'main' function: the 'main' function is called by\n    bots after writing each file. bots can remove the files (if you\n    use the 'remove' switch of the channel). See example 4.", 
            "title": "communication type 'communicationscript'"
        }, 
        {
            "location": "/CommunicationScriptsType/#example-1-incoming-files-via-external-program-all-at-once", 
            "text": "Calls an external program. \nThink eg of a specific communication module for a VAN. \nAll files are received at once to a folder, then processed like a\nnormal file channel.   import subprocess\n\ndef connect(channeldict,*args,**kwargs):\n    subprocess.call(['C:/Program files/my VAN/comms-module.exe','-receive'])", 
            "title": "Example 1: incoming files via external program all at once"
        }, 
        {
            "location": "/CommunicationScriptsType/#example-2-incoming-files-via-external-program-one-by-one", 
            "text": "TODO: make a valid example using yield. \nmain is a generator.  import subprocess\n\ndef connect(channeldict,*args,**kwargs):\n    ''' function does nothing but it is required.'''\n    pass\n\ndef main(channeldict,*args,**kwargs):\n\n    yield ?  \\", 
            "title": "Example 2: incoming files via external program one by one"
        }, 
        {
            "location": "/CommunicationScriptsType/#example-3-outgoing-files-via-external-program-all-at-once", 
            "text": "Calls an external program. \nThink eg of a specific communication module for a VAN. \nIn this example the 'disconnect' script is called after all files are\nwritten to directory; \nin disconnect all files are passed to external communication-module.  import subprocess\nimport os\n\ndef connect(channeldict,*args,**kwargs):\n    ''' function does nothing but it is required.'''\n    pass\n\ndef disconnect(channeldict,*args,**kwargs):\n    subprocess.call(['C:/Program files/my VAN/comms-module.exe','-send',os.path.join(channeldict['path'],'*.xml'])", 
            "title": "Example 3: outgoing files via external program all at once"
        }, 
        {
            "location": "/CommunicationScriptsType/#example-4-outgoing-files-via-external-program-one-by-one", 
            "text": "Calls an external program. \nThink eg of a specific communication module for a VAN. \nIn this example the 'main' script is called for each outgoing file.  import subprocess\n\ndef connect(channeldict,*args,**kwargs):\n    ''' function does nothing but it is required.'''\n    pass\n\ndef main(channeldict,filename,ta,*args,**kwargs):\n    subprocess.call(['C:/Program files/my VAN/comms-module.exe','-send',filename])", 
            "title": "Example 4: outgoing files via external program one by one"
        }, 
        {
            "location": "/CommunicationScriptsType/#example-5-outgoing-files-to-a-printer", 
            "text": "Send data (eg. ZPL code to print fancy labels) directly to a Windows\nconfigured printer. \nThe printer can be defined in Windows either as \"Generic/Text Only\" or\nwith the proper driver, because this script just sends raw data, bypassing the\ndriver. \nDependencies: Requires pywin32 \nReference:  http://timgolden.me.uk/pywin32-docs/win32print.html  import os\nimport win32print\nimport bots.transform as transform\n\ndef connect(channeldict,*args,**kwargs):\n    ''' function does nothing but it is required.'''\n    pass\n\ndef main(channeldict,filename,ta,*args,**kwargs):\n\n    # set printer values required\n    ta.synall()\n    printer = transform.partnerlookup(ta.topartner,'attr1')\n    jobname = ta.botskey\n\n    # read the output file\n    with open(filename,'r') as content_file:\n        content = content_file.read()\n\n    # send data to the printer\n    hPrinter = win32print.OpenPrinter(printer)\n    hJob = win32print.StartDocPrinter(hPrinter,1,(jobname,None,'RAW'))\n    win32print.WritePrinter(hPrinter,content)\n    win32print.EndDocPrinter(hPrinter)\n    win32print.ClosePrinter(hPrinter)", 
            "title": "Example 5: outgoing files to a printer"
        }, 
        {
            "location": "/ChannelPortNumbers/", 
            "text": "Common port number usage\n\n\nSome types of channels require a host and port number. These details should be provided to you by the server administrator. If no port number is provided to you, most likely the \"default\" port is being used. The most common default port numbers are listed below.\n\n\n\n\n\n\n\n\nChannel Type\n\n\nPort number\n\n\n\n\n\n\n\n\n\n\nsmtp\n\n\n25\n\n\n\n\n\n\nsmtps\n\n\n587\n\n\n\n\n\n\nsmtpstarttls\n\n\n587\n\n\n\n\n\n\npop3\n\n\n110\n\n\n\n\n\n\npop3s\n\n\n995\n\n\n\n\n\n\npop3apop\n\n\n110\n\n\n\n\n\n\nimap4\n\n\n143\n\n\n\n\n\n\nimap4s\n\n\n993\n\n\n\n\n\n\nftp\n\n\n21\n\n\n\n\n\n\nftps\n\n\n21\n\n\n\n\n\n\nftpis\n\n\n21\n\n\n\n\n\n\nsftp\n\n\n22", 
            "title": "Channel port numbers"
        }, 
        {
            "location": "/ChannelPortNumbers/#common-port-number-usage", 
            "text": "Some types of channels require a host and port number. These details should be provided to you by the server administrator. If no port number is provided to you, most likely the \"default\" port is being used. The most common default port numbers are listed below.     Channel Type  Port number      smtp  25    smtps  587    smtpstarttls  587    pop3  110    pop3s  995    pop3apop  110    imap4  143    imap4s  993    ftp  21    ftps  21    ftpis  21    sftp  22", 
            "title": "Common port number usage"
        }, 
        {
            "location": "/ChannelFileLock/", 
            "text": "Safe file writing/lockings\n\n\nProblem\n\n\n\n\nERP writes an in-house file; bots starts to read this before \n    the file is completely written. \n\n\nBots writes file over FTP, but file is read before Bots\n    finishes writing. Bots provides some options in channels to handle\n    this.\n\n\n\n\nWays to handle this\n\n\n\n\n\n\nTmp-part file name: bots writes a filename, than renames the file.\n    Example 1. In channel: filename is \"myfilename_*.edi.tmp\",\n\n\n\n\ntmp-part is \".tmp\"  \n\n\nBots writes: \"myfilename_12345.edi.tmp\"  \n\n\nBots renames: \"myfilename_12345.edi\"\\\n\n\n\n\n\n\n\n\nSystem lock: use system file locks for reading or writing edi\n    files (windows, *nix).\n\n\n\n\n\n\nLock-file: Directory locking: if lock-file exists in directory,\n    directory is locked for reading/writing. Both eader and writer should\n    check for this.", 
            "title": "Safe file writing/locking"
        }, 
        {
            "location": "/ChannelFileLock/#safe-file-writinglockings", 
            "text": "", 
            "title": "Safe file writing/lockings"
        }, 
        {
            "location": "/ChannelFileLock/#problem", 
            "text": "ERP writes an in-house file; bots starts to read this before \n    the file is completely written.   Bots writes file over FTP, but file is read before Bots\n    finishes writing. Bots provides some options in channels to handle\n    this.", 
            "title": "Problem"
        }, 
        {
            "location": "/ChannelFileLock/#ways-to-handle-this", 
            "text": "Tmp-part file name: bots writes a filename, than renames the file.\n    Example 1. In channel: filename is \"myfilename_*.edi.tmp\",   tmp-part is \".tmp\"    Bots writes: \"myfilename_12345.edi.tmp\"    Bots renames: \"myfilename_12345.edi\"\\     System lock: use system file locks for reading or writing edi\n    files (windows, *nix).    Lock-file: Directory locking: if lock-file exists in directory,\n    directory is locked for reading/writing. Both eader and writer should\n    check for this.", 
            "title": "Ways to handle this"
        }, 
        {
            "location": "/TranslationIntroduction/", 
            "text": "Introduction\n\n\n\n\nDefinition: \nA translation translates a\nmessage of a certain editype, messagetype to another editype,\nmessagetype\n \n\n\n\n\nNeeded for a translation: \n\n\n\n\nTranslation rule in \nbots-monitor->Configuration->Translations\n; see the screen shot\n    below. \n\n\nGrammar\n for incoming message. \n\n\nGrammar\n for outgoing message. \n\n\nMapping script that for converting incoming message to outgoing message.\n\n\n\n\n\n\nScreenshot of configured translations-rules\n\n\n\n\n\n\nRead the 1st translation rule of this screen shot:\n\n\n\n\ntranslate edifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using\nmapping script ordersedifact2myinhouse.py", 
            "title": "Introduction"
        }, 
        {
            "location": "/TranslationIntroduction/#introduction", 
            "text": "Definition:  A translation translates a\nmessage of a certain editype, messagetype to another editype,\nmessagetype     Needed for a translation:    Translation rule in  bots-monitor->Configuration->Translations ; see the screen shot\n    below.   Grammar  for incoming message.   Grammar  for outgoing message.   Mapping script that for converting incoming message to outgoing message.    Screenshot of configured translations-rules    Read the 1st translation rule of this screen shot:   translate edifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using\nmapping script ordersedifact2myinhouse.py", 
            "title": "Introduction"
        }, 
        {
            "location": "/TranslationDetail/", 
            "text": "How translations work\n\n\nBest understood by looking at this schema:  \n\n\n\n\nStep-by-step:\n\n\n\n\n\n\nThe edi file is lexed and parsed using the\n    \ngrammar\n.\n\n\n\n\n\n\nThe message is transformed into a tree structure. This is similar to the\n    use of DOM in xml. Advantages:\n\n\n\n\neasy access to message content. This is quite similar to XML-queries\n    or X-path.\n\n\nchoose the logic for the mapping script that is best fit for the\n    situation - instead of being forced to 'loop' over incoming\n    message.\n\n\nSorting: eg. sort article lines by article number.\n\n\nCounting: eg. count number of lines, total amounts etc\n\n\nAccess the data you already written in the tree\n\n\n\n\n\n\n\n\nSplit\n the edi file into separate messages (eg\none edi file can contain multiple orders).\n\n\nFind the \nright translation\n for message.\n\n\nRun the \nmapping script\n for message.\n\n\nSerialize the outmessage-tree to file. This is checked and formatted\naccording to the \ngrammar\n of the outgoing\nmessage.\n\n\nOutgoing messages are \nenveloped and/or merged\n.", 
            "title": "How translations work"
        }, 
        {
            "location": "/TranslationDetail/#how-translations-work", 
            "text": "Best understood by looking at this schema:     Step-by-step:    The edi file is lexed and parsed using the\n     grammar .    The message is transformed into a tree structure. This is similar to the\n    use of DOM in xml. Advantages:   easy access to message content. This is quite similar to XML-queries\n    or X-path.  choose the logic for the mapping script that is best fit for the\n    situation - instead of being forced to 'loop' over incoming\n    message.  Sorting: eg. sort article lines by article number.  Counting: eg. count number of lines, total amounts etc  Access the data you already written in the tree     Split  the edi file into separate messages (eg\none edi file can contain multiple orders).  Find the  right translation  for message.  Run the  mapping script  for message.  Serialize the outmessage-tree to file. This is checked and formatted\naccording to the  grammar  of the outgoing\nmessage.  Outgoing messages are  enveloped and/or merged .", 
            "title": "How translations work"
        }, 
        {
            "location": "/TranslationRules/", 
            "text": "What translation when?\n\n\nBots figures out what translation to use via the translation rules.\n\nBest is to think of the translation rules as a 'lookup' table:\n\n\n\n\nlook-up with (from-editype, from-messagetype, alt, frompartner and\ntopartner) to find mappingscript, to-editype and to-messagetype\n\n\n\n\nHow the input values for the look-up are determined:\n\n\n\n\n\n\neditype\n\n\n\n\nconfigured in the route\n\n\nif you configure editype=mailbag, bots will figure out if\n    editype is x12, edifact or tradacoms.\n\n\n\n\n\n\n\n\nmessagetype can be:\n\n\n\n\nconfigured in the route, eg for editype csv\n\n\nfor edifact, x12 and tradacoms: bots figures out the detailed\n    messagetype. Example:\n\n\nin route: editype: edifact, messagetype: edifact\\\n\n\nin incoming edi file bots finds detail messagetype\n    'ORDERSD96AUN'.\n\n\n\n\n\n\n\n\n\n\n\n\nfrompartner can be:\n\n\n\n\nconfigured in the route\n\n\ndetermined by the grammar using\n    \nQUERIES\n\n\n\n\n\n\n\n\ntopartner can be:\n\n\n\n\nconfigured in the route\n\n\ndetermined by the grammar using\n    \nQUERIES\n\n\n\n\n\n\n\n\nalt can be:\n\n\n\n\nconfigured in the route\n\n\ndetermined by the grammar using\n    \nQUERIES\n\n\nset by mapping script in a \nchained\n    translation\n\n\n\n\n\n\n\n\nNotes:\n\n\n\n\nFor frompartner and topartner: bots finds the most specific\n    translation.\n\n\nEg example with 2 translation rules:\n\n\nfromeditype = edifact, frommessagetype = ORDERSD96AUNEAN008\n\n\nfromeditype = edifact, frommessagetype = ORDERSD96AUNEAN008,\n    frompartner=RETAILERX\n\n\n\n\n\n\nIf bots receives an ORDERS message from RETAILERX, the 2nd\n    translation is used.\n\n\nFor other partners the first translation is used.\n\n\n\n\n\n\n\n\nfor alt-translations: only find the translation with that specific\n'alt'.", 
            "title": "What translation when?"
        }, 
        {
            "location": "/TranslationRules/#what-translation-when", 
            "text": "Bots figures out what translation to use via the translation rules. \nBest is to think of the translation rules as a 'lookup' table:   look-up with (from-editype, from-messagetype, alt, frompartner and\ntopartner) to find mappingscript, to-editype and to-messagetype   How the input values for the look-up are determined:    editype   configured in the route  if you configure editype=mailbag, bots will figure out if\n    editype is x12, edifact or tradacoms.     messagetype can be:   configured in the route, eg for editype csv  for edifact, x12 and tradacoms: bots figures out the detailed\n    messagetype. Example:  in route: editype: edifact, messagetype: edifact\\  in incoming edi file bots finds detail messagetype\n    'ORDERSD96AUN'.       frompartner can be:   configured in the route  determined by the grammar using\n     QUERIES     topartner can be:   configured in the route  determined by the grammar using\n     QUERIES     alt can be:   configured in the route  determined by the grammar using\n     QUERIES  set by mapping script in a  chained\n    translation     Notes:   For frompartner and topartner: bots finds the most specific\n    translation.  Eg example with 2 translation rules:  fromeditype = edifact, frommessagetype = ORDERSD96AUNEAN008  fromeditype = edifact, frommessagetype = ORDERSD96AUNEAN008,\n    frompartner=RETAILERX    If bots receives an ORDERS message from RETAILERX, the 2nd\n    translation is used.  For other partners the first translation is used.     for alt-translations: only find the translation with that specific\n'alt'.", 
            "title": "What translation when?"
        }, 
        {
            "location": "/TranslationperPartner/", 
            "text": "Partner specific translation\n\n\nExplain by example\n\n\nYou receive edifact ORDERSD96AUNEAN008 from several partners. Partner\n'retailer-abroad' fills the orders in a different way; the difference is\nso big that it is better to have a separate mapping script.\n\n\nConfigure this like:\n\n\n\n\none grammar for incoming edifact ORDERSD96AUNEAN008 message. (It is\n    a standard message, isn't it?)\n\n\none grammar for the inhouse import format. (We definitely want one\n    import for all orders!)\n\n\nnote that the incoming edifact grammar uses QUERIES to determine the\n    from-partner and to-partner before the translation.\n\n\nmake the 2 mapping scripts:\n\n\nmapping script 'ordersedi2inhouse_for_retailerabroad.py'\n    (specific for partner 'retailer-abroad').\n\n\nmapping script 'fixed-myinhouseorder' (for all other\n    retailers).\n\n\n\n\n\n\nadd 'retailer-abroad' to partners (via\n    \nbots-monitor->Configuration->Partners \n groups\n).\n\n\nUse 2 translations rules:\n\n\nedifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using mapping\n    script ordersedi2inhouse.py\n\n\nedifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using mapping\n    script ordersedi2inhouse_for_retailerabroad.py for\n    from-partner 'retailer-abroad'\n\n\n\n\n\n\n\n\nOften there are lots of similarities between the mappings - the 'many\nsimilar yet different mappings' problems. This can be \nhandled in\nbots\n\nin a nice way.\n\n\nPlugin\n\n\nPlugin 'demo_partnerdependent' at \nthe bots sourceforge\nsite\n demonstrates\npartner specific translations.", 
            "title": "Partner specific translations"
        }, 
        {
            "location": "/TranslationperPartner/#partner-specific-translation", 
            "text": "", 
            "title": "Partner specific translation"
        }, 
        {
            "location": "/TranslationperPartner/#explain-by-example", 
            "text": "You receive edifact ORDERSD96AUNEAN008 from several partners. Partner\n'retailer-abroad' fills the orders in a different way; the difference is\nso big that it is better to have a separate mapping script.  Configure this like:   one grammar for incoming edifact ORDERSD96AUNEAN008 message. (It is\n    a standard message, isn't it?)  one grammar for the inhouse import format. (We definitely want one\n    import for all orders!)  note that the incoming edifact grammar uses QUERIES to determine the\n    from-partner and to-partner before the translation.  make the 2 mapping scripts:  mapping script 'ordersedi2inhouse_for_retailerabroad.py'\n    (specific for partner 'retailer-abroad').  mapping script 'fixed-myinhouseorder' (for all other\n    retailers).    add 'retailer-abroad' to partners (via\n     bots-monitor->Configuration->Partners   groups ).  Use 2 translations rules:  edifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using mapping\n    script ordersedi2inhouse.py  edifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using mapping\n    script ordersedi2inhouse_for_retailerabroad.py for\n    from-partner 'retailer-abroad'     Often there are lots of similarities between the mappings - the 'many\nsimilar yet different mappings' problems. This can be  handled in\nbots \nin a nice way.", 
            "title": "Explain by example"
        }, 
        {
            "location": "/TranslationperPartner/#plugin", 
            "text": "Plugin 'demo_partnerdependent' at  the bots sourceforge\nsite  demonstrates\npartner specific translations.", 
            "title": "Plugin"
        }, 
        {
            "location": "/TranslationperPartnerExtended/", 
            "text": "Organize partner specific translations using imports\n\n\nOften in edi you need a number of very similar translations for different partners -\nthe 'many similar yet different mappings' problems.\n\n\nYou want to organize your mapping scripts so that code is not\nduplicated many times, creating maintenance problems.\n\n\nA nice approach is:\n\n\n\n\ncreate a default mapping.\n\n\nfor some partners you can use the default mapping, for others use \na\n    partner specific\n    translation\n\n\nthe partner-specific mappings import the default mapping and builds\n    upon that (additional pre- or post-mapping).\n     Note: plugin 'demo_partnerdependent' at \nthe bots sourceforge\n    site\n\n    demonstrates the use of default mappings and imports.\n\n\n\n\nBy Example\n\n\nthe default mapping\n\nScript file 'orders2idoc.py', translates edifact ORDERS to idoc\nORDERS05)\\\n\n\ndef main(inn,out):\n    # Order number\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDK02','QUALF':'001',\n                                   'BELNR':inn.get({'BOTSID':'UNH'},{'BOTSID':'BGM','C106.1004':None})})\n\n    # Buyer name\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKA1','PARVW':'AG',\n                                   'BNAME':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'BY','C056.3412':None})})\n\n    # blahblahblah.....lots more complex mapping code for the order\n\n\n\nthe partner specific mapping\n\nScript file 'customer2_orders2idoc.py' for for customer.\n\nThe default mapping is mostly OK, but a few changes are needed:  \n\n\nimport orders2idoc             #here the default mapping is imported\n\ndef main(inn,out):\n    #*** pre-mapping *******************\n    # do partner-specific mapping before the default mapping eg to make the incoming order \"more standard\" :-)\n    # In this example:\n    #     customer2 sends RFF+PR:BULK to indicate a stock order. Delete this and change to BGM+120\n    #     This must be done pre-mapping because we have complex mapping rules based on BGM order type.\n    if inn.get({'BOTSID':'UNH'},{'BOTSID':'RFF','C506.1153':'PR','C506.1154':None}) == 'BULK':\n        inn.delete({'BOTSID':'UNH'},{'BOTSID':'RFF','C506.1153':'PR','C506.1154':'BULK'})\n        inn.change(where=({'BOTSID':'UNH'},{'BOTSID':'BGM'}),change={'C002.1001':'120'})\n\n\n    #*** run the default mapping******************\n    orders2idoc.main(inn,out)\n\n\n    #*** post-mapping *******************\n    # Post-mapping to adjust or add to the mapped output.\n    # Delete unwanted text that is sent on their orders\n    out.delete({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKT2','TDLINE':'TOTAL EXCL. GST AUD'})\n    # Additional mapping: map buyer name from NAD+AB:\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKA1','PARVW':'AG',\n            'BNAME':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'AB','C056.3412':None})})\n\n\n\nSome details and tips:\n\n\n\n\nMake the default mapping is as generic as possible (eg. checking\n    multiple fields).\n\n\nDo not not put any partner specific implementation mapping in here\n\n\nAll mapping scripts are in the same directory (for the incoming\n    editype)\n\n\n\n\nPlugin\n\n\nPlugin 'demo_partnerdependent' at \nthe bots sourceforge\nsite\n demonstrates\nthe use of default mappings and imports.", 
            "title": "Organize partner specific translations"
        }, 
        {
            "location": "/TranslationperPartnerExtended/#organize-partner-specific-translations-using-imports", 
            "text": "Often in edi you need a number of very similar translations for different partners -\nthe 'many similar yet different mappings' problems.  You want to organize your mapping scripts so that code is not\nduplicated many times, creating maintenance problems.  A nice approach is:   create a default mapping.  for some partners you can use the default mapping, for others use  a\n    partner specific\n    translation  the partner-specific mappings import the default mapping and builds\n    upon that (additional pre- or post-mapping).\n     Note: plugin 'demo_partnerdependent' at  the bots sourceforge\n    site \n    demonstrates the use of default mappings and imports.", 
            "title": "Organize partner specific translations using imports"
        }, 
        {
            "location": "/TranslationperPartnerExtended/#by-example", 
            "text": "the default mapping \nScript file 'orders2idoc.py', translates edifact ORDERS to idoc\nORDERS05)\\  def main(inn,out):\n    # Order number\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDK02','QUALF':'001',\n                                   'BELNR':inn.get({'BOTSID':'UNH'},{'BOTSID':'BGM','C106.1004':None})})\n\n    # Buyer name\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKA1','PARVW':'AG',\n                                   'BNAME':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'BY','C056.3412':None})})\n\n    # blahblahblah.....lots more complex mapping code for the order  the partner specific mapping \nScript file 'customer2_orders2idoc.py' for for customer. \nThe default mapping is mostly OK, but a few changes are needed:    import orders2idoc             #here the default mapping is imported\n\ndef main(inn,out):\n    #*** pre-mapping *******************\n    # do partner-specific mapping before the default mapping eg to make the incoming order \"more standard\" :-)\n    # In this example:\n    #     customer2 sends RFF+PR:BULK to indicate a stock order. Delete this and change to BGM+120\n    #     This must be done pre-mapping because we have complex mapping rules based on BGM order type.\n    if inn.get({'BOTSID':'UNH'},{'BOTSID':'RFF','C506.1153':'PR','C506.1154':None}) == 'BULK':\n        inn.delete({'BOTSID':'UNH'},{'BOTSID':'RFF','C506.1153':'PR','C506.1154':'BULK'})\n        inn.change(where=({'BOTSID':'UNH'},{'BOTSID':'BGM'}),change={'C002.1001':'120'})\n\n\n    #*** run the default mapping******************\n    orders2idoc.main(inn,out)\n\n\n    #*** post-mapping *******************\n    # Post-mapping to adjust or add to the mapped output.\n    # Delete unwanted text that is sent on their orders\n    out.delete({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKT2','TDLINE':'TOTAL EXCL. GST AUD'})\n    # Additional mapping: map buyer name from NAD+AB:\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKA1','PARVW':'AG',\n            'BNAME':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'AB','C056.3412':None})})  Some details and tips:   Make the default mapping is as generic as possible (eg. checking\n    multiple fields).  Do not not put any partner specific implementation mapping in here  All mapping scripts are in the same directory (for the incoming\n    editype)", 
            "title": "By Example"
        }, 
        {
            "location": "/TranslationperPartnerExtended/#plugin", 
            "text": "Plugin 'demo_partnerdependent' at  the bots sourceforge\nsite  demonstrates\nthe use of default mappings and imports.", 
            "title": "Plugin"
        }, 
        {
            "location": "/TranslationAlt/", 
            "text": "Chained Translations\n\n\n\n\nDefinition: \nchained translations\ntranslate one incoming format to multiple outgoing formats.\n \n\n\n\n\nEg: translate edi-order to in-house format AND send an email to inform sales\nrepresentative.  \n\n\nTo use this bots uses the 'alt'.\n\nHow this works:\n\n\n\n\nreceive incoming file\n\n\ndo a translation (using mapping script)\n\n\nmapping script returns alt-value\n\n\ndo another translation using the alt-value.\n\n\n\n\nBackground information: \nTranslationRules how bots determines what\nto translate\n.\n\n\nBy example\n\n\n\n\nSet up first translation rule (to csv-format) as usual:\n\n\ntranslate x12-850 to csv-orders using mapping script\n    850_2_csv\n\n\n\n\n\n\n\n\nat end of mapping script 850_2_csv:\n\n\n  return 'do_email_translation'        #alt-value is returned\n\n\n\n\n\n\n\nSet up the second translation rule:\n\n\n\n\ntranslate x12-850 to csv-orders using mapping script\n    850_2_email \nwhere alt=do_email_translation\n\n\n\n\n\n\n\n\nBy returning the alt-value 'do_email_translation' mapping script\n850_2_csv triggers the 2nd translation (with mapping script\n850_2_email).\n\n\nPlugin\n\n\nIn plugin \nedifact_ordersdesadvinvoic\n on \nbots sourceforge\nsite\n:\n\n\n\n\nincoming is edifact orders.\n\n\ntranslate fixed inhouse format.\n\n\ntranslate to edifact APERAK/acknowledgement (if acknowledgement is\n    asked).\n\n\n\n\nDetails\n\n\n\n\nOf course it is possible to 'chain' more than one translation.\n\n\nI have used this to do complex 'sorts' on incoming documents, eg:\n\n\nwrite/sort to multiple outgoing messages sorting for destination\n    of goods\n\n\n\n\n\n\nNote: in this type of set-up multiple formats are outgoing, you'll\n    want to use a \ncomposite route\n.\n\n\n\n\nSpecial Chained Translations\n\n\nYou can also return an alt value that is a python dict. The dict must\ncontain 'type' and 'alt' strings; there are several special types\navailable for different processing requirements.\n\n\nout_as_inn\n\n\nDo chained translation: use the out-object as inn-object, new\nout-object.\n\nUse cases:\n\n\n\n\nDetected error in incoming file; use out-object to generate warning\n    email.\n\n\nMap inputs to standard format, also map standard format to human\n    readable version (eg. html template)\n    Both out-objects are output by Bots and can be sent to same or\n    different channels using channel filtering.\\\n    # if the first output is not needed to send somewhere, discard it\n    # omit this step and you will get both outputs\n    from bots.botsconfig import *\n    out.ta_info['statust'] = DONE\n\n    # use output of first mapping as input of second mapping\n    return {'type':'out_as_inn','alt':'do_email_translation'}\n\n\n\n\n\n\n\nno_check_on_infinite_loop\n\n\nDo chained translation: allow many loops with same alt-value.\n\nNormally, Bots will detect and prevent this, by stopping after 10\niterations of the loop. You are disabling this safety feature, so your\nmapping script will have to handle this correctly to ensure the looping\nis not infinite.  \n\n\n    # we MUST have a way to exit the loop!\n    if (some condition):\n        return\n\n    # loop through this mapping multiple times...\n    return {'type':'no_check_on_infinite_loop','alt':'repeat'}", 
            "title": "Chained translations (alt)"
        }, 
        {
            "location": "/TranslationAlt/#chained-translations", 
            "text": "Definition:  chained translations\ntranslate one incoming format to multiple outgoing formats.     Eg: translate edi-order to in-house format AND send an email to inform sales\nrepresentative.    To use this bots uses the 'alt'. \nHow this works:   receive incoming file  do a translation (using mapping script)  mapping script returns alt-value  do another translation using the alt-value.   Background information:  TranslationRules how bots determines what\nto translate .", 
            "title": "Chained Translations"
        }, 
        {
            "location": "/TranslationAlt/#by-example", 
            "text": "Set up first translation rule (to csv-format) as usual:  translate x12-850 to csv-orders using mapping script\n    850_2_csv     at end of mapping script 850_2_csv:    return 'do_email_translation'        #alt-value is returned    Set up the second translation rule:   translate x12-850 to csv-orders using mapping script\n    850_2_email  where alt=do_email_translation     By returning the alt-value 'do_email_translation' mapping script\n850_2_csv triggers the 2nd translation (with mapping script\n850_2_email).", 
            "title": "By example"
        }, 
        {
            "location": "/TranslationAlt/#plugin", 
            "text": "In plugin  edifact_ordersdesadvinvoic  on  bots sourceforge\nsite :   incoming is edifact orders.  translate fixed inhouse format.  translate to edifact APERAK/acknowledgement (if acknowledgement is\n    asked).", 
            "title": "Plugin"
        }, 
        {
            "location": "/TranslationAlt/#details", 
            "text": "Of course it is possible to 'chain' more than one translation.  I have used this to do complex 'sorts' on incoming documents, eg:  write/sort to multiple outgoing messages sorting for destination\n    of goods    Note: in this type of set-up multiple formats are outgoing, you'll\n    want to use a  composite route .", 
            "title": "Details"
        }, 
        {
            "location": "/TranslationAlt/#special-chained-translations", 
            "text": "You can also return an alt value that is a python dict. The dict must\ncontain 'type' and 'alt' strings; there are several special types\navailable for different processing requirements.", 
            "title": "Special Chained Translations"
        }, 
        {
            "location": "/TranslationAlt/#out95as95inn", 
            "text": "Do chained translation: use the out-object as inn-object, new\nout-object. \nUse cases:   Detected error in incoming file; use out-object to generate warning\n    email.  Map inputs to standard format, also map standard format to human\n    readable version (eg. html template)\n    Both out-objects are output by Bots and can be sent to same or\n    different channels using channel filtering.\\     # if the first output is not needed to send somewhere, discard it\n    # omit this step and you will get both outputs\n    from bots.botsconfig import *\n    out.ta_info['statust'] = DONE\n\n    # use output of first mapping as input of second mapping\n    return {'type':'out_as_inn','alt':'do_email_translation'}", 
            "title": "out_as_inn"
        }, 
        {
            "location": "/TranslationAlt/#no95check95on95infinite95loop", 
            "text": "Do chained translation: allow many loops with same alt-value. \nNormally, Bots will detect and prevent this, by stopping after 10\niterations of the loop. You are disabling this safety feature, so your\nmapping script will have to handle this correctly to ensure the looping\nis not infinite.        # we MUST have a way to exit the loop!\n    if (some condition):\n        return\n\n    # loop through this mapping multiple times...\n    return {'type':'no_check_on_infinite_loop','alt':'repeat'}", 
            "title": "no_check_on_infinite_loop"
        }, 
        {
            "location": "/TranslationVersions/", 
            "text": "Translation Versions\n\n\nSeveral situations: \n\n\n\n\nsend different versions of messages \n\n\nreceive different versions Note: in real world versions are often so similar\n    that the same mapping script can be used (or a simple if-then can cater\n    for the differences).\n\n\n\n\nSend multiple versions using partners\n\n\nuse the 'topartner' to determine the right version to send.\n\n\n\n\none grammar for in-house message:\n\n\nmyinhouseorder.py\n\n\nthis grammar uses QUERIES to extract 'topartner'.\n\n\n\n\n\n\ngrammars for both versions:\n\n\nORDERSD93AUN\n\n\nORDERSD96AUN\n\n\n\n\n\n\n2 translation rules:\n\n\nfixed-myinhouseorder to edifact-ORDERSD93AUN using mapping\n    script ordersfixed2edifact93.py for topartner=XXX\n\n\nfixed-myinhouseorder to edifact-ORDERSD96AUN using mapping\n    script ordersfixed2edifact93.py for topartern=YYY\n\n\n\n\n\n\n\n\nSend multiple versions using alt\n\n\nInformation about the version is in in-house-message: a field that\ncontains either '93' or '96'.\n\n\n\n\none grammar for in-house message:\n\n\nmyinhouseorder.py\n\n\n\n\n\n\ngrammars for both versions:\n\n\nORDERSD93AUN\n\n\nORDERSD96AUN\n\n\n\n\n\n\n2 translation rules\n\n\nfixed-myinhouseorder to edifact-ORDERSD93AUN using mapping\n    script orders_fixed2edifact93.py for alt=93\n\n\nfixed-myinhouseorder to edifact-ORDERSD96AUN using mapping\n    script orders_fixed2edifact93.py for alt=96\n\n\n\n\n\n\n\n\nReceive multiple versions\n\n\ngrammars for both versions:\n\n\n\n\nORDERSD93AUN\n\n\nORDERSD96AUN\n\n\n\n\none grammar for in-house message:\n\n\n\n\nmyinhouseorder.py\n\n\nthis grammar uses QUERIES to extract 'alt'-value.\n\n\n\n\n2 translation rules\n\n\n\n\n\n\nedifact-ORDERSD93AUN to fixed-myinhouseorder using mapping script\n    orders_edifact93_2_fixed.py\n\n\n\n\n\n\nedifact-ORDERSD6AUN to fixed-myinhouseorder using mapping script\n    orders_edifact96_2_fixed.py", 
            "title": "Multiple versions"
        }, 
        {
            "location": "/TranslationVersions/#translation-versions", 
            "text": "Several situations:    send different versions of messages   receive different versions Note: in real world versions are often so similar\n    that the same mapping script can be used (or a simple if-then can cater\n    for the differences).", 
            "title": "Translation Versions"
        }, 
        {
            "location": "/TranslationVersions/#send-multiple-versions-using-partners", 
            "text": "use the 'topartner' to determine the right version to send.   one grammar for in-house message:  myinhouseorder.py  this grammar uses QUERIES to extract 'topartner'.    grammars for both versions:  ORDERSD93AUN  ORDERSD96AUN    2 translation rules:  fixed-myinhouseorder to edifact-ORDERSD93AUN using mapping\n    script ordersfixed2edifact93.py for topartner=XXX  fixed-myinhouseorder to edifact-ORDERSD96AUN using mapping\n    script ordersfixed2edifact93.py for topartern=YYY", 
            "title": "Send multiple versions using partners"
        }, 
        {
            "location": "/TranslationVersions/#send-multiple-versions-using-alt", 
            "text": "Information about the version is in in-house-message: a field that\ncontains either '93' or '96'.   one grammar for in-house message:  myinhouseorder.py    grammars for both versions:  ORDERSD93AUN  ORDERSD96AUN    2 translation rules  fixed-myinhouseorder to edifact-ORDERSD93AUN using mapping\n    script orders_fixed2edifact93.py for alt=93  fixed-myinhouseorder to edifact-ORDERSD96AUN using mapping\n    script orders_fixed2edifact93.py for alt=96", 
            "title": "Send multiple versions using alt"
        }, 
        {
            "location": "/TranslationVersions/#receive-multiple-versions", 
            "text": "grammars for both versions:   ORDERSD93AUN  ORDERSD96AUN   one grammar for in-house message:   myinhouseorder.py  this grammar uses QUERIES to extract 'alt'-value.   2 translation rules    edifact-ORDERSD93AUN to fixed-myinhouseorder using mapping script\n    orders_edifact93_2_fixed.py    edifact-ORDERSD6AUN to fixed-myinhouseorder using mapping script\n    orders_edifact96_2_fixed.py", 
            "title": "Receive multiple versions"
        }, 
        {
            "location": "/MappingIntroduction/", 
            "text": "Mapping script\n\n\n\n\nDefinition: \nInstructions to get data from incoming edi-message and put it in the outgoing edi-message\n \n\n\n\n\nMapping scripts are python programs.\n\nMapping script are in: \nusersys/mappings/editype/mapping script name.py\n\nWithin a mapping script function main() is called.\n\n\nNotes:\n\n\n\n\nAll\n data in the incoming/outgoing messages are strings.  \n\n\nErrors in a mapping script are caught by Bots and displayed in\n    bots-monitor.  \n\n\nYou can Raise an exception in your mapping script if you encounter an\n    error situation.\n\n\n(Bots>=3.0) if an error is raised in a script, other translations for\n    message in same edi-file will continue.\n\n\n(Bots>=3.0) when an error situation is met in script: you can send\n    specific error-email to responsible people.", 
            "title": "Introduction"
        }, 
        {
            "location": "/MappingIntroduction/#mapping-script", 
            "text": "Definition:  Instructions to get data from incoming edi-message and put it in the outgoing edi-message     Mapping scripts are python programs. \nMapping script are in:  usersys/mappings/editype/mapping script name.py \nWithin a mapping script function main() is called.  Notes:   All  data in the incoming/outgoing messages are strings.    Errors in a mapping script are caught by Bots and displayed in\n    bots-monitor.    You can Raise an exception in your mapping script if you encounter an\n    error situation.  (Bots>=3.0) if an error is raised in a script, other translations for\n    message in same edi-file will continue.  (Bots>=3.0) when an error situation is met in script: you can send\n    specific error-email to responsible people.", 
            "title": "Mapping script"
        }, 
        {
            "location": "/MappingHowMappingWorks/", 
            "text": "How mapping works\n\n\nExample 1\n\n\n#this mapping script maps an incoming edifact message to a fixed record file.\n#bots calls the 'main' function in this mapping script \ndef main(inn,out): \n    #inn: the object for the incoming message; via get() and getloop() the content of the message can be accessed. \n    #out: the object for the outgoing message; via put() and putloop() content is written for\n    this message. ordernumber = inn.get({'BOTSID':'UNH'},{'BOTSID':'BGM','1004':None}) #get the order-number. \n                                                                                       #The order-number is in field '1004' of record BGM.\n                                                                                       #Record BGM is nested under record UNH.\n    out.put({'BOTSID':'HEA','ORDERNUMBER':ordernumber})                                #put the order-number in the outgoing fixed message, field 'ORDERNUMBER' in record HEA.\n\n    #We first did a get(), than a put(). This can be done in one line:\n    out.put({'BOTSID':'HEA','ORDERTYPE':inn.get({'BOTSID':'UNH'},{'BOTSID':'BGM','C002.1001':None})})\n\n    #There can be several dates, all in a DTM record.\n    #The 'qualifier' determines the type of date.\n    #Fetch the dates like this:\n    out.put({'BOTSID':'HEA','ORDERDATE':inn.get({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137','C507.2380':None})})     #get statement ONLY looks for DTM with qualifier 137\n    out.put({'BOTSID':'HEA','DELIVERY\\_DATE':inn.get({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'2','C507.2380':None})})\n    #please note: no looping over the DTM-records, just get the data! \n\n    #The orderlines are in a LIN-recordgroup; so we want each line in its own fixed LIN-record. \n    #start looping the lines (LIN-segments) in the incoming message: \n    for lin in inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}): \n        #write a fixed LIN record: \n        lou = out.putloop({'BOTSID':'HEA'},{'BOTSID':'LIN'}) \n        #Note: in this loop get() is used on the lin-object, and put() is used for the lou-object!\n        lou.put({'BOTSID':'LIN','LINENUMBER':lin.get({'BOTSID':'LIN','1082':None})})\n        lou.put({'BOTSID':'LIN','ARTICLE\\_GTIN':lin.get({'BOTSID':'LIN','C212.7140':None})})\n        lou.put({'BOTSID':'LIN','QUANTITY':lin.get({'BOTSID':'LIN'},{'BOTSID':'QTY','C186.6063':'21','C186.6060':None})})\n\n    #OK, we did the lines, but forgot to map the party's - the parties are before the lines in the incoming message. \n    #No problem, get/put can be done anywhere in the mapping - we are NOT looping the incoming or outgoing message:\n\n    out.put({'BOTSID':'HEA','BUYER\\_ID':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'BY','C082.3039':None})})\n    out.put({'BOTSID':'HEA','SUPPLIER\\_ID':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'SU','C082.3039':None})})\n    out.put({'BOTSID':'HEA','DELIVERYPLACE\\_ID':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'DP','C082.3039':None})})\n\n\n\n\nMpath: query the edi data\n\n\nIn the examples above the data in the edi messages is queried using eg\n\n{'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'BY','C082.3039':None}\n.\n\nThis 'thing' is called a mpath (just a name). Mpath is quite important\nin building a mapping.\n\n\nMore about mpath:\n\n\n\n\nAn mpath consists of one or more python 'dicts' (dictionaries),\n    separated by commas: \ndict1,dict2, dict3\n\n\n'BOTSID' is the record identifier.\n\n\nin get(): 'None' indicates that the value of this field should be\n    returned. All others fields are interpreted as: if field==value.\n\n\nin put(): all name-values are written, but not if one of the values\n    is 'None'. If one of the values is None no values at all are written\n    to outgoing message. This is used in the combined\n    out.put(...inn.get(...)...)-statements.\n     Detailed information about get, getloop, put, putloop is\n    \nhere\n\n\n\n\nNever\n do this (use 2 inn.get's in one out.put):\n\n\nout.put({'BOTSID':'ADD','7747':inn.get('BOTSID':'HEA','name1':None),'7749':inn.get('BOTSID':'HEA','name2':None)})}\n\n\n\nBecause: if either name1 or name2 is not there (empty, None) nothing\nwill be written in this statement.\n\n\nExample 2\n\n\ndef main(inn,out):\n    #The incoming message object (inn) has a dict 'ta_info'. \n    #ta_info contains information from the QUERIES in the grammar;\n    #mostly  envelope data like sender, reciever etc.about the message as specified in the grammar (queries, SUBTRANSLATION). \n    out.put({'BOTSID':'HEA','SENDER':inn.ta_info['frompartner']})\n\n    #The outgoing message object (out) also has a dict ta_info. \n    #You can change it if required. eg. to set topartner:\n    BuyerID = inn.get({'BOTSID':'HEA','BUYER_ID':None})\n    inn.ta_info['topartner'] = BuyerID       #use BuyerID as topartner (when eveloping)\n\n    #Inn-get() either return a value, or 'None'. Look at the next line:\n    out.put({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137','C507.2380':inn.get({'BOTSID':'HEA','ORDERDATE':None})})    \n    #if there is no ORDERDATE in the HEA record, put() receives a 'None'-value. \n    #Nothing will be written to the outgoing message! \n\n    #in the next lines 2 values from the inhouse record are written to the same record:\n    out.put({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'DP','C082.3055':'9','C082.3039':inn.get({'BOTSID':'HEA','DELIVERYPLACE_ID':None})})\n    out.put({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'DP','C058.3036':inn.get({'BOTSID':'HEA','DELIVERYPLACE_NAME':None})})\n    #both the deliveryplace_id and deliveryplace_name are written to a NAD-record with qualifier 'BY .", 
            "title": "How mapping works"
        }, 
        {
            "location": "/MappingHowMappingWorks/#how-mapping-works", 
            "text": "", 
            "title": "How mapping works"
        }, 
        {
            "location": "/MappingHowMappingWorks/#example-1", 
            "text": "#this mapping script maps an incoming edifact message to a fixed record file.\n#bots calls the 'main' function in this mapping script \ndef main(inn,out): \n    #inn: the object for the incoming message; via get() and getloop() the content of the message can be accessed. \n    #out: the object for the outgoing message; via put() and putloop() content is written for\n    this message. ordernumber = inn.get({'BOTSID':'UNH'},{'BOTSID':'BGM','1004':None}) #get the order-number. \n                                                                                       #The order-number is in field '1004' of record BGM.\n                                                                                       #Record BGM is nested under record UNH.\n    out.put({'BOTSID':'HEA','ORDERNUMBER':ordernumber})                                #put the order-number in the outgoing fixed message, field 'ORDERNUMBER' in record HEA.\n\n    #We first did a get(), than a put(). This can be done in one line:\n    out.put({'BOTSID':'HEA','ORDERTYPE':inn.get({'BOTSID':'UNH'},{'BOTSID':'BGM','C002.1001':None})})\n\n    #There can be several dates, all in a DTM record.\n    #The 'qualifier' determines the type of date.\n    #Fetch the dates like this:\n    out.put({'BOTSID':'HEA','ORDERDATE':inn.get({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137','C507.2380':None})})     #get statement ONLY looks for DTM with qualifier 137\n    out.put({'BOTSID':'HEA','DELIVERY\\_DATE':inn.get({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'2','C507.2380':None})})\n    #please note: no looping over the DTM-records, just get the data! \n\n    #The orderlines are in a LIN-recordgroup; so we want each line in its own fixed LIN-record. \n    #start looping the lines (LIN-segments) in the incoming message: \n    for lin in inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}): \n        #write a fixed LIN record: \n        lou = out.putloop({'BOTSID':'HEA'},{'BOTSID':'LIN'}) \n        #Note: in this loop get() is used on the lin-object, and put() is used for the lou-object!\n        lou.put({'BOTSID':'LIN','LINENUMBER':lin.get({'BOTSID':'LIN','1082':None})})\n        lou.put({'BOTSID':'LIN','ARTICLE\\_GTIN':lin.get({'BOTSID':'LIN','C212.7140':None})})\n        lou.put({'BOTSID':'LIN','QUANTITY':lin.get({'BOTSID':'LIN'},{'BOTSID':'QTY','C186.6063':'21','C186.6060':None})})\n\n    #OK, we did the lines, but forgot to map the party's - the parties are before the lines in the incoming message. \n    #No problem, get/put can be done anywhere in the mapping - we are NOT looping the incoming or outgoing message:\n\n    out.put({'BOTSID':'HEA','BUYER\\_ID':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'BY','C082.3039':None})})\n    out.put({'BOTSID':'HEA','SUPPLIER\\_ID':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'SU','C082.3039':None})})\n    out.put({'BOTSID':'HEA','DELIVERYPLACE\\_ID':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'DP','C082.3039':None})})", 
            "title": "Example 1"
        }, 
        {
            "location": "/MappingHowMappingWorks/#mpath-query-the-edi-data", 
            "text": "In the examples above the data in the edi messages is queried using eg {'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'BY','C082.3039':None} . \nThis 'thing' is called a mpath (just a name). Mpath is quite important\nin building a mapping.  More about mpath:   An mpath consists of one or more python 'dicts' (dictionaries),\n    separated by commas:  dict1,dict2, dict3  'BOTSID' is the record identifier.  in get(): 'None' indicates that the value of this field should be\n    returned. All others fields are interpreted as: if field==value.  in put(): all name-values are written, but not if one of the values\n    is 'None'. If one of the values is None no values at all are written\n    to outgoing message. This is used in the combined\n    out.put(...inn.get(...)...)-statements.\n     Detailed information about get, getloop, put, putloop is\n     here   Never  do this (use 2 inn.get's in one out.put):  out.put({'BOTSID':'ADD','7747':inn.get('BOTSID':'HEA','name1':None),'7749':inn.get('BOTSID':'HEA','name2':None)})}  Because: if either name1 or name2 is not there (empty, None) nothing\nwill be written in this statement.", 
            "title": "Mpath: query the edi data"
        }, 
        {
            "location": "/MappingHowMappingWorks/#example-2", 
            "text": "def main(inn,out):\n    #The incoming message object (inn) has a dict 'ta_info'. \n    #ta_info contains information from the QUERIES in the grammar;\n    #mostly  envelope data like sender, reciever etc.about the message as specified in the grammar (queries, SUBTRANSLATION). \n    out.put({'BOTSID':'HEA','SENDER':inn.ta_info['frompartner']})\n\n    #The outgoing message object (out) also has a dict ta_info. \n    #You can change it if required. eg. to set topartner:\n    BuyerID = inn.get({'BOTSID':'HEA','BUYER_ID':None})\n    inn.ta_info['topartner'] = BuyerID       #use BuyerID as topartner (when eveloping)\n\n    #Inn-get() either return a value, or 'None'. Look at the next line:\n    out.put({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137','C507.2380':inn.get({'BOTSID':'HEA','ORDERDATE':None})})    \n    #if there is no ORDERDATE in the HEA record, put() receives a 'None'-value. \n    #Nothing will be written to the outgoing message! \n\n    #in the next lines 2 values from the inhouse record are written to the same record:\n    out.put({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'DP','C082.3055':'9','C082.3039':inn.get({'BOTSID':'HEA','DELIVERYPLACE_ID':None})})\n    out.put({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'DP','C058.3036':inn.get({'BOTSID':'HEA','DELIVERYPLACE_NAME':None})})\n    #both the deliveryplace_id and deliveryplace_name are written to a NAD-record with qualifier 'BY .", 
            "title": "Example 2"
        }, 
        {
            "location": "/MappingGet/", 
            "text": "Get data from incoming message\n\n\nget(mpath)\n\n\nGet 1 field from the incoming message; mpath specifies which field to get.\nReturns: string or, if field not found, None\n\n\n#get the message date from an edifact invoice:\ninn.get({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137','C507.2380':None})\n\n\n\nExplanation: get field C507.2380 from DTM-record if field C507.2005 is\n'137', DTM-record nested under UNH-record.\n\nThe field to retrieve is specified as None.\n\n\ngetnozero(mpath)\n\n\nLike get(), but: return a numeric string not equal to '0', otherwise\nNone.\n\nEg useful in fixed records, where a numeric field is often initialized\nwith zero's.\n\n\ngetloop(mpath)\n\n\nFor looping over repeated records or record groups.\n\nTypical use: loop over article lines in an order.\n\nReturns an object usable with get(); see example.\n\n\n#loop over lines in edifact order:\nfor lin in inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}):\n    linenumber = lin.get({'BOTSID':'LIN','1082':None})\n    articlenumber = lin.get({'BOTSID':'LIN','C212.7140':None})\n    quantity = lin.get({'BOTSID':'LIN'},{'BOTSID':'QTY','C186.6063':'21','C186.6060':None})", 
            "title": "Get from message"
        }, 
        {
            "location": "/MappingGet/#get-data-from-incoming-message", 
            "text": "", 
            "title": "Get data from incoming message"
        }, 
        {
            "location": "/MappingGet/#getmpath", 
            "text": "Get 1 field from the incoming message; mpath specifies which field to get.\nReturns: string or, if field not found, None  #get the message date from an edifact invoice:\ninn.get({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137','C507.2380':None})  Explanation: get field C507.2380 from DTM-record if field C507.2005 is\n'137', DTM-record nested under UNH-record. \nThe field to retrieve is specified as None.", 
            "title": "get(mpath)"
        }, 
        {
            "location": "/MappingGet/#getnozerompath", 
            "text": "Like get(), but: return a numeric string not equal to '0', otherwise\nNone. \nEg useful in fixed records, where a numeric field is often initialized\nwith zero's.", 
            "title": "getnozero(mpath)"
        }, 
        {
            "location": "/MappingGet/#getloopmpath", 
            "text": "For looping over repeated records or record groups. \nTypical use: loop over article lines in an order. \nReturns an object usable with get(); see example.  #loop over lines in edifact order:\nfor lin in inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}):\n    linenumber = lin.get({'BOTSID':'LIN','1082':None})\n    articlenumber = lin.get({'BOTSID':'LIN','C212.7140':None})\n    quantity = lin.get({'BOTSID':'LIN'},{'BOTSID':'QTY','C186.6063':'21','C186.6060':None})", 
            "title": "getloop(mpath)"
        }, 
        {
            "location": "/MappingPut/", 
            "text": "Put data in outgoing message\n\n\nput(mpath)\n\n\nPlaces the field(s)/record(s) as specified in mpath in the outmessage.\n\nReturns: if successful, True, otherwise False.\n\nIf mpath contains None-values (typically because a get() gave no\nresult) nothing is placed in the outmessage, and put() returns False.\n\n\n#put a message date in a edifact message\nout.put({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137','C507.2380':'20070521'})\n\n\n\nExplanation: put date '20070521' in field C507.2380 and code '137' in\nfield C507.2005 of DTM-record; DTM-record is nested under UNH-record.\n\n\nputloop(mpath)\n\n\nUsed to generate repeated records or record groups.\n\nRecommended: only use it as in: \nline = putloop(mpath)\n\nline is used as line.put()\n\nTypical use: generate article lines in an order.\n\nNote: do not use to loop over every record, use put() with the right\nselection.\n\n\n#loop over lines in edifact-order and write them to fixed in-house:\nfor lin in inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}):\n    lou = out.putloop({'BOTSID':'HEA'},{'BOTSID':'LIN'})\n    lou.put({'BOTSID':'LIN','REGEL':lin.get({'BOTSID':'LIN','1082':None})})\n    lou.put({'BOTSID':'LIN','ARTIKEL':lin.get({'BOTSID':'LIN','C212.7140':None})})\n    lou.put({'BOTSID':'LIN','BESTELDAANTAL':lin.get({'BOTSID':'LIN'},\n                {'BOTSID':'QTY','C186.6063':'21','C186.6060':None})})\n\n\n\nWarn: do not use\n\n\nNever\n use 2 inn.get's in one out.put (unless you really know what\nyou are doing ;-)\n\n\nout.put({'BOTSID':'ADD','7747':inn.get('BOTSID':'HEA','name1':None),'7749':inn.get('BOTSID':'HEA','name2':None)})}\n\n\n\nBecause: if either name1 or name2 is not there (empty, None) nothing\nwill be written in this statement.", 
            "title": "Put in message"
        }, 
        {
            "location": "/MappingPut/#put-data-in-outgoing-message", 
            "text": "", 
            "title": "Put data in outgoing message"
        }, 
        {
            "location": "/MappingPut/#putmpath", 
            "text": "Places the field(s)/record(s) as specified in mpath in the outmessage. \nReturns: if successful, True, otherwise False. \nIf mpath contains None-values (typically because a get() gave no\nresult) nothing is placed in the outmessage, and put() returns False.  #put a message date in a edifact message\nout.put({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137','C507.2380':'20070521'})  Explanation: put date '20070521' in field C507.2380 and code '137' in\nfield C507.2005 of DTM-record; DTM-record is nested under UNH-record.", 
            "title": "put(mpath)"
        }, 
        {
            "location": "/MappingPut/#putloopmpath", 
            "text": "Used to generate repeated records or record groups. \nRecommended: only use it as in:  line = putloop(mpath) \nline is used as line.put() \nTypical use: generate article lines in an order. \nNote: do not use to loop over every record, use put() with the right\nselection.  #loop over lines in edifact-order and write them to fixed in-house:\nfor lin in inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}):\n    lou = out.putloop({'BOTSID':'HEA'},{'BOTSID':'LIN'})\n    lou.put({'BOTSID':'LIN','REGEL':lin.get({'BOTSID':'LIN','1082':None})})\n    lou.put({'BOTSID':'LIN','ARTIKEL':lin.get({'BOTSID':'LIN','C212.7140':None})})\n    lou.put({'BOTSID':'LIN','BESTELDAANTAL':lin.get({'BOTSID':'LIN'},\n                {'BOTSID':'QTY','C186.6063':'21','C186.6060':None})})", 
            "title": "putloop(mpath)"
        }, 
        {
            "location": "/MappingPut/#warn-do-not-use", 
            "text": "Never  use 2 inn.get's in one out.put (unless you really know what\nyou are doing ;-)  out.put({'BOTSID':'ADD','7747':inn.get('BOTSID':'HEA','name1':None),'7749':inn.get('BOTSID':'HEA','name2':None)})}  Because: if either name1 or name2 is not there (empty, None) nothing\nwill be written in this statement.", 
            "title": "Warn: do not use"
        }, 
        {
            "location": "/MappingFunction/", 
            "text": "sort(mpath)\n\n\nSorts the incoming message according to certain value.\n\nSorts alphabetically.\n\n\ninn.sort({'BOTSID':'UNH'},{'BOTSID':'LIN','C212.7140':None}) \n#sort article lines by EAN article number (GTIN).\n\n\n\ntransform.useoneof(first get, second get, etc)\n\n\nUse for default values or when data can be in different places in a\nmessage.\n\n\nvalue = transform.useoneof(inn.get({'BOTSID':'IMD','C960.4294':None}),inn.get({'BOTSID':'IMD','7078':None})) \n#returns the result of the first get() that is succesful.\n#remarked was that this is simular to:\nvalue = inn.get({'BOTSID':'IMD','C960.4294':None}) or inn.get({'BOTSID':'IMD','7078':None})\n#Usage for default values (if field not there, use default): \nvalue = inn.get({'BOTSID':'IMD','C960.4294':None}) or 'my value'\n\n\n\ntransform.datemask(value,frommask,tomask)\n\n\nDoes format conversions based upon pattern matching.\n\nEspecially useful for date/time conversion.\n\nNote: only simple pattern matching, without 'intelligence' about\ndate/time.\n\n\ntransform.datemask('09/21/2011','MM/DD/CCYY','YY-MM-DD') \n#returns '11-09-21'\n\n\n\nFunny trick with datamask:\n\n\nprint transform.datemask('201512312359','YYYYmmDD0000','YYYYmmDD0000')\nprint transform.datemask('201512310000','YYYYmmDD0000','YYYYmmDD0000')\nprint transform.datemask('20151231','YYYYmmDD0000','YYYYmmDD0000')\n#returns date always in CCYYmmDDHHMM, if no tiem in original tiem is '0000'\n\n\n\ntransform.concat(\n*\nargs)\n\n\ndo a save concatenate of string.\n\nIf argument is None, nothing is concatenated.\n\n\ntransform.concat('my',None','string') \n#returns 'mystring'\n\n\n\ntransform.sendbotsemail(partner,subject,reporttext)\n\n\nSend a simple email message to any bots partner (in partner-table) from\na mapping script.\n\nMail is sent to all To: and cc: addresses for the partner (but\nsend_mail does not support cc).\n\nEmail parameters are in config/settings.py (EMAIL_HOST, etc).\n\n\ntransform.sendbotsemail('buyerID1','error in messsge','There is an error in message blahblah')\n\n\n\ntransform.unique(domain)\n\n\nReturns counter/unique number.\n\nFor each 'domain' separate counters are used.\n\nCounter start at '1' (at first time you use counter).\n\nThe counter can be changed in \nbots-monitor->SysTasks->view/edit\ncounters\n\n\ntransform.unique('my article line counter') \n#returns a number unique for the domain 'my article line counter'\n\n\n\ntransform.unique_runcounter(domain))\n\n\nReturns counter/unique number during the bots-run.\n\nFor each 'domain' separate counters are used.\n\nCounter start at '1' (at first time you use counter).\n\nIn a next run the counter will start again at '1'.\n\nUseful for eg a message-counter per interchange.  \n\n\ntransform.inn2out(inn,out)\n\n\nUse the incoming message as the outgoing message.\n\nIs useful to translate the message one-on-one to another editype.\n\nExamples:\n\n\n\n\n\n\nedifact to flat file. This is what a lot of translators do.\n\n\n\n\n\n\nx12 to xml. x12 data is translated to xml syntax, semantics are of\n    course still x12\n\n\n\n\n\n\nAnother use: read a edi message, adapt, and write (to same\n    editype/messagetype including changes).", 
            "title": "Div mapping functions"
        }, 
        {
            "location": "/MappingFunction/#sortmpath", 
            "text": "Sorts the incoming message according to certain value. \nSorts alphabetically.  inn.sort({'BOTSID':'UNH'},{'BOTSID':'LIN','C212.7140':None}) \n#sort article lines by EAN article number (GTIN).", 
            "title": "sort(mpath)"
        }, 
        {
            "location": "/MappingFunction/#transformuseoneoffirst-get-second-get-etc", 
            "text": "Use for default values or when data can be in different places in a\nmessage.  value = transform.useoneof(inn.get({'BOTSID':'IMD','C960.4294':None}),inn.get({'BOTSID':'IMD','7078':None})) \n#returns the result of the first get() that is succesful.\n#remarked was that this is simular to:\nvalue = inn.get({'BOTSID':'IMD','C960.4294':None}) or inn.get({'BOTSID':'IMD','7078':None})\n#Usage for default values (if field not there, use default): \nvalue = inn.get({'BOTSID':'IMD','C960.4294':None}) or 'my value'", 
            "title": "transform.useoneof(first get, second get, etc)"
        }, 
        {
            "location": "/MappingFunction/#transformdatemaskvaluefrommasktomask", 
            "text": "Does format conversions based upon pattern matching. \nEspecially useful for date/time conversion. \nNote: only simple pattern matching, without 'intelligence' about\ndate/time.  transform.datemask('09/21/2011','MM/DD/CCYY','YY-MM-DD') \n#returns '11-09-21'  Funny trick with datamask:  print transform.datemask('201512312359','YYYYmmDD0000','YYYYmmDD0000')\nprint transform.datemask('201512310000','YYYYmmDD0000','YYYYmmDD0000')\nprint transform.datemask('20151231','YYYYmmDD0000','YYYYmmDD0000')\n#returns date always in CCYYmmDDHHMM, if no tiem in original tiem is '0000'", 
            "title": "transform.datemask(value,frommask,tomask)"
        }, 
        {
            "location": "/MappingFunction/#transformconcatargs", 
            "text": "do a save concatenate of string. \nIf argument is None, nothing is concatenated.  transform.concat('my',None','string') \n#returns 'mystring'", 
            "title": "transform.concat(*args)"
        }, 
        {
            "location": "/MappingFunction/#transformsendbotsemailpartnersubjectreporttext", 
            "text": "Send a simple email message to any bots partner (in partner-table) from\na mapping script. \nMail is sent to all To: and cc: addresses for the partner (but\nsend_mail does not support cc). \nEmail parameters are in config/settings.py (EMAIL_HOST, etc).  transform.sendbotsemail('buyerID1','error in messsge','There is an error in message blahblah')", 
            "title": "transform.sendbotsemail(partner,subject,reporttext)"
        }, 
        {
            "location": "/MappingFunction/#transformuniquedomain", 
            "text": "Returns counter/unique number. \nFor each 'domain' separate counters are used. \nCounter start at '1' (at first time you use counter). \nThe counter can be changed in  bots-monitor->SysTasks->view/edit\ncounters  transform.unique('my article line counter') \n#returns a number unique for the domain 'my article line counter'", 
            "title": "transform.unique(domain)"
        }, 
        {
            "location": "/MappingFunction/#transformunique95runcounterdomain", 
            "text": "Returns counter/unique number during the bots-run. \nFor each 'domain' separate counters are used. \nCounter start at '1' (at first time you use counter). \nIn a next run the counter will start again at '1'. \nUseful for eg a message-counter per interchange.", 
            "title": "transform.unique_runcounter(domain))"
        }, 
        {
            "location": "/MappingFunction/#transforminn2outinnout", 
            "text": "Use the incoming message as the outgoing message. \nIs useful to translate the message one-on-one to another editype. \nExamples:    edifact to flat file. This is what a lot of translators do.    x12 to xml. x12 data is translated to xml syntax, semantics are of\n    course still x12    Another use: read a edi message, adapt, and write (to same\n    editype/messagetype including changes).", 
            "title": "transform.inn2out(inn,out)"
        }, 
        {
            "location": "/MappingCcode/", 
            "text": "Code conversion\n\n\nBots supports code conversions. The code conversion is done in a mapping script;\nmaintenance for the codes can be done via \nbots-monitor->Configuration->User codes as list\n.\n\n\nThis page contains 3 examples of code conversions:\n\n\n\n\nconvert currency code list.\n\n\nconvert internal article code to buyers article code.\n\n\nconvert internal article code to description.\n\n\n\n\nCode maintenance in GUI\n\n\nFirst configure 2 code lists (\nbots-monitor->Configuration->user codes\nby type\n):\n \n\n Make the code conversions (\nbots-monitor->Configuration->user codes\nas list\n):\n \n\n\nCode conversion in mapping script\n\n\n    import bots.transform as transform\n\n    #convert currency code\n    our_currency_code = inn.get({'BOTSID':'HEA','VALUTA':None})\n    converted_currency_code = transform.ccode('Currency',our_currency_code)\n\n    #convert internal article code to buyers article code:\n    buyer_article_number = transform.ccode('LookupArticleNumber',our_article_number)\n\n    #get description (in field 'attr1') for article\n    description = transform.ccode('LookupArticleNumber',our_article_number,field='attr1')\n\n    #code conversion also works via reverse lookup:\n    our_article_number = transform.reverse_ccode('LookupArticleNumber',buyer_article_number)\n\n\n\nCodeconversion functions\n\n\ntransform.ccode(codelist, value, field, safe)\n\n\nConvert 'value' to value in 'field' using a user-maintained code list.\n\nParameters:\n\n\n\n\ncodelist: codelist as in \nbots-monitor->Configuration->user codes\n    by type\n.\n\n\nvalue to be converted (should be in 'leftcode')\n\n\nfield: the field to lookup (if not specified: 'rightcode')\n\n\n\n\nsafe: if False (default): raise exception when value is in found in\n    codelist. If True: just return 'value'.\n\n\nExample of usage for leftcode to rightcode:\n\n\n    transform.ccode('articles','8712345678906')\n\n\n\nExample of usage for leftcode to attr1:\n\n\n    transform.ccode('articles','8712345678906','attr1')\n\n\n\n\n\n\n\ntransform.reverse_ccode(codelist, value, field)\n\n\nas transform.ccode(), but conversion is from 'rightcode' to 'field'.\n\n\nChanges in codeconversion functions\n\n\nNote: These functions have changed over versions. The old functions are\ndeprecated but still work.\n\n\n\n\n\n\n\n\nbots \n 2.1\n\n\nbots \n 3.0\n\n\nbots \n= 3.0\n\n\n\n\n\n\n\n\n\n\ncodetconversion\n\n\nccode\n\n\nccode\n\n\n\n\n\n\nsafecodetconversion\n\n\nsafe_ccode\n\n\nccode with parameter safe=True\n\n\n\n\n\n\nrcodetconversion\n\n\nreverse_ccode\n\n\nreverse_ccode\n\n\n\n\n\n\nsafercodetconversion\n\n\nsafe_reverse_ccode\n\n\nreverse_ccode with parameter safe=True", 
            "title": "Code conversion"
        }, 
        {
            "location": "/MappingCcode/#code-conversion", 
            "text": "Bots supports code conversions. The code conversion is done in a mapping script;\nmaintenance for the codes can be done via  bots-monitor->Configuration->User codes as list .  This page contains 3 examples of code conversions:   convert currency code list.  convert internal article code to buyers article code.  convert internal article code to description.", 
            "title": "Code conversion"
        }, 
        {
            "location": "/MappingCcode/#code-maintenance-in-gui", 
            "text": "First configure 2 code lists ( bots-monitor->Configuration->user codes\nby type ):\n  \n Make the code conversions ( bots-monitor->Configuration->user codes\nas list ):", 
            "title": "Code maintenance in GUI"
        }, 
        {
            "location": "/MappingCcode/#code-conversion-in-mapping-script", 
            "text": "import bots.transform as transform\n\n    #convert currency code\n    our_currency_code = inn.get({'BOTSID':'HEA','VALUTA':None})\n    converted_currency_code = transform.ccode('Currency',our_currency_code)\n\n    #convert internal article code to buyers article code:\n    buyer_article_number = transform.ccode('LookupArticleNumber',our_article_number)\n\n    #get description (in field 'attr1') for article\n    description = transform.ccode('LookupArticleNumber',our_article_number,field='attr1')\n\n    #code conversion also works via reverse lookup:\n    our_article_number = transform.reverse_ccode('LookupArticleNumber',buyer_article_number)", 
            "title": "Code conversion in mapping script"
        }, 
        {
            "location": "/MappingCcode/#codeconversion-functions", 
            "text": "", 
            "title": "Codeconversion functions"
        }, 
        {
            "location": "/MappingCcode/#transformccodecodelist-value-field-safe", 
            "text": "Convert 'value' to value in 'field' using a user-maintained code list. \nParameters:   codelist: codelist as in  bots-monitor->Configuration->user codes\n    by type .  value to be converted (should be in 'leftcode')  field: the field to lookup (if not specified: 'rightcode')   safe: if False (default): raise exception when value is in found in\n    codelist. If True: just return 'value'.  Example of usage for leftcode to rightcode:      transform.ccode('articles','8712345678906')  Example of usage for leftcode to attr1:      transform.ccode('articles','8712345678906','attr1')", 
            "title": "transform.ccode(codelist, value, field, safe)"
        }, 
        {
            "location": "/MappingCcode/#transformreverse95ccodecodelist-value-field", 
            "text": "as transform.ccode(), but conversion is from 'rightcode' to 'field'.", 
            "title": "transform.reverse_ccode(codelist, value, field)"
        }, 
        {
            "location": "/MappingCcode/#changes-in-codeconversion-functions", 
            "text": "Note: These functions have changed over versions. The old functions are\ndeprecated but still work.     bots   2.1  bots   3.0  bots  = 3.0      codetconversion  ccode  ccode    safecodetconversion  safe_ccode  ccode with parameter safe=True    rcodetconversion  reverse_ccode  reverse_ccode    safercodetconversion  safe_reverse_ccode  reverse_ccode with parameter safe=True", 
            "title": "Changes in codeconversion functions"
        }, 
        {
            "location": "/MappingPartnerLookup/", 
            "text": "Partner look-up (bots>=3.0)\n\n\nOften there is a need to retrieve data from a partner, using a IDpartner. \nThink of: \n-   check if partner is active \n-   get name/address of partner \n-   get senderID for partner \n\n\nRecipe\n\n\nGet the value in field 'attr1' for the IDpartner.\n\nSee partners in \nbots-monitor->Configuration->Partners\n for possible\nfields.\n\n\ntransform.partnerlookup('buyer1','attr1',safe=True)\n\n\n\nCheck if a partner exists, and is active. If not, raise an exception.\n\n\ntransform.partnerlookup('buyer1','active')\n\n\n\n\n\n\n\n\n\nValue for safe\n\n\nIf a record matching your lookup does not exist, or the requested field is empty\n\n\n\n\n\n\n\n\n\n\nsafe=False\n(default)\n\n\nAn exception is raised You can check for this in your script if required and take action\n\n\n\n\n\n\nsafe=True\n\n\nNo exception is raised, just returns the lookup value  eg. to lookup a user defined field for partner translation on some partners\n\n\n\n\n\n\nsafe=None\n(Bots>=3.2)\n\n\nNo exception is raised, returns None eg. to get address lines where not all partners have addresses, but this is not an error\n\n\n\n\n\n\n\n\nLookup using a field other than IDpartner\n\n\nThis is similar to reverse code conversion, but can look up any partner\nfield and return any other partner field. Beware of performance issues\nif you have a large number of partners. Also there may be multiple\nmatches if the lookup is not unique, only one is returned.\n\n\nGet the value in field 'name' by looking up value in 'attr2'.\n\n\ntransform.partnerlookup('my attribute','name','attr2',safe=True)\n\n\n\nNotes\n\n\n\n\n\n\nIn bots\\\n3.0 this was possible using \ncode conversion\n.\n    But this could lead to situations where partners where both in\n    \nbots-monitor->Configuration->Partners \n groups\n and in code\n    conversions.\n\n\n\n\n\n\npartners have more fields in bots>=3.0 like name, address, 'free'\n    fields.", 
            "title": "Partner look-up"
        }, 
        {
            "location": "/MappingPartnerLookup/#partner-look-up-bots6230", 
            "text": "Often there is a need to retrieve data from a partner, using a IDpartner. \nThink of: \n-   check if partner is active \n-   get name/address of partner \n-   get senderID for partner", 
            "title": "Partner look-up (bots>=3.0)"
        }, 
        {
            "location": "/MappingPartnerLookup/#recipe", 
            "text": "Get the value in field 'attr1' for the IDpartner. \nSee partners in  bots-monitor->Configuration->Partners  for possible\nfields.  transform.partnerlookup('buyer1','attr1',safe=True)  Check if a partner exists, and is active. If not, raise an exception.  transform.partnerlookup('buyer1','active')     Value for safe  If a record matching your lookup does not exist, or the requested field is empty      safe=False (default)  An exception is raised You can check for this in your script if required and take action    safe=True  No exception is raised, just returns the lookup value  eg. to lookup a user defined field for partner translation on some partners    safe=None (Bots>=3.2)  No exception is raised, returns None eg. to get address lines where not all partners have addresses, but this is not an error", 
            "title": "Recipe"
        }, 
        {
            "location": "/MappingPartnerLookup/#lookup-using-a-field-other-than-idpartner", 
            "text": "This is similar to reverse code conversion, but can look up any partner\nfield and return any other partner field. Beware of performance issues\nif you have a large number of partners. Also there may be multiple\nmatches if the lookup is not unique, only one is returned.  Get the value in field 'name' by looking up value in 'attr2'.  transform.partnerlookup('my attribute','name','attr2',safe=True)", 
            "title": "Lookup using a field other than IDpartner"
        }, 
        {
            "location": "/MappingPartnerLookup/#notes", 
            "text": "In bots\\ 3.0 this was possible using  code conversion .\n    But this could lead to situations where partners where both in\n     bots-monitor->Configuration->Partners   groups  and in code\n    conversions.    partners have more fields in bots>=3.0 like name, address, 'free'\n    fields.", 
            "title": "Notes"
        }, 
        {
            "location": "/MappingCalculate/", 
            "text": "Calculations and counting in mapping\n\n\nSometimes it is needed to do calculations in mappings.\n\nRealize that the get() functions always return strings, so these\nstrings need to be converted.\n\nAlways convert to python's decimals, this is the \nonly\n way to avoid\nrounding errors. More details: \npythons decimal\ndocumentation\n\n\nExample calculation\n\n\nimport decimal\n\ndef main(inn,out):\n    TOTAL_AMOUNT = decimal.Decimal('0')         #initialize total amount\n    for lin inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}):\n        amount = lin.get({'BOTSID':'LIN'},{'BOTSID':'QTY','1234':None}) \n        TOTAL_AMOUNT += decimal.Decimal(amount)   #add amount to TOTAL_AMOUNT\n\n    #convert TOTAL_AMOUNT back to string, indicating the number of decimals to be used (precision)      \n    total_amount = TOTAL_AMOUNT.quantize(decimal.Decimal('1.00'))   #2 decimals precision\n\n\n\n\nBots version 3.1 has a new method getdecimal(); code above can now be:\n\n\nimport decimal\n\ndef main(inn,out):\n    TOTAL_AMOUNT = decimal.Decimal('0')         #initialize total amount\n    for lin inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}):\n        TOTAL_AMOUNT += lin.getdecimal({'BOTSID':'LIN'},{'BOTSID':'QTY','1234':None})   #add amount to TOTAL_AMOUNT\n\n    #convert TOTAL_AMOUNT back to string, indicating the number of decimals to be used (precision)      \n    total_amount = TOTAL_AMOUNT.quantize(decimal.Decimal('1.00'))   #2 decimals precision\n\n\n\n\nNote: the example above could be done using function getcountsum(), see\nbelow. The recipe above gives you detailed control over the\ncalculation.\n\n\ngetcount()\n\n\nreturns the number of records in the tree or node.\n\ntypically used for UNT-count of segments.\n\n\nout.getcount()\n#returns the numbers of records in outmessage.\n\n\n\n\ngetcountoccurrences(mpath)\n\n\nreturns the number of records selected by mpath.\n\ntypically used to count number of LIN segments.\n\n\nout.getcountoccurrences({'BOTSID':'UNH'},{'BOTSID':'LIN'}) \n#returns the numbers of LIN-records.\n\n\n\n\ngetcountsum(mpath)\n\n\ncounts the totals value as selected by mpath.\n\ntypically used to count total number of ordered articles.\n\n\nout.getcountsum({'BOTSID':'UNH'},{'BOTSID':'LIN'},{'BOTSID':'QTY','C186.6063':'12','C186.6060':None}) \n#returns total number of ordered articles.", 
            "title": "Calculate and count"
        }, 
        {
            "location": "/MappingCalculate/#calculations-and-counting-in-mapping", 
            "text": "Sometimes it is needed to do calculations in mappings. \nRealize that the get() functions always return strings, so these\nstrings need to be converted. \nAlways convert to python's decimals, this is the  only  way to avoid\nrounding errors. More details:  pythons decimal\ndocumentation", 
            "title": "Calculations and counting in mapping"
        }, 
        {
            "location": "/MappingCalculate/#example-calculation", 
            "text": "import decimal\n\ndef main(inn,out):\n    TOTAL_AMOUNT = decimal.Decimal('0')         #initialize total amount\n    for lin inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}):\n        amount = lin.get({'BOTSID':'LIN'},{'BOTSID':'QTY','1234':None}) \n        TOTAL_AMOUNT += decimal.Decimal(amount)   #add amount to TOTAL_AMOUNT\n\n    #convert TOTAL_AMOUNT back to string, indicating the number of decimals to be used (precision)      \n    total_amount = TOTAL_AMOUNT.quantize(decimal.Decimal('1.00'))   #2 decimals precision  Bots version 3.1 has a new method getdecimal(); code above can now be:  import decimal\n\ndef main(inn,out):\n    TOTAL_AMOUNT = decimal.Decimal('0')         #initialize total amount\n    for lin inn.getloop({'BOTSID':'UNH'},{'BOTSID':'LIN'}):\n        TOTAL_AMOUNT += lin.getdecimal({'BOTSID':'LIN'},{'BOTSID':'QTY','1234':None})   #add amount to TOTAL_AMOUNT\n\n    #convert TOTAL_AMOUNT back to string, indicating the number of decimals to be used (precision)      \n    total_amount = TOTAL_AMOUNT.quantize(decimal.Decimal('1.00'))   #2 decimals precision  Note: the example above could be done using function getcountsum(), see\nbelow. The recipe above gives you detailed control over the\ncalculation.", 
            "title": "Example calculation"
        }, 
        {
            "location": "/MappingCalculate/#getcount", 
            "text": "returns the number of records in the tree or node. \ntypically used for UNT-count of segments.  out.getcount()\n#returns the numbers of records in outmessage.", 
            "title": "getcount()"
        }, 
        {
            "location": "/MappingCalculate/#getcountoccurrencesmpath", 
            "text": "returns the number of records selected by mpath. \ntypically used to count number of LIN segments.  out.getcountoccurrences({'BOTSID':'UNH'},{'BOTSID':'LIN'}) \n#returns the numbers of LIN-records.", 
            "title": "getcountoccurrences(mpath)"
        }, 
        {
            "location": "/MappingCalculate/#getcountsummpath", 
            "text": "counts the totals value as selected by mpath. \ntypically used to count total number of ordered articles.  out.getcountsum({'BOTSID':'UNH'},{'BOTSID':'LIN'},{'BOTSID':'QTY','C186.6063':'12','C186.6060':None}) \n#returns total number of ordered articles.", 
            "title": "getcountsum(mpath)"
        }, 
        {
            "location": "/MappingPersist/", 
            "text": "Persist\n\n\nPersist allows to store data for use in other\nmessages/transactions. Use cases: \n\n\n\n\nstore data from an incoming order,\n    and use the data later for DESADV and/or INVOIC. Often the buyer want\n    you to return data in the orders that are hard to store in your internal\n    system. \n\n\nis used in plugin alto_seperate_headers_details:\n    input: 2 csv files, one with headers, one with details lines. This is\n    processed into one document (so the headers and details are merged)\n    using persist. \n\n\n\n\nDetails: \n-   persist data is store in the bots database. \n-   You can store and retrieve 'any' python data (python pickle is used). \n-   bots \n 3.0: storage size (per item) is limited to 1024\n    positions; bots >= 3.0: unlimited. \n-   Parameter 'maxdayspersist' in \nbots.ini\n \n    controls how long the values are kept in bots. This is done using a \n    timestamp for the persisted data. However, the timestamp is not updated \n    if you update the information in the persist database. \n    This can be done via a database trigger. In bots 3.2.0 and later the SQLite database includes this trigger (might be\n    somewhat SQLite specific): \n\n\n    CREATE TRIGGER persist_update AFTER UPDATE OF content ON persist \n    BEGIN \n        UPDATE persist SET ts = datetime('now','localtime') \n        WHERE domein = new.domein and botskey = new.botskey ; \n    END\n\n\n\nExample\n\n\nYou receive orders from buyer 'XXX'. In the order they have a 'reference\nnumber' that has to be returned in ASN's and invoices.\n\n\n#in the order:\nbuyerID = inn.ta_info['frompartner']\npo_number = inn.get({'BOTSID':'ST'},{'BOTSID':'BEG','BEG03':None})\nref_number = inn.get({'BOTSID':'ST'}{'BOTSID':'REF','REF01':'IP','REF02':None})\ntransform.persist_add(buyerID, po_number, ref_number)\n#now this referenced number is in persist; domain is the buyerID, key is the po_number (that will be return eg in invoice)\n\n#in the invoice find the domain and key:\nbuyerID = inn.ta_info['frompartner']     #via QUERIES in invoice in-house grammar\npo_number = inn.get({'BOTSID':'HEADER','PO_NUMBER':None})\n#fetch reference number from persist:\nref_number = transform.persist_lookup(buyerID, po_number)\n\n\n\nfunctions\n\n\ntransform.persist_add(domain, key, value)\n\nAdd value to persist.\n\nIf not possible, eg. because domain-key exists already,\nbotslib.PersistError is raised.\n\n\ntransform.persist_update(domain, key, value)\n\nUpdate the value.\n\nIf domain-key does not exist: does not add it, gives no error.\n\n\ntransform.persist_add_update(domain, key, value)\n\nadd, but if domain-key already exist: update.\n\n\ntransform.persist_lookup(domain, key)\n\nreturns value.\n\nif domain-key does not exist: returns None\n\n\ntransform.persist_delete(domain, key)\n\ndeletes value.\n\nif domain-key does not exits: gives no error.", 
            "title": "Persist (store data)"
        }, 
        {
            "location": "/MappingPersist/#persist", 
            "text": "Persist allows to store data for use in other\nmessages/transactions. Use cases:    store data from an incoming order,\n    and use the data later for DESADV and/or INVOIC. Often the buyer want\n    you to return data in the orders that are hard to store in your internal\n    system.   is used in plugin alto_seperate_headers_details:\n    input: 2 csv files, one with headers, one with details lines. This is\n    processed into one document (so the headers and details are merged)\n    using persist.    Details: \n-   persist data is store in the bots database. \n-   You can store and retrieve 'any' python data (python pickle is used). \n-   bots   3.0: storage size (per item) is limited to 1024\n    positions; bots >= 3.0: unlimited. \n-   Parameter 'maxdayspersist' in  bots.ini  \n    controls how long the values are kept in bots. This is done using a \n    timestamp for the persisted data. However, the timestamp is not updated \n    if you update the information in the persist database. \n    This can be done via a database trigger. In bots 3.2.0 and later the SQLite database includes this trigger (might be\n    somewhat SQLite specific):       CREATE TRIGGER persist_update AFTER UPDATE OF content ON persist \n    BEGIN \n        UPDATE persist SET ts = datetime('now','localtime') \n        WHERE domein = new.domein and botskey = new.botskey ; \n    END", 
            "title": "Persist"
        }, 
        {
            "location": "/MappingPersist/#example", 
            "text": "You receive orders from buyer 'XXX'. In the order they have a 'reference\nnumber' that has to be returned in ASN's and invoices.  #in the order:\nbuyerID = inn.ta_info['frompartner']\npo_number = inn.get({'BOTSID':'ST'},{'BOTSID':'BEG','BEG03':None})\nref_number = inn.get({'BOTSID':'ST'}{'BOTSID':'REF','REF01':'IP','REF02':None})\ntransform.persist_add(buyerID, po_number, ref_number)\n#now this referenced number is in persist; domain is the buyerID, key is the po_number (that will be return eg in invoice)\n\n#in the invoice find the domain and key:\nbuyerID = inn.ta_info['frompartner']     #via QUERIES in invoice in-house grammar\npo_number = inn.get({'BOTSID':'HEADER','PO_NUMBER':None})\n#fetch reference number from persist:\nref_number = transform.persist_lookup(buyerID, po_number)", 
            "title": "Example"
        }, 
        {
            "location": "/MappingPersist/#functions", 
            "text": "transform.persist_add(domain, key, value) \nAdd value to persist. \nIf not possible, eg. because domain-key exists already,\nbotslib.PersistError is raised.  transform.persist_update(domain, key, value) \nUpdate the value. \nIf domain-key does not exist: does not add it, gives no error.  transform.persist_add_update(domain, key, value) \nadd, but if domain-key already exist: update.  transform.persist_lookup(domain, key) \nreturns value. \nif domain-key does not exist: returns None  transform.persist_delete(domain, key) \ndeletes value. \nif domain-key does not exits: gives no error.", 
            "title": "functions"
        }, 
        {
            "location": "/MappingEAN/", 
            "text": "EAN/UCC checkdigits\n\n\nSynonyms: GTIN, ILN, GLN, UPC, EAN, UAC, JAN\n\n\nCan be used for UPC-A, UPC-E, EAN8, EAN13, ITF-14, SSCC/EAN-128 etc.\n\nThese numbers end with a check-digit.\n\n\ntransform.checkean(EAN_number)\n\n\nReturns True is if check-digit is OK, False if not.\n\nWhen not a string with digits, raises botslib.EanError\n\n\n transform.checkean('8712345678906') \n #returns 'True' for this EAN number.\n\n\n\ntransform.addeancheckdigit(EAN_number)\n\n\nReturns EAN number including check digit (adds checkdigit).\n\n\n  transform.addeancheckdigit('871234567890') \n  #returns '8712345678906' for EAN number '871234567890'.\n\n\n\ntransform.calceancheckdigit(EAN_number)\n\n\nReturns the checkdigit-string for a number without check-digit.\\\n\n\n transform.calceancheckdigit('871234567890') \n #returns '6' for EAN number '871234567890'.", 
            "title": "EAN/UCC check digits"
        }, 
        {
            "location": "/MappingEAN/#eanucc-checkdigits", 
            "text": "Synonyms: GTIN, ILN, GLN, UPC, EAN, UAC, JAN  Can be used for UPC-A, UPC-E, EAN8, EAN13, ITF-14, SSCC/EAN-128 etc. \nThese numbers end with a check-digit.", 
            "title": "EAN/UCC checkdigits"
        }, 
        {
            "location": "/MappingEAN/#transformcheckeanean95number", 
            "text": "Returns True is if check-digit is OK, False if not. \nWhen not a string with digits, raises botslib.EanError   transform.checkean('8712345678906') \n #returns 'True' for this EAN number.", 
            "title": "transform.checkean(EAN_number)"
        }, 
        {
            "location": "/MappingEAN/#transformaddeancheckdigitean95number", 
            "text": "Returns EAN number including check digit (adds checkdigit).    transform.addeancheckdigit('871234567890') \n  #returns '8712345678906' for EAN number '871234567890'.", 
            "title": "transform.addeancheckdigit(EAN_number)"
        }, 
        {
            "location": "/MappingEAN/#transformcalceancheckdigitean95number", 
            "text": "Returns the checkdigit-string for a number without check-digit.\\   transform.calceancheckdigit('871234567890') \n #returns '6' for EAN number '871234567890'.", 
            "title": "transform.calceancheckdigit(EAN_number)"
        }, 
        {
            "location": "/MappingChangedelete/", 
            "text": "delete(mpath)\n\n\nDelete(s) the record(s) as specified in mpath in the outmessage \n(and the records 'under' that record).\n\nAfter deletion, searching stops (if more than one records exists for\nthis mpath, only the first one is deleted). For deleting all records\n(repeating records) use getloop() to access the loop, and delete within\nthe loop.\n\nReturns: if successful, True, otherwise False.\n\n\n#delete a message date in a edifact INVOICD96AUNEAN008:\nout.delete({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137'}) \n#delete DTM record where field C507.2005 = '137' ; DTM-record is nested under UNH-record.\n\n#delete all ALC segments in edifact message:\nwhile message.delete({'BOTSID':'UNH'},{'BOTSID':'ALC'}):\n    pass\n\n\n\nNote: If you want to delete a field, you can use the change option and\nput as value \"None\":\n\n\nlot = lin.get({'BOTSID':'line','batchnumber':None})\nif not lot == None:\n    lin.change(where=({'BOTSID':'line','batchnumber':lot},),change={'batchnumber':None})\n#In this case I want to remove a wrong batchnumber from a specific supplier\n\n\n\nchange(where=(mpath),change=mpath)\n\n\nUsed to change an existing record. 'where' identifies the record,\n'change' are the values that will be changed (or added is values do not\nexist) in this record.\n\n\nOnly one record is changed. This is always the last record of the\nwhere-mpath\n\nAfter change, searching stops (if more than one records exists for this\nmpath, only the first one is changed). For changing all records\n(repeating records) use getloop() to access the loop, and change within\nthe loop.\n\n\ninn.change(where=({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'DP'}),change={'3035':'ST'}) \n#changed qualifier 'DP' in NAD record to 'ST'\n\n\n\nNote: where must be a tuple; if you want to change the root of document,\nadd a comma to make it a tuple.\n\n\ninn.change(where=({'BOTSID':'UNH'},),change={'S009.0054':'96A'})\n#                                 ^ note comma here", 
            "title": "Change and delete"
        }, 
        {
            "location": "/MappingChangedelete/#deletempath", 
            "text": "Delete(s) the record(s) as specified in mpath in the outmessage \n(and the records 'under' that record). \nAfter deletion, searching stops (if more than one records exists for\nthis mpath, only the first one is deleted). For deleting all records\n(repeating records) use getloop() to access the loop, and delete within\nthe loop. \nReturns: if successful, True, otherwise False.  #delete a message date in a edifact INVOICD96AUNEAN008:\nout.delete({'BOTSID':'UNH'},{'BOTSID':'DTM','C507.2005':'137'}) \n#delete DTM record where field C507.2005 = '137' ; DTM-record is nested under UNH-record.\n\n#delete all ALC segments in edifact message:\nwhile message.delete({'BOTSID':'UNH'},{'BOTSID':'ALC'}):\n    pass  Note: If you want to delete a field, you can use the change option and\nput as value \"None\":  lot = lin.get({'BOTSID':'line','batchnumber':None})\nif not lot == None:\n    lin.change(where=({'BOTSID':'line','batchnumber':lot},),change={'batchnumber':None})\n#In this case I want to remove a wrong batchnumber from a specific supplier", 
            "title": "delete(mpath)"
        }, 
        {
            "location": "/MappingChangedelete/#changewherempathchangempath", 
            "text": "Used to change an existing record. 'where' identifies the record,\n'change' are the values that will be changed (or added is values do not\nexist) in this record.  Only one record is changed. This is always the last record of the\nwhere-mpath \nAfter change, searching stops (if more than one records exists for this\nmpath, only the first one is changed). For changing all records\n(repeating records) use getloop() to access the loop, and change within\nthe loop.  inn.change(where=({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'DP'}),change={'3035':'ST'}) \n#changed qualifier 'DP' in NAD record to 'ST'  Note: where must be a tuple; if you want to change the root of document,\nadd a comma to make it a tuple.  inn.change(where=({'BOTSID':'UNH'},),change={'S009.0054':'96A'})\n#                                 ^ note comma here", 
            "title": "change(where=(mpath),change=mpath)"
        }, 
        {
            "location": "/GrammarsIntroduction/", 
            "text": "Introduction\n\n\n\n\nDefinition: \nA grammar is a description of an edi-message\n.\n\n    A grammar describes the records, fields, formats etc of an edi file.\n\n    Bots uses grammars to parse, check and generate edi files.\n\n    Grammars files are independent of the editype: a grammar for a csv\n    files looks the same as a grammar for a x12 file.\n\n    Grammar files are in: \nusersys/grammars/editype/grammar name.py\n\\\n\n\n\n\nLearn grammar by example\n\n\nBest way to get the idea of a grammar is to look at the (simple) example\nin the chapter.\n\n\nThis CSV file:\n\n\nHEADER,ordernumber1,buyer1,20120524\nLINE,1,article1,24,description1\nLINE,2,article2,288,\nLINE,3.article3,6,description3\n\n\n\nhas this grammar:\n\n\nfrom bots.botsconfig import *        #always needed\n\nsyntax = {                           #'syntax' section\n'field_sep' : ',',               #specify field separator\n'charset'   : 'utf-8',           #specify character-set\n}\n\nstructure = [                        #'structure' section\n{ID:'HEADER',MIN:1,MAX:999,LEVEL:[   #each order starts with a HEADER record\n{ID:'LINE',MIN:1,MAX:9999},      #nested under the HEADER record are the LINE records, repeat up to 9999 times\n]}\n]\n\nrecorddefs = {                       #'recorddefs' section\n'HEADER':[                           #specify the fields in the HEADER record\n['BOTSID','M',6,'A'],            #BOTSID is for the HEADER tag itself\n['order number', 'M', 17, 'AN'], #for each field specify the format, max length, M(andatory) or C(onditional)\n['buyer ID', 'M', 13, 'AN'],\n['delivery date', 'C', 8, 'AN'],\n],\n'LINE':[\n['BOTSID','M',6,'A'],\n['line number', 'C', 6, 'N'],\n['article number', 'M', 13, 'AN'],\n['quantity', 'M', 20, 'R'],\n['description', 'C', 70, 'R'],\n],\n}\n\n\n\nThe example above is simple, but fully functional.\n\n\nSections of a grammar\n\n\nA grammar file consists of these sections:\n\n\n\n\nsyntax: parameters for the grammar like field separator, merge or\n    not, indent xml, etc.\n\n\nstructure: sequence of records in an edi-message: start-record,\n    nested records, repeats.\n\n\nrecorddefs: fields per record.\n\n\nnextmessage: to split up an edi file to separate messages.\n\n\nnextmessageblock: to split up a cvs-file to messages.\n\n\n\n\nA section can be reused/imported from another grammar file.\n\nPurpose: better maintenance of grammars.\n\nExample: edifact messages from a certain directory use the same\nrecorddefs/segments:\n\n\n from recordsD96AUN import recorddefs\n\n\n\nOne edifact grammar consists of four parts. Example:\n\n\n\n\nedifact.py (contains syntax common to all edifact grammars)\n\n\nenvelope.py (contains envelope structure and recorddefs common to\n    all edifact grammars)\n\n\nrecordsD96AUN.py (contains recorddefs common to all edifact D96A\n    grammars)\n\n\nORDERSD96AUN.py (contains structure specifically for ORDERS D96A)\n\n\n\n\nProblems for some edifact grammars on sourceforge site\n\n\nSometimes you might meet this error for a grammar:\n\n\n\n\nGrammarError: Grammar \"...somewhere...\", in structure: nesting collision detected at record \"etc etc\".\n\nThis is the case eg with INVRPT D96A.\n\nUN says about this that you have to make additional choices in\nmessage; either you make some segments mandatory or leave out some\nsegment groups.\n\nEANCOM did make such choices in their implementation guidelines.\n\nSo: you can not use the grammar directly, edit it according to your\nneeds. This is according to what UN-edifact wants...", 
            "title": "Introduction"
        }, 
        {
            "location": "/GrammarsIntroduction/#introduction", 
            "text": "Definition:  A grammar is a description of an edi-message . \n    A grammar describes the records, fields, formats etc of an edi file. \n    Bots uses grammars to parse, check and generate edi files. \n    Grammars files are independent of the editype: a grammar for a csv\n    files looks the same as a grammar for a x12 file. \n    Grammar files are in:  usersys/grammars/editype/grammar name.py \\", 
            "title": "Introduction"
        }, 
        {
            "location": "/GrammarsIntroduction/#learn-grammar-by-example", 
            "text": "Best way to get the idea of a grammar is to look at the (simple) example\nin the chapter.  This CSV file:  HEADER,ordernumber1,buyer1,20120524\nLINE,1,article1,24,description1\nLINE,2,article2,288,\nLINE,3.article3,6,description3  has this grammar:  from bots.botsconfig import *        #always needed\n\nsyntax = {                           #'syntax' section\n'field_sep' : ',',               #specify field separator\n'charset'   : 'utf-8',           #specify character-set\n}\n\nstructure = [                        #'structure' section\n{ID:'HEADER',MIN:1,MAX:999,LEVEL:[   #each order starts with a HEADER record\n{ID:'LINE',MIN:1,MAX:9999},      #nested under the HEADER record are the LINE records, repeat up to 9999 times\n]}\n]\n\nrecorddefs = {                       #'recorddefs' section\n'HEADER':[                           #specify the fields in the HEADER record\n['BOTSID','M',6,'A'],            #BOTSID is for the HEADER tag itself\n['order number', 'M', 17, 'AN'], #for each field specify the format, max length, M(andatory) or C(onditional)\n['buyer ID', 'M', 13, 'AN'],\n['delivery date', 'C', 8, 'AN'],\n],\n'LINE':[\n['BOTSID','M',6,'A'],\n['line number', 'C', 6, 'N'],\n['article number', 'M', 13, 'AN'],\n['quantity', 'M', 20, 'R'],\n['description', 'C', 70, 'R'],\n],\n}  The example above is simple, but fully functional.", 
            "title": "Learn grammar by example"
        }, 
        {
            "location": "/GrammarsIntroduction/#sections-of-a-grammar", 
            "text": "A grammar file consists of these sections:   syntax: parameters for the grammar like field separator, merge or\n    not, indent xml, etc.  structure: sequence of records in an edi-message: start-record,\n    nested records, repeats.  recorddefs: fields per record.  nextmessage: to split up an edi file to separate messages.  nextmessageblock: to split up a cvs-file to messages.   A section can be reused/imported from another grammar file. \nPurpose: better maintenance of grammars. \nExample: edifact messages from a certain directory use the same\nrecorddefs/segments:   from recordsD96AUN import recorddefs  One edifact grammar consists of four parts. Example:   edifact.py (contains syntax common to all edifact grammars)  envelope.py (contains envelope structure and recorddefs common to\n    all edifact grammars)  recordsD96AUN.py (contains recorddefs common to all edifact D96A\n    grammars)  ORDERSD96AUN.py (contains structure specifically for ORDERS D96A)", 
            "title": "Sections of a grammar"
        }, 
        {
            "location": "/GrammarsIntroduction/#problems-for-some-edifact-grammars-on-sourceforge-site", 
            "text": "Sometimes you might meet this error for a grammar:   GrammarError: Grammar \"...somewhere...\", in structure: nesting collision detected at record \"etc etc\". \nThis is the case eg with INVRPT D96A. \nUN says about this that you have to make additional choices in\nmessage; either you make some segments mandatory or leave out some\nsegment groups. \nEANCOM did make such choices in their implementation guidelines. \nSo: you can not use the grammar directly, edit it according to your\nneeds. This is according to what UN-edifact wants...", 
            "title": "Problems for some edifact grammars on sourceforge site"
        }, 
        {
            "location": "/GrammarsHowToGet/", 
            "text": "How to get grammars\n\n\n\n\nedifact and x12: There are grammars for all edifact and x12 messages \n    \non the bots sourceforge site\n.\n\n\nxml: use command line tool 'bots-xml2botsgrammar.py' to generate a grammar from an xml file. \n    Help for this utility script is provided using parameter -h\n\n\ncsv, fixed etc: use examples in plugins, expand these", 
            "title": "How to get grammars"
        }, 
        {
            "location": "/GrammarsHowToGet/#how-to-get-grammars", 
            "text": "edifact and x12: There are grammars for all edifact and x12 messages \n     on the bots sourceforge site .  xml: use command line tool 'bots-xml2botsgrammar.py' to generate a grammar from an xml file. \n    Help for this utility script is provided using parameter -h  csv, fixed etc: use examples in plugins, expand these", 
            "title": "How to get grammars"
        }, 
        {
            "location": "/GrammarsSyntax/", 
            "text": "Syntax parameters\n\n\nSyntax contains parameters that are used in reading or writing edi-files.\n\nThe complete list of syntax parameters including default values is in\n\nbots/grammars.py\n (in the classes of the editypes).\n\nSyntax is a python dict (dictionary).\n\nExample of syntax parameters:\n\n\nsyntax = { \n        'charset'                  : 'uft-8', #character set is utf-8\n        'checkfixedrecordtooshort' : True,    #check if fixed record is to short\n        'indented'                 : True,    #xml: produced indented output\n        'decimaal'                 : ',',     #decimal sign is ', '\n        }\n\n\n\nSyntax parameters usage and overriding\n\n\nSyntax parameters can be set at different places; these settings\noverride (somewhat luke CSS).\n\nThe order in which overriding is done:\n\n\n\n\ndefault values are in \nbots/grammars.py\n (per editype). Do not\n    change these values!\n\n\nenvelope grammar (eg for x12: \nbots/usersys/grammars/x12/x12.py\n,\n    for edifact: \nbots/usersys/grammars/edifact/edifact.py\n)\\\n\n\nmessage grammar\n\n\nfrompartner grammar (eg in\n    \nbots/usersys/partners/x12/partnerID.py\n)\n\n\ntopartner grammar (eg in \nbots/usersys/partners/x12/partnerID.py\n)\n\n\n\n\nExample 1: edifact charset\n\n\n\n\ndefault value is UNOA\n\n\nvalue in envelope (edifact.py) is UNOA\n\n\nfor invoices: a description is used so the message grammar for\n    invoices has charset UNOC\n\n\nretailer ABC insists on receiving invoices as UNOA, so this is\n    indicated in the topartner grammar.\n\n\n\n\nExample 2: x12 element separator\n\n\n\n\nin grammar.py: 'field_sep':'\n*\n' (bots default value)\n\n\nin x12.py: 'field_sep':'|' (default value company uses when sending\n    x12)\n\n\nretailer ABC insists: 'field_sep':'\\x07' (that is \\a, or BEL)\n\n\n\n\nList of most useful syntax parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nIn or out\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadd_crlfafterrecord_sep\n\n\nOut\n\n\nput \nextra\n character after a record/segment separator. Value: string, typically '\\n' or '\\r\\n'. I use this for x12/edifact while testing: output is better to read. Most partenrs can handles these file, but they are slightly bigger. See also parameter 'indent'.\n\n\n\n\n\n\nacceptspaceinnumfield\n\n\nIn\n\n\nDo not raise error when numeric field contains only spaces but assume value is 0\n\n\n\n\n\n\nallow_lastrecordnotclosedproperly\n\n\nIn\n\n\n(csv) allows last record not to have record separator\n\n\n\n\n\n\ncharset\n\n\nIn\n\n\ncharset to use; (edifact, xml) is overridden by charset-declaration in content.\n\n\n\n\n\n\n\n\n\n\nOut\n\n\n\n\n\n\ncheckcharsetin\n\n\nIn\n\n\nwhat to do for chars not in charset. Possible values 'strict' (gives error) or 'ignore' (skip the characters not in the charset) or 'botsreplace' (replace with char as set in bots.ini; default is space)\n\n\n\n\n\n\ncheckcharsetout\n\n\nOut\n\n\nwhat to do for chars not in charset. Possible values 'strict' (gives error), 'ignore' (skip the characters not in the charset) or 'botsreplace' (replace with char as set in bots.ini; default is space)\n\n\n\n\n\n\ncheckfixedrecordtoolong\n\n\nIn\n\n\n(fixed): warn if record too long. Possible values: True/False, default: True\n\n\n\n\n\n\ncheckfixedrecordtooshort\n\n\nIn\n\n\n(fixed): warn if record too short. Possible values: True/False, default: False\n\n\n\n\n\n\ncheckunknownentities\n\n\nIn/out\n\n\n(xml,JSON) skip unknown attributes/elements (instead of raising an error)\n\n\n\n\n\n\ncontenttype\n\n\nOut\n\n\ncontent-type of translated file; used as mime-envelope of email\n\n\n\n\n\n\ndecimaal\n\n\nIn/Out\n\n\ndecimal point; default is '.'. For edifact: read from UNA-string if present.\n\n\n\n\n\n\nendrecordID\n\n\nIn\n\n\n(fixed) end position of record ID; value: number, default 3. See startrecordID\n\n\n\n\n\n\nenvelope\n\n\nOut\n\n\nenvelope to use; if nothing specified: no envelope - files are just copied/appended. For csv output, use the value 'csvheader' to include a header line with field names.\n\n\n\n\n\n\nenvelope-template\n\n\nOut\n\n\n(template/html) the template for the envelope.\n\n\n\n\n\n\nescape\n\n\nIn/out\n\n\nescape character used. Default: edifact: '?'.\n\n\n\n\n\n\nfield_sep\n\n\nIn/out\n\n\nfield separator. Default: edifact: '+'; csv: ':' x12: '\n')\n\n\n\n\n\n\nforcequote\n\n\nOut\n\n\n(csv) Possible values: 1 (quote only if necessary); 1 (always quote), 2 (quote only alfanum). Default is 1\n\n\n\n\n\n\nforceUNA\n\n\nOut\n\n\n(edifact) Always use UNA-segment in header, even if not needed. Possible values: True, False. Default: False.\n\n\n\n\n\n\nindented\n\n\nOut\n\n\n(xml, json) Indent message for human readability. Nice while testing. Indented messages are syntactically OK, but are much bigger. Possible values: True, False. Default: False. See also add_crlfafterrecord_sep\n\n\n\n\n\n\nmerge\n\n\nOut\n\n\nif merge is True: merge translated messages to one file (for same sender, receiver, messagetype, channel, etc). Related: envelope. Possible values: True, False.\n\n\n\n\n\n\nnamespace_prefixes\n\n\nOut\n\n\n(xml) to over-ride default namespace prefixes (ns0, ns1 etc) for outgoing xml. is a list, consisting of tuples, each tuple consists of prefix and uri. Example: 'namespace_prefixes':[('orders','\nhttp://www.company.com/EDIOrders\n'),]\n\n\n\n\n\n\nnoBOTSID\n\n\nIn/Out\n\n\n(csv) use if records contain no real record ID.\n\n\n\n\n\n\noutput\n\n\nOut\n\n\n(template) values: 'xhtml-strict'\n\n\n\n\n\n\npass_all\n\n\nIn\n\n\n(csv, fixed) if only one recordtype and no nextmessageblock; False: pass record for record to mapping; True: Pass all records to mapping.\n\n\n\n\n\n\nquote_char\n\n\nIn/Out\n\n\n(csv) char used as quote symbol\n\n\n\n\n\n\nrecord_sep\n\n\nIn/out\n\n\nchar used as record separator. Defaults: edifact: ''' (single quote); fixed: '\\n'; x12: '~'\n\n\n\n\n\n\nrecord_sep\n\n\nIn/out\n\n\nchar used as record separator. Defaults: edifact: ''' (single quote); fixed: '\\n'; x12: '~'\n\n\n\n\n\n\nrecord_tag_sep\n\n\nOut\n\n\n(tradacoms) separator used after segment tag. Defaults: '='\n\n\n\n\n\n\nreplacechar\n\n\nOut\n\n\n(x12) if a separator value is found in the data, replace with this character. Default: '' (raise error when separator value in data).\n\n\n\n\n\n\nskip_char\n\n\nIn\n\n\nchar(s) to skip, not interpreted when reading file. Typically '\\n' in edifact.\n\n\n\n\n\n\nskip_firstline\n\n\nIn\n\n\n(csv) skip first line (often contains field names). Possible values: True/False/Integer number of lines to skip, default: False. True skips 1 line.\n\n\n\n\n\n\nstartrecordID\n\n\nIn\n\n\n(fixed) start position of record ID; value: number, default 0. See endrecordID\n\n\n\n\n\n\ntemplate\n\n\nOut\n\n\n(template) Template to use for HTML-output.\n\n\n\n\n\n\ntriad\n\n\nIn\n\n\ntriad (thousands) symbol used (e.g. '1,000,048.35'). If specified, this symbol is skipped when parsing numbers. By default numbers are expected to come without thousands separators.\n\n\n\n\n\n\nversion\n\n\nOut\n\n\n(edifact,x12) version of standard generate. Value: string, typically: '3' in edifact or '004010' for x12.\n\n\n\n\n\n\nwrap_length\n\n\nOut\n\n\nWraps the output to a new line when it exceeds this length. value: number, default 0. Typically used in conjunction with 'add_crlfafterrecord_sep':'' (blank). Note: does not affect envelope of message.", 
            "title": "Syntax parameters"
        }, 
        {
            "location": "/GrammarsSyntax/#syntax-parameters", 
            "text": "Syntax contains parameters that are used in reading or writing edi-files. \nThe complete list of syntax parameters including default values is in bots/grammars.py  (in the classes of the editypes). \nSyntax is a python dict (dictionary). \nExample of syntax parameters:  syntax = { \n        'charset'                  : 'uft-8', #character set is utf-8\n        'checkfixedrecordtooshort' : True,    #check if fixed record is to short\n        'indented'                 : True,    #xml: produced indented output\n        'decimaal'                 : ',',     #decimal sign is ', '\n        }", 
            "title": "Syntax parameters"
        }, 
        {
            "location": "/GrammarsSyntax/#syntax-parameters-usage-and-overriding", 
            "text": "Syntax parameters can be set at different places; these settings\noverride (somewhat luke CSS). \nThe order in which overriding is done:   default values are in  bots/grammars.py  (per editype). Do not\n    change these values!  envelope grammar (eg for x12:  bots/usersys/grammars/x12/x12.py ,\n    for edifact:  bots/usersys/grammars/edifact/edifact.py )\\  message grammar  frompartner grammar (eg in\n     bots/usersys/partners/x12/partnerID.py )  topartner grammar (eg in  bots/usersys/partners/x12/partnerID.py )", 
            "title": "Syntax parameters usage and overriding"
        }, 
        {
            "location": "/GrammarsSyntax/#example-1-edifact-charset", 
            "text": "default value is UNOA  value in envelope (edifact.py) is UNOA  for invoices: a description is used so the message grammar for\n    invoices has charset UNOC  retailer ABC insists on receiving invoices as UNOA, so this is\n    indicated in the topartner grammar.", 
            "title": "Example 1: edifact charset"
        }, 
        {
            "location": "/GrammarsSyntax/#example-2-x12-element-separator", 
            "text": "in grammar.py: 'field_sep':' * ' (bots default value)  in x12.py: 'field_sep':'|' (default value company uses when sending\n    x12)  retailer ABC insists: 'field_sep':'\\x07' (that is \\a, or BEL)", 
            "title": "Example 2: x12 element separator"
        }, 
        {
            "location": "/GrammarsSyntax/#list-of-most-useful-syntax-parameters", 
            "text": "Parameter  In or out  Description      add_crlfafterrecord_sep  Out  put  extra  character after a record/segment separator. Value: string, typically '\\n' or '\\r\\n'. I use this for x12/edifact while testing: output is better to read. Most partenrs can handles these file, but they are slightly bigger. See also parameter 'indent'.    acceptspaceinnumfield  In  Do not raise error when numeric field contains only spaces but assume value is 0    allow_lastrecordnotclosedproperly  In  (csv) allows last record not to have record separator    charset  In  charset to use; (edifact, xml) is overridden by charset-declaration in content.      Out    checkcharsetin  In  what to do for chars not in charset. Possible values 'strict' (gives error) or 'ignore' (skip the characters not in the charset) or 'botsreplace' (replace with char as set in bots.ini; default is space)    checkcharsetout  Out  what to do for chars not in charset. Possible values 'strict' (gives error), 'ignore' (skip the characters not in the charset) or 'botsreplace' (replace with char as set in bots.ini; default is space)    checkfixedrecordtoolong  In  (fixed): warn if record too long. Possible values: True/False, default: True    checkfixedrecordtooshort  In  (fixed): warn if record too short. Possible values: True/False, default: False    checkunknownentities  In/out  (xml,JSON) skip unknown attributes/elements (instead of raising an error)    contenttype  Out  content-type of translated file; used as mime-envelope of email    decimaal  In/Out  decimal point; default is '.'. For edifact: read from UNA-string if present.    endrecordID  In  (fixed) end position of record ID; value: number, default 3. See startrecordID    envelope  Out  envelope to use; if nothing specified: no envelope - files are just copied/appended. For csv output, use the value 'csvheader' to include a header line with field names.    envelope-template  Out  (template/html) the template for the envelope.    escape  In/out  escape character used. Default: edifact: '?'.    field_sep  In/out  field separator. Default: edifact: '+'; csv: ':' x12: ' ')    forcequote  Out  (csv) Possible values: 1 (quote only if necessary); 1 (always quote), 2 (quote only alfanum). Default is 1    forceUNA  Out  (edifact) Always use UNA-segment in header, even if not needed. Possible values: True, False. Default: False.    indented  Out  (xml, json) Indent message for human readability. Nice while testing. Indented messages are syntactically OK, but are much bigger. Possible values: True, False. Default: False. See also add_crlfafterrecord_sep    merge  Out  if merge is True: merge translated messages to one file (for same sender, receiver, messagetype, channel, etc). Related: envelope. Possible values: True, False.    namespace_prefixes  Out  (xml) to over-ride default namespace prefixes (ns0, ns1 etc) for outgoing xml. is a list, consisting of tuples, each tuple consists of prefix and uri. Example: 'namespace_prefixes':[('orders',' http://www.company.com/EDIOrders '),]    noBOTSID  In/Out  (csv) use if records contain no real record ID.    output  Out  (template) values: 'xhtml-strict'    pass_all  In  (csv, fixed) if only one recordtype and no nextmessageblock; False: pass record for record to mapping; True: Pass all records to mapping.    quote_char  In/Out  (csv) char used as quote symbol    record_sep  In/out  char used as record separator. Defaults: edifact: ''' (single quote); fixed: '\\n'; x12: '~'    record_sep  In/out  char used as record separator. Defaults: edifact: ''' (single quote); fixed: '\\n'; x12: '~'    record_tag_sep  Out  (tradacoms) separator used after segment tag. Defaults: '='    replacechar  Out  (x12) if a separator value is found in the data, replace with this character. Default: '' (raise error when separator value in data).    skip_char  In  char(s) to skip, not interpreted when reading file. Typically '\\n' in edifact.    skip_firstline  In  (csv) skip first line (often contains field names). Possible values: True/False/Integer number of lines to skip, default: False. True skips 1 line.    startrecordID  In  (fixed) start position of record ID; value: number, default 0. See endrecordID    template  Out  (template) Template to use for HTML-output.    triad  In  triad (thousands) symbol used (e.g. '1,000,048.35'). If specified, this symbol is skipped when parsing numbers. By default numbers are expected to come without thousands separators.    version  Out  (edifact,x12) version of standard generate. Value: string, typically: '3' in edifact or '004010' for x12.    wrap_length  Out  Wraps the output to a new line when it exceeds this length. value: number, default 0. Typically used in conjunction with 'add_crlfafterrecord_sep':'' (blank). Note: does not affect envelope of message.", 
            "title": "List of most useful syntax parameters"
        }, 
        {
            "location": "/GrammarsStructure/", 
            "text": "Grammar Structure\n\n\n\n\nDefinition: \nthe structure section in a grammar\n    defines the sequence of records in a message.\n\n    A structure is required in a grammar except for template grammars.\n\n    Example of a simple structure:\n\n\n\n\nstructure = [\n{ID:'ENV',MIN:1,MAX:999, LEVEL:[        #envelope record\n    {ID:'HEA',MIN:1,MAX:9999,LEVEL:[    #header record\n        {ID:'LIN',MIN:0,MAX:9999},      #line record\n        ]},\n    ]}\n]\n\n\n\nThe example above should be read as: \n\n\n\n\nENV-record is required; max 999 repeats.\n\n\n\n\n'Nested' under the ENV-record: HEA-record; per ENV max 9999\n  HEA-records; min is 1, so required.\n\n\nPer HEA-record max 9999 LIN-records; the LIN-record is not required (MIN=0).\n\n\n\n\n\n\nExample of a more elaborate structure:\n\n\nstructure = [\n{ID:'ENV',MIN:1,MAX:1, LEVEL:[        #envelope record: max one per file\n    {ID:'HEA',MIN:1,MAX:9999,LEVEL:[  #header record of messageat least one message per ENV, max 9999 messages\n        {ID:'PAR',MIN:2,MAX:10},      #party record\n        {ID:'ALC',MIN:0,MAX:9},       #allowances/charges per message\n        {ID:'LIN',MIN:0,MAX:9999},    #line record\n        ]},\n    {ID:'TRL',MIN:1,MAX:1},           #each ENV record has a trailer record\n    ]}\n]\n\n\n\nA structure consists of\n\n\n\n\nA structure is a nested list of records.\n\n\nEach record is a python dict.\n\n\nper record:\n\n\nID: tag of record.\n\n\nMIN: minimum number of occurrences.\n\n\nMAX: maximum number of occurrences.\n\n\nLEVEL (optional): indicate nested record. The nested records are\n    in a list of records.\n\n\nQUERIES\n (optional)\n\n\nSUBTRANSLATION (optional). Very advanced. Purpose: identify\n    separate messages within within a standard envelope.\n\n\n\n\n\n\n\n\nQUERIES\n\n\nQUERIES in a structure are used to extract values from edi files before\nthe mapping script starts.\n\n\nExample of an structure with QUERIES:\n\n\nstructure = [\n{ID:'ENV',MIN:1,MAX:999,                #envelope record\n    QUERIES:{\n        'frompartner':  {'BOTSID':'ENV','sender':None},   #extract sender from ENV record.\n        'topartner':    {'BOTSID':'ENV','receiver':None}, #extract receiver from ENV record.\n        'testindicator':({'BOTSID':'ENV'},{'BOTSID':'MESSAGE','test':None}), #extract testindicator from 'deeper' level; note that this is in tuple (with brackets).\n        },\n    LEVEL:[         \n    {ID:'HEA',MIN:1,MAX:9999,LEVEL:[    #header record\n        {ID:'LIN',MIN:0,MAX:9999},      #line record\n        ]},\n    ]}\n]\n\n\n\nUse cases of the information extracted by QUERIES:\n\nThink of frompartner, topartner, reference, testindicator etc.\n\n\n\n\n\n\nto choose the right translation (QUERIES can extract frompartner,\n    topartner, alt)\n\n\n\n\n\n\nUpdate the database.\n\n\n\n\n\n\nIn a mapping script this information is \ninn.ta\\_info\n.\n\n\n\n\n\n\ndata in the envelope can be accessed in the mapping.\n\n\n\n\n\n\nOne of the most import uses is the extraction of \nbotskey\n.\n\n\n\n\n\n\nTypical information extracted by QUERIES:\n\n\n\n\nfrompartner\n\n\ntopartner\n\n\nreference\n\n\ntestindicator\n\n\nbotskey\n\n\nalt", 
            "title": "Structure"
        }, 
        {
            "location": "/GrammarsStructure/#grammar-structure", 
            "text": "Definition:  the structure section in a grammar\n    defines the sequence of records in a message. \n    A structure is required in a grammar except for template grammars. \n    Example of a simple structure:   structure = [\n{ID:'ENV',MIN:1,MAX:999, LEVEL:[        #envelope record\n    {ID:'HEA',MIN:1,MAX:9999,LEVEL:[    #header record\n        {ID:'LIN',MIN:0,MAX:9999},      #line record\n        ]},\n    ]}\n]  The example above should be read as:    ENV-record is required; max 999 repeats.   'Nested' under the ENV-record: HEA-record; per ENV max 9999\n  HEA-records; min is 1, so required.  Per HEA-record max 9999 LIN-records; the LIN-record is not required (MIN=0).    Example of a more elaborate structure:  structure = [\n{ID:'ENV',MIN:1,MAX:1, LEVEL:[        #envelope record: max one per file\n    {ID:'HEA',MIN:1,MAX:9999,LEVEL:[  #header record of messageat least one message per ENV, max 9999 messages\n        {ID:'PAR',MIN:2,MAX:10},      #party record\n        {ID:'ALC',MIN:0,MAX:9},       #allowances/charges per message\n        {ID:'LIN',MIN:0,MAX:9999},    #line record\n        ]},\n    {ID:'TRL',MIN:1,MAX:1},           #each ENV record has a trailer record\n    ]}\n]", 
            "title": "Grammar Structure"
        }, 
        {
            "location": "/GrammarsStructure/#a-structure-consists-of", 
            "text": "A structure is a nested list of records.  Each record is a python dict.  per record:  ID: tag of record.  MIN: minimum number of occurrences.  MAX: maximum number of occurrences.  LEVEL (optional): indicate nested record. The nested records are\n    in a list of records.  QUERIES  (optional)  SUBTRANSLATION (optional). Very advanced. Purpose: identify\n    separate messages within within a standard envelope.", 
            "title": "A structure consists of"
        }, 
        {
            "location": "/GrammarsStructure/#queries", 
            "text": "QUERIES in a structure are used to extract values from edi files before\nthe mapping script starts.  Example of an structure with QUERIES:  structure = [\n{ID:'ENV',MIN:1,MAX:999,                #envelope record\n    QUERIES:{\n        'frompartner':  {'BOTSID':'ENV','sender':None},   #extract sender from ENV record.\n        'topartner':    {'BOTSID':'ENV','receiver':None}, #extract receiver from ENV record.\n        'testindicator':({'BOTSID':'ENV'},{'BOTSID':'MESSAGE','test':None}), #extract testindicator from 'deeper' level; note that this is in tuple (with brackets).\n        },\n    LEVEL:[         \n    {ID:'HEA',MIN:1,MAX:9999,LEVEL:[    #header record\n        {ID:'LIN',MIN:0,MAX:9999},      #line record\n        ]},\n    ]}\n]  Use cases of the information extracted by QUERIES: \nThink of frompartner, topartner, reference, testindicator etc.    to choose the right translation (QUERIES can extract frompartner,\n    topartner, alt)    Update the database.    In a mapping script this information is  inn.ta\\_info .    data in the envelope can be accessed in the mapping.    One of the most import uses is the extraction of  botskey .    Typical information extracted by QUERIES:   frompartner  topartner  reference  testindicator  botskey  alt", 
            "title": "QUERIES"
        }, 
        {
            "location": "/GrammarsRecorddefs/", 
            "text": "Recorddefs\n\n\n\n\nDefinition: \nRecorddefs defines the layout of each record.\n \n\n  Recorddefs is required, except for grammars for editypes\n 'templatehtml', 'xmlnocheck', 'jsonnocheck'.\n\n  Recorddefs is a dictionary; key is record ID/tag, value is list of\n  fields.\n\n  There is \nalways\n a field 'BOTSID' in a record; mostly BOTSID is the\n  first field (fixed format is the exception).\n\n\n\n\nSome specifics for different editypes\n\n\n\n\nedifact: record ID is edifact tag (DTM, BGM, etc).\n\n\nX12: record ID is the segment identifier\n\n\nXml: record ID is xml-tag (without angle brackets).\n\n\nFixed: bots has to know where record ID is. Default: first three\n    positions in record; this can be set with syntax parameters\n\n\nCsv: Csv/Excel does not always have a record ID (all records in an\n    edi-file are of the same type). Bots uses the name of the record as\n    BOTSID if you use syntax parameter:\n'noBOTSID':True\n\n\n\n\n\n\n\nFor each field\n\n\nEach field is a list of:\n\n\n\n\nfield ID; has to be unique (bots checks for this).\n\n\nM/C: mandatory or conditional.\n\n\n\n\nlength. Examples:\n\n\n['field name','C', 9, 'A'],       #max length\n['field name','C', (3,9), 'A'],   #min length, max length. Use eg as:\n['field name','C', (9,9), 'A'],   #field length should always be 9\n['field name','C', 8.3, 'N'],     #length max 8 field, must have 3 decimals.\n\n\n\n\n\n\n\nformat. Different per editype. Especially edifact, x12 and tradacoms\n    have their own formatting codes, just use these. For csv, fixed, xml\n    etc no standard formats exists, so bots uses these formats:\n\n\n\n\nA\n (or AN): alphanumeric.\n\n\nAR\n: right aligned alphanumeric (fixed only)\n\n\nN\n: fixed decimals\n\n\nNumeric\n\n\nFixed numbers of decimals. If no decimals are indicated:\n    integer\n\n\nIncoming: format is checked.\n\n\nOutgoing: bots formats this (rounding if needed, add leading\n    zeros)\n\n\n\n\n\n\nNL\n: (for fixed only) as fixed decimals, left aligned,\n    trailing blancs\n\n\nNR\n: (for fixed only) as fixed decimals, right aligned,\n    leading blancs\n\n\nR\n: floating point\n\n\nNumeric\n\n\nMay have any number of decimals\n\n\nBots does no checking of formatting.\n\n\n\n\n\n\nRL\n: (for fixed only) as floating point, left aligned,\n    trailing blancs\n\n\nRR\n: (for fixed only) as floating point, left aligned,\n    leading blancs\n\n\n\n\nI\n: fixed decimals implicit. Example:\n\n\n['field name','C', 8.2, 'I'],   #max 8 long, last 2 positions are decimals; eg for an amount.\n                                #Valid is eg:  12345\n                                #Bots converts this to 123.45 (and vice versa)\n\n\n\n\n\nNumeric\n\n\nFixed number of decimals. Is converted from/to 'normal'\n    amount; rounded if outgoing.\n\n\nThere is no decimal sign in the field, the number of\n    decimals is implicit from the definition. Eg:\n\n\nCan be negative\n\n\nD\n (or DT): date. Either 6 or 8 positions; format YYMMDD or\nCCYYMMDD. Bots checks for valid dates both in- en outgoing.\n\n\nT\n (or TM): time. Either 4 or 6 positions; format HHMM or\nHHMMSS. Bots checks for valid times both in- en outgoing.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComposite fields\n\n\nEdifact, x12 and tradacoms have composite fields. Example:\n\n\n['S005', 'C',                      #composite field\n    [\n    ['S005.0022', 'M', 14, 'AN'],  #subfield nr1\n    ['S005.0025', 'C', 2, 'AN'],   #subfield nr2\n    ]],\n\n\n\nA composite has:\n\n\n\n\nfield ID; has to be unique (bots checks for this).\n\n\nM/C (mandatory/conditional).\n\n\na list of subfields.\n\n\n\n\nNote: Bots requires that each composite ID and sub-field has an\nunique ID. If a composite occurs more than once, do eg like:\n\n\n    ['C090', 'C', [                        #composite contains 2 subfields with same ID\n        ['C090.3286#1', 'M', 70, 'AN'],\n        ['C090.3286#2', 'C', 70, 'AN'],\n        ]],\n    ['C542#1', 'M', [                      #composite occurs twice \n        ['C542.9425#1', 'M', 3, 'AN'],\n        ['C542.9424#1', 'C', 35, 'AN'],\n        ]],\n    ['C542#2', 'C', [                      #composite occurs twice\n        ['C542.9425#2', 'M', 3, 'AN'],\n        ['C542.9424#2', 'C', 35, 'AN'],\n        ]],\n\n\n\nDetails of field format handling\n\n\n\n\nM/C of fields are always checked.\n\n\nmin/max length of field are always checked.\n\n\nnumerical:\n\n\n'-' is accepted both at beginning and end. Bots outputs only\n    leading '-'\n\n\n'+' is accepted at beginning. Bots does not output '+'\n\n\nthousands separators are removed if specified in\n    syntax-parameter 'triad' (see above).\n\n\nBots does not output thousands separators\n\n\ndefault decimal separator is '.'; use syntax-parameter\n    'decimaal' to change this ('decimaal' is Dutch, sorry about\n    that. Noticed to late to change ;-)). Internally bots only\n    uses/accepts decimal point!\n\n\n(incoming) leading zeros are removed\n\n\n(incoming) trailing zeros are kept\n\n\n'.45' is converted to '0.45'.\n\n\n'4.' is converted to '4'.\n\n\nNote that eg edifact numeric lengths do NOT include decimal sign\n    and negative...\n\n\n\n\n\n\n\n\nUtility for positions in fixed records\n\n\nA grammar does not contains the position/offset of each field in a fixed\nrecord, but it sure is useful to have this. Add this code to the bottom\nof the grammar and run/execute the code:\n\n\nif __name__ == \"__main__\":\n    for key, record in recorddefs.items():\n        length = 0\n        for field in record:\n            print '           ', field, '      #pos',length+1, length + field[2]\n            length += field[2]\n        print 'Record',key,'  has length ',length, '\\n'\n\n\n\nSlightly different version - output can be pasted back into grammar\n\n\nif __name__ == \"__main__\":\n    space = 0\n    for key, record in recorddefs.items():\n        for field in record:\n            space = max(space,len(str(field))+1)\n    for key, record in recorddefs.items():\n        length = 0\n        print '    \\'' + key + '\\':['\n        for field in record:\n            print '           ', (str(field) + ',').ljust(space), ' # pos',length+1, '-', length + field[2]\n            length += field[2]\n        print '    ],'", 
            "title": "Recorddefs"
        }, 
        {
            "location": "/GrammarsRecorddefs/#recorddefs", 
            "text": "Definition:  Recorddefs defines the layout of each record.   \n  Recorddefs is required, except for grammars for editypes\n 'templatehtml', 'xmlnocheck', 'jsonnocheck'. \n  Recorddefs is a dictionary; key is record ID/tag, value is list of\n  fields. \n  There is  always  a field 'BOTSID' in a record; mostly BOTSID is the\n  first field (fixed format is the exception).", 
            "title": "Recorddefs"
        }, 
        {
            "location": "/GrammarsRecorddefs/#some-specifics-for-different-editypes", 
            "text": "edifact: record ID is edifact tag (DTM, BGM, etc).  X12: record ID is the segment identifier  Xml: record ID is xml-tag (without angle brackets).  Fixed: bots has to know where record ID is. Default: first three\n    positions in record; this can be set with syntax parameters  Csv: Csv/Excel does not always have a record ID (all records in an\n    edi-file are of the same type). Bots uses the name of the record as\n    BOTSID if you use syntax parameter: 'noBOTSID':True", 
            "title": "Some specifics for different editypes"
        }, 
        {
            "location": "/GrammarsRecorddefs/#for-each-field", 
            "text": "Each field is a list of:   field ID; has to be unique (bots checks for this).  M/C: mandatory or conditional.   length. Examples:  ['field name','C', 9, 'A'],       #max length\n['field name','C', (3,9), 'A'],   #min length, max length. Use eg as:\n['field name','C', (9,9), 'A'],   #field length should always be 9\n['field name','C', 8.3, 'N'],     #length max 8 field, must have 3 decimals.    format. Different per editype. Especially edifact, x12 and tradacoms\n    have their own formatting codes, just use these. For csv, fixed, xml\n    etc no standard formats exists, so bots uses these formats:   A  (or AN): alphanumeric.  AR : right aligned alphanumeric (fixed only)  N : fixed decimals  Numeric  Fixed numbers of decimals. If no decimals are indicated:\n    integer  Incoming: format is checked.  Outgoing: bots formats this (rounding if needed, add leading\n    zeros)    NL : (for fixed only) as fixed decimals, left aligned,\n    trailing blancs  NR : (for fixed only) as fixed decimals, right aligned,\n    leading blancs  R : floating point  Numeric  May have any number of decimals  Bots does no checking of formatting.    RL : (for fixed only) as floating point, left aligned,\n    trailing blancs  RR : (for fixed only) as floating point, left aligned,\n    leading blancs   I : fixed decimals implicit. Example:  ['field name','C', 8.2, 'I'],   #max 8 long, last 2 positions are decimals; eg for an amount.\n                                #Valid is eg:  12345\n                                #Bots converts this to 123.45 (and vice versa)   Numeric  Fixed number of decimals. Is converted from/to 'normal'\n    amount; rounded if outgoing.  There is no decimal sign in the field, the number of\n    decimals is implicit from the definition. Eg:  Can be negative  D  (or DT): date. Either 6 or 8 positions; format YYMMDD or\nCCYYMMDD. Bots checks for valid dates both in- en outgoing.  T  (or TM): time. Either 4 or 6 positions; format HHMM or\nHHMMSS. Bots checks for valid times both in- en outgoing.", 
            "title": "For each field"
        }, 
        {
            "location": "/GrammarsRecorddefs/#composite-fields", 
            "text": "Edifact, x12 and tradacoms have composite fields. Example:  ['S005', 'C',                      #composite field\n    [\n    ['S005.0022', 'M', 14, 'AN'],  #subfield nr1\n    ['S005.0025', 'C', 2, 'AN'],   #subfield nr2\n    ]],  A composite has:   field ID; has to be unique (bots checks for this).  M/C (mandatory/conditional).  a list of subfields.   Note: Bots requires that each composite ID and sub-field has an\nunique ID. If a composite occurs more than once, do eg like:      ['C090', 'C', [                        #composite contains 2 subfields with same ID\n        ['C090.3286#1', 'M', 70, 'AN'],\n        ['C090.3286#2', 'C', 70, 'AN'],\n        ]],\n    ['C542#1', 'M', [                      #composite occurs twice \n        ['C542.9425#1', 'M', 3, 'AN'],\n        ['C542.9424#1', 'C', 35, 'AN'],\n        ]],\n    ['C542#2', 'C', [                      #composite occurs twice\n        ['C542.9425#2', 'M', 3, 'AN'],\n        ['C542.9424#2', 'C', 35, 'AN'],\n        ]],", 
            "title": "Composite fields"
        }, 
        {
            "location": "/GrammarsRecorddefs/#details-of-field-format-handling", 
            "text": "M/C of fields are always checked.  min/max length of field are always checked.  numerical:  '-' is accepted both at beginning and end. Bots outputs only\n    leading '-'  '+' is accepted at beginning. Bots does not output '+'  thousands separators are removed if specified in\n    syntax-parameter 'triad' (see above).  Bots does not output thousands separators  default decimal separator is '.'; use syntax-parameter\n    'decimaal' to change this ('decimaal' is Dutch, sorry about\n    that. Noticed to late to change ;-)). Internally bots only\n    uses/accepts decimal point!  (incoming) leading zeros are removed  (incoming) trailing zeros are kept  '.45' is converted to '0.45'.  '4.' is converted to '4'.  Note that eg edifact numeric lengths do NOT include decimal sign\n    and negative...", 
            "title": "Details of field format handling"
        }, 
        {
            "location": "/GrammarsRecorddefs/#utility-for-positions-in-fixed-records", 
            "text": "A grammar does not contains the position/offset of each field in a fixed\nrecord, but it sure is useful to have this. Add this code to the bottom\nof the grammar and run/execute the code:  if __name__ == \"__main__\":\n    for key, record in recorddefs.items():\n        length = 0\n        for field in record:\n            print '           ', field, '      #pos',length+1, length + field[2]\n            length += field[2]\n        print 'Record',key,'  has length ',length, '\\n'  Slightly different version - output can be pasted back into grammar  if __name__ == \"__main__\":\n    space = 0\n    for key, record in recorddefs.items():\n        for field in record:\n            space = max(space,len(str(field))+1)\n    for key, record in recorddefs.items():\n        length = 0\n        print '    \\'' + key + '\\':['\n        for field in record:\n            print '           ', (str(field) + ',').ljust(space), ' # pos',length+1, '-', length + field[2]\n            length += field[2]\n        print '    ],'", 
            "title": "Utility for positions in fixed records"
        }, 
        {
            "location": "/GrammarsNextmessage/", 
            "text": "Nextmessage\n\n\nThe nextmessage section of a grammar is used to\nsplit the messages in an edi-file; this way a mapping script receives\none message at a time.\n\n\nExample:\n\n\nstructure=    [\n{ID:'ENV',MIN:1,MAX:999,LEVEL:[         #envelope record     \n    {ID:'HEA',MIN:1,MAX:9999,LEVEL:[    #header record\n        {ID:'LIN',MIN:0,MAX:9999},      #line record\n        ]},\n    ]}\n]\n\nnextmessage = ({'BOTSID':'ENV'},{'BOTSID':'HEA'})\n\n\n\nUsing this 'nextmessage' the mapping script receives one HEA-record with\nthe LIN-records under it.\n\n\nThe sender and receiver of the envelope can be accessed via QUERIES.", 
            "title": "Nextmessage"
        }, 
        {
            "location": "/GrammarsNextmessage/#nextmessage", 
            "text": "The nextmessage section of a grammar is used to\nsplit the messages in an edi-file; this way a mapping script receives\none message at a time.  Example:  structure=    [\n{ID:'ENV',MIN:1,MAX:999,LEVEL:[         #envelope record     \n    {ID:'HEA',MIN:1,MAX:9999,LEVEL:[    #header record\n        {ID:'LIN',MIN:0,MAX:9999},      #line record\n        ]},\n    ]}\n]\n\nnextmessage = ({'BOTSID':'ENV'},{'BOTSID':'HEA'})  Using this 'nextmessage' the mapping script receives one HEA-record with\nthe LIN-records under it.  The sender and receiver of the envelope can be accessed via QUERIES.", 
            "title": "Nextmessage"
        }, 
        {
            "location": "/GrammarsNextmessageblock/", 
            "text": "Nextmessageblock\n\n\nThe nextmessageblock section in a grammar is\nmostly used for csv-files consisting of one record-type.\n\n\nThink of excel, where every row has the same layout.\n\n\nVia nextmessageblock all subsequent records with eg the same\nordernumber are passed as one message to the mapping script.\n\n\nThis is best understood by example:\n\n\nThis CSV file:\n\n\nordernumber1,buyer1,20120524,1,article1,24\nordernumber1,buyer1,20120524,2,article2,288\nordernumber1,buyer1,20120524,3.article3,6\nordernumber2,buyer2,20120524,1,article5,124\nordernumber3,buyer1,20120524,1,article1,24\nordernumber3,buyer1,20120524,2,article4,48\n\n\n\nhas this grammar:\n\n\nfrom bots.botsconfig import *\n\nsyntax = { \n    'field_sep' : ',',               #specify field separator\n    'noBOTSID'   : True,             #does not have record-ID's\n    }\n\nnextmessageblock = ({'BOTSID':'HEADER','order number':None})   #feed mapping script with separate orders (where ordernumber is different)\n\nstructure = [             \n{ID:'HEADER',MIN:1,MAX:9999}         #only 1 record-type\n]\n\nrecorddefs = {\n'HEADER':[    \n    ['BOTSID','M',6,'A'],            #Note: BOTSID is ALWAYS needed!\n    ['order number', 'M', 17, 'AN'],\n    ['buyer ID', 'M', 13, 'AN'],\n    ['delivery date', 'C', 8, 'AN'],\n    ['line number', 'C', 6, 'N'],\n    ['article number', 'M', 13, 'AN'],\n    ['quantity', 'M', 20, 'R'],\n    ],\n}\n\n\n\nThe mapping script in the translation receives 3 separate orders (so\nmapping script will run 3 times):\n\n\norder with number 1:\nordernumber1,buyer1,20120524,1,article1,24\nordernumber1,buyer1,20120524,2,article2,288\nordernumber1,buyer1,20120524,3.article3,6\n\norder with number 2:\nordernumber2,buyer2,20120524,1,article5,124\n\norder with number 3:\nordernumber3,buyer1,20120524,1,article1,24\nordernumber3,buyer1,20120524,2,article4,48\n\n\n\nNote 1: Use multiple fields for splitting up (bots > 3.1)\n\n\nExample:\n\n\nnextmessageblock = ([{'BOTSID':'HEADER','order number':None},{'BOTSID':'HEADER','buyer ID':None}])\n\n\n\nNote 2: 'nextmessageblock' works for fixed files with one type of records (bots > 3.1)", 
            "title": "Nextmessageblock"
        }, 
        {
            "location": "/GrammarsNextmessageblock/#nextmessageblock", 
            "text": "The nextmessageblock section in a grammar is\nmostly used for csv-files consisting of one record-type.  Think of excel, where every row has the same layout.  Via nextmessageblock all subsequent records with eg the same\nordernumber are passed as one message to the mapping script.  This is best understood by example:  This CSV file:  ordernumber1,buyer1,20120524,1,article1,24\nordernumber1,buyer1,20120524,2,article2,288\nordernumber1,buyer1,20120524,3.article3,6\nordernumber2,buyer2,20120524,1,article5,124\nordernumber3,buyer1,20120524,1,article1,24\nordernumber3,buyer1,20120524,2,article4,48  has this grammar:  from bots.botsconfig import *\n\nsyntax = { \n    'field_sep' : ',',               #specify field separator\n    'noBOTSID'   : True,             #does not have record-ID's\n    }\n\nnextmessageblock = ({'BOTSID':'HEADER','order number':None})   #feed mapping script with separate orders (where ordernumber is different)\n\nstructure = [             \n{ID:'HEADER',MIN:1,MAX:9999}         #only 1 record-type\n]\n\nrecorddefs = {\n'HEADER':[    \n    ['BOTSID','M',6,'A'],            #Note: BOTSID is ALWAYS needed!\n    ['order number', 'M', 17, 'AN'],\n    ['buyer ID', 'M', 13, 'AN'],\n    ['delivery date', 'C', 8, 'AN'],\n    ['line number', 'C', 6, 'N'],\n    ['article number', 'M', 13, 'AN'],\n    ['quantity', 'M', 20, 'R'],\n    ],\n}  The mapping script in the translation receives 3 separate orders (so\nmapping script will run 3 times):  order with number 1:\nordernumber1,buyer1,20120524,1,article1,24\nordernumber1,buyer1,20120524,2,article2,288\nordernumber1,buyer1,20120524,3.article3,6\n\norder with number 2:\nordernumber2,buyer2,20120524,1,article5,124\n\norder with number 3:\nordernumber3,buyer1,20120524,1,article1,24\nordernumber3,buyer1,20120524,2,article4,48", 
            "title": "Nextmessageblock"
        }, 
        {
            "location": "/GrammarsNextmessageblock/#note-1-use-multiple-fields-for-splitting-up-bots-62-31", 
            "text": "Example:  nextmessageblock = ([{'BOTSID':'HEADER','order number':None},{'BOTSID':'HEADER','buyer ID':None}])", 
            "title": "Note 1: Use multiple fields for splitting up (bots > 3.1)"
        }, 
        {
            "location": "/GrammarsNextmessageblock/#note-2-nextmessageblock-works-for-fixed-files-with-one-type-of-records-bots-62-31", 
            "text": "", 
            "title": "Note 2: 'nextmessageblock' works for fixed files with one type of records (bots > 3.1)"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/", 
            "text": "Partner dependent syntax\n\n\nFor outgoing messages it is possible to specify a partner dependent syntax.\n\nThis is especially useful for x12 and edifact, for setting envelope\nvalues and partner specific separators.\n\nThese parameters override the settings in the message grammar; you only\nneed to specify the partner-specific parameters.\n\nNote: no need to set partner specific separators for incoming messages;\nbots will figure this out by itself.\n\nTo set partner specific syntax parameters, create according to editype\nused:\n\n\n\n\nbots/usersys/partners/x12/partnerid.py\n\n\nbots/usersys/partners/edifact/partnerid.py\n\n\n\n\nExample file with partner specific setting (x12):\n\n\n\n\nsyntax = {\n'ISA05'                  : 'XX',    #use different communication qualifier for sender\n'ISA07'                  : 'ZZ',    #use different communication qualifier for receiver\n'field_sep'              : '|',     #use different field separator\n}\n\n\n\n\n\nExample file with partner specific setting (edifact):\n\n\n\n\nsyntax = {\n'merge':False,\n'forceUNA':True,\n'UNB.S002.0007':'ZZ',        # partner qualifier\n'UNB.S003.0007':'ZZ',        # partner qualifier\n}\n\n\n\n\n\nPlugin\n\n\nPlugin 'demo_partnerdependent' at \nthe bots sourceforge\nsite\n demonstrates\npartner dependent syntax.\n\n\nRelevant x12 syntax settings\n\n\n\n\n\n\n\n\nName\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nISA05\n\n\n01\n\n\nInterchange ID Sender Qualifier\n\n\n\n\n\n\nISA07\n\n\n01\n\n\nInterchange ID Receiver Qualifier\n\n\n\n\n\n\nISA15\n\n\nP\n\n\nTestindicator: P(roduction) or T(est); mostly set per message/transaction.\n\n\n\n\n\n\nGS07\n\n\nX\n\n\nResponsible Agency Code\n\n\n\n\n\n\nversion\n\n\n00403\n\n\nAs ISA12\n\n\n\n\n\n\nfunctionalgroup\n\n\n\n\nAs GS01; set this for each x12 messagetype\n\n\n\n\n\n\nrecord_sep\n\n\n~\n\n\nSegment terminator.\n\n\n\n\n\n\nfield_sep\n\n\n*\n\n\n\n\n\n\n\n\nsfield_sep\n\n\n>\n\n\nSub-field separator (in composites).\n\n\n\n\n\n\nmerge\n\n\nTrue\n\n\nMerge messages to envelopes (False: no merging, only envelope).\n\n\n\n\n\n\nadd_crlfafterrecord_sep\n\n\n\\r\\n\n\n\nAdds CR/LF after each segment.\n\n\n\n\n\n\n\n\nRelevant edifact syntax settings\n\n\n\n\n\n\n\n\nName\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUNB.S002.0007\n\n\n14\n\n\nIdentification code qualifier\n\n\n\n\n\n\nUNB.S002.0008\n\n\n\n\nInterchange sender internal identification\n\n\n\n\n\n\nUNB.S002.0042\n\n\n\n\nInterchange sender internal sub-identification\n\n\n\n\n\n\nUNB.S003.0007\n\n\n14\n\n\nIdentification code qualifier\n\n\n\n\n\n\nUNB.S003.0014\n\n\n\n\nInterchange recipient internal identification\n\n\n\n\n\n\nUNB.S003.0046\n\n\n\n\nInterchange recipient internal sub-identification\n\n\n\n\n\n\nUNB.S005.0022\n\n\n\n\nRecipient reference/password\n\n\n\n\n\n\nUNB.S005.0025\n\n\n\n\nRecipient reference/password qualifier\n\n\n\n\n\n\nUNB.0026\n\n\n\n\nApplication reference\n\n\n\n\n\n\nUNB.0029\n\n\n\n\nProcessing priority code\n\n\n\n\n\n\nUNB.0031\n\n\n\n\nAcknowledgement request\n\n\n\n\n\n\nUNB.0032\n\n\n\n\nInterchange agreement identifier (eg. EANCOM)\n\n\n\n\n\n\nUNB.0035\n\n\n0\n\n\nTestindicator. Mostly set per message.\n\n\n\n\n\n\ncharset\n\n\nUNOA\n\n\nAs S001.0001\n\n\n\n\n\n\nversion\n\n\n3\n\n\nAs S001.0002\n\n\n\n\n\n\nmerge\n\n\nTrue\n\n\nMerge messages to envelopes (False: no merging, only envelope).\n\n\n\n\n\n\nforceUNA\n\n\nFalse\n\n\nAlways use UNA in outgoing edifact, even if not strictly needed.\n\n\n\n\n\n\nadd_crlfafterrecord_sep\n\n\n\\r\\n\n\n\nAdds CR/LF after each segment.", 
            "title": "Partner dependent syntax"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/#partner-dependent-syntax", 
            "text": "For outgoing messages it is possible to specify a partner dependent syntax. \nThis is especially useful for x12 and edifact, for setting envelope\nvalues and partner specific separators. \nThese parameters override the settings in the message grammar; you only\nneed to specify the partner-specific parameters. \nNote: no need to set partner specific separators for incoming messages;\nbots will figure this out by itself. \nTo set partner specific syntax parameters, create according to editype\nused:   bots/usersys/partners/x12/partnerid.py  bots/usersys/partners/edifact/partnerid.py   Example file with partner specific setting (x12):   syntax = {\n'ISA05'                  : 'XX',    #use different communication qualifier for sender\n'ISA07'                  : 'ZZ',    #use different communication qualifier for receiver\n'field_sep'              : '|',     #use different field separator\n}   Example file with partner specific setting (edifact):   syntax = {\n'merge':False,\n'forceUNA':True,\n'UNB.S002.0007':'ZZ',        # partner qualifier\n'UNB.S003.0007':'ZZ',        # partner qualifier\n}", 
            "title": "Partner dependent syntax"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/#plugin", 
            "text": "Plugin 'demo_partnerdependent' at  the bots sourceforge\nsite  demonstrates\npartner dependent syntax.", 
            "title": "Plugin"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/#relevant-x12-syntax-settings", 
            "text": "Name  Default  Description      ISA05  01  Interchange ID Sender Qualifier    ISA07  01  Interchange ID Receiver Qualifier    ISA15  P  Testindicator: P(roduction) or T(est); mostly set per message/transaction.    GS07  X  Responsible Agency Code    version  00403  As ISA12    functionalgroup   As GS01; set this for each x12 messagetype    record_sep  ~  Segment terminator.    field_sep  *     sfield_sep  >  Sub-field separator (in composites).    merge  True  Merge messages to envelopes (False: no merging, only envelope).    add_crlfafterrecord_sep  \\r\\n  Adds CR/LF after each segment.", 
            "title": "Relevant x12 syntax settings"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/#relevant-edifact-syntax-settings", 
            "text": "Name  Default  Description      UNB.S002.0007  14  Identification code qualifier    UNB.S002.0008   Interchange sender internal identification    UNB.S002.0042   Interchange sender internal sub-identification    UNB.S003.0007  14  Identification code qualifier    UNB.S003.0014   Interchange recipient internal identification    UNB.S003.0046   Interchange recipient internal sub-identification    UNB.S005.0022   Recipient reference/password    UNB.S005.0025   Recipient reference/password qualifier    UNB.0026   Application reference    UNB.0029   Processing priority code    UNB.0031   Acknowledgement request    UNB.0032   Interchange agreement identifier (eg. EANCOM)    UNB.0035  0  Testindicator. Mostly set per message.    charset  UNOA  As S001.0001    version  3  As S001.0002    merge  True  Merge messages to envelopes (False: no merging, only envelope).    forceUNA  False  Always use UNA in outgoing edifact, even if not strictly needed.    add_crlfafterrecord_sep  \\r\\n  Adds CR/LF after each segment.", 
            "title": "Relevant edifact syntax settings"
        }, 
        {
            "location": "/ConfigurationCharset/", 
            "text": "edifact character-sets (UNOA, UNOB, etc)\n\n\nEdifact uses its own naming of character-sets.\n\nAnd some character-sets quite typical or old.\n\n\nBots has 2 ways of supporting these edifact character-sets:\n\n\n\n\nvia specific character-sets UNOA and UNOB in \nbots/usersys/charsets\n\n\nin bots.ini aliases are giving for edifact character-sets, eg:\n    UNOC=latin1=iso8859-1\n\n\n\n\nThere are some problems with character-sets UNOA and UNOB:\n\n\n\n\nthis is not always handle correct by some, eg they send UNOA with\n    lower-case characters.\n\n\nin practice often is send; officially these are not in UNOA or\n    UNOB.\n\n\netc\n\n\n\n\nA default bots installation includes by default the UNOA and UNOB\ncharacter set. These are not strict interpreted, but 'tuned to reality',\nso that they will not often lead to problems.\n\n\nIn the download 'charsetvariations' on \nsourceforge\nsite\n\nare some variations on these character-sets (stricter, less strict).\nRead the comments in these files first.", 
            "title": "Edifact charsets"
        }, 
        {
            "location": "/ConfigurationCharset/#edifact-character-sets-unoa-unob-etc", 
            "text": "Edifact uses its own naming of character-sets. \nAnd some character-sets quite typical or old.  Bots has 2 ways of supporting these edifact character-sets:   via specific character-sets UNOA and UNOB in  bots/usersys/charsets  in bots.ini aliases are giving for edifact character-sets, eg:\n    UNOC=latin1=iso8859-1   There are some problems with character-sets UNOA and UNOB:   this is not always handle correct by some, eg they send UNOA with\n    lower-case characters.  in practice often is send; officially these are not in UNOA or\n    UNOB.  etc   A default bots installation includes by default the UNOA and UNOB\ncharacter set. These are not strict interpreted, but 'tuned to reality',\nso that they will not often lead to problems.  In the download 'charsetvariations' on  sourceforge\nsite \nare some variations on these character-sets (stricter, less strict).\nRead the comments in these files first.", 
            "title": "edifact character-sets (UNOA, UNOB, etc)"
        }, 
        {
            "location": "/XMLnamespace/", 
            "text": "XML namespaces\n\n\nhttp://www.w3schools.com/xml/xml_namespaces.asp\n\n\nbased on mailing list topics\n\nhere\n\nand \nhere\n \n\n\nDealing with xml namespaces can be a bit difficult in Bots. They can greatly\ncomplicate grammars and mappings. Often your EDI partner will want to\nsend or receive XML with namespaces, but actually Bots does not need (or\nwant) them as there are rarely any naming conflicts within a single XML\nfile! \n\n\nWhere an XML file has only one namespace, usually the \"default\"\nnamespace is used.\n\neg. \nxmlns=\"schemas-hiwg-org-au:EnvelopeV1.0\n \n\n\nIf the file has multiple namespaces, then namespace prefixes are used. \nThese prefixes can be any value.\n\neg. \nxmlns:ENV=\"schemas-hiwg-org-au:EnvelopeV1.0\"\n \n\n\nThere are several ways to deal with namespaces in Bots:\n\n\n1. Ignore incoming XML namespace\n\n\nFor incoming XML files that are to be mapped into something else, you\nprobably don't need the namespaces at all. In my opinion this is the\n\"best\" way. See \nIgnore incoming XML\nnamespace\n\nfor an example preprocessing script to achieve this.\n\n\n2. Use incoming XML namespace\n\n\nWhen a namespace must be used, it is needed in many places (structure,\nrecorddefs, mapping) but you want to specify the namespace string, which\ncan be quite long, only in one place \n\n(DRY principle)\n. \nThis has several benefits:\n\n\n\n\nIf it needs to change, this is easy to do in one place only\n\n\ngrammar and mapping will be smaller, and look neater\n\n\n\n\nFor example, the incoming XML file may look like ...\n\n\n?xml version=\"1.0\"?\n\n\nOrders xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n     xmlns=\"http://www.company.com/EDIOrders\"\n     targetNamespace=\"http//www.company.com/EDIOrders\"\n\n      \nOrder\n\n        \nOrderNumber\n239062415\n/OrderNumber\n\n        \nDateOrdered\n2014-02-24\n/DateOrdered\n\n        \nLineCount\n10\n/LineCount\n\netc...\n\n\n\nIf you created your grammar with xml2botsgrammar, it probably has the\nnamespace repeated over and over in structure and recorddefs, like\nthis...\n\n\nstructure=    [\n{ID:'{http://www.company.com/EDIOrders}Orders',MIN:1,MAX:1,LEVEL:[\n    {ID:'{http://www.company.com/EDIOrders}Order',MIN:1,MAX:99999,\n        QUERIES:{\n             'botskey':      {'BOTSID':'{http://www.company.com/EDIOrders}Order','{http://www.company.com/EDIOrders}OrderNumber':None},\n            },\n        LEVEL:[\n        {ID:'{http://www.company.com/EDIOrders}OrderItems',MIN:0,MAX:1,LEVEL:[\n            {ID:'{http://www.company.com/EDIOrders}OrderLine',MIN:1,MAX:99999},\n            ]},\n        ]},\n    ]}\n]\n\nrecorddefs = {\n   '{http://www.company.com/EDIOrders}Orders':[\n            ['BOTSID','M',256,'A'],\n            ['{http://www.company.com/EDIOrders}Orders__targetNamespace','C',256,'AN'],\n          ],\n   '{http://www.company.com/EDIOrders}Order':[\n            ['BOTSID','M',256,'A'],\n            ['{http://www.company.com/EDIOrders}OrderNumber','C', 20,'AN'],\n            ['{http://www.company.com/EDIOrders}DateOrdered','C', 10,'AN'],\n            ['{http://www.company.com/EDIOrders}LineCount','C', 5,'R'],\n\n# etc...\n\n\n\nSo, we want to improve this. In your grammar, first add the namespace as\na string constant. This is the only place it should be specified, and\neverywhere else refers to it.\n\n\nNote: If the XML has multiple namespaces, you can use the same\ntechnique and just add more constants (xmlns1, xmlns2, etc).\n\nAlso include it in the syntax dict. This allows us to reference it\nlater in mappings.\n\n\nxmlns='{http://www.company.com/EDIOrders}'\n\nsyntax = {\n        'xmlns':xmlns,\n}\n\n\n\nIn your grammar, replace all instances of the namespace string with the\nconstant, so it looks like this...\n\n\nstructure=    [\n{ID:xmlns+'Orders',MIN:1,MAX:1,LEVEL:[\n    {ID:xmlns+'Order',MIN:1,MAX:99999,\n        QUERIES:{\n             'botskey':      {'BOTSID':xmlns+'Order',xmlns+'OrderNumber':None},\n            },\n        LEVEL:[\n        {ID:xmlns+'OrderItems',MIN:0,MAX:1,LEVEL:[\n            {ID:xmlns+'OrderLine',MIN:1,MAX:99999},\n            ]},\n        ]},\n    ]}\n]\n\nrecorddefs = {\n   xmlns+'Orders':[\n            ['BOTSID','M',256,'A'],\n            [xmlns+'Orders__targetNamespace','C',256,'AN'],\n          ],\n   xmlns+'Order':[\n            ['BOTSID','M',256,'A'],\n            [xmlns+'OrderNumber','C', 20,'AN'],\n            [xmlns+'DateOrdered','C', 10,'AN'],\n            [xmlns+'LineCount','C', 5,'R'],\n\n# etc...\n\n\n\nNow in the mapping script, read the xmlns value from grammar.\n\n\nimport bots.grammar as grammar\n\n    xmlns = grammar.grammarread('xml',inn.ta_info['messagetype']).syntax['xmlns']\n\n\n\nThen use it wherever needed in the mapping, like this...\\\n\n\n    # Get OrderNumber from XML with namespace\n    OrderNumber = inn.get({'BOTSID':xmlns+'Order',xmlns+'OrderNumber':None})\n\n\n\n3. Outgoing XML with only a default namespace\n\n\nThis can be done by defining xmlns as a tag, and setting it in mapping.\nIt eliminates the need to use namespace prefix on every record and\nfield.\n\nexample grammar\n\n\nrecorddefs = {\n    'shipment':\n        [\n        ['BOTSID', 'M', 20, 'AN'],\n        ['shipment__xmlns', 'C', 80, 'AN'],   # xmlns is added as a tag (note double underscore)\n        ['ediCustomerNumber', 'M', 12, 'N'],\n        ['ediParm1', 'M', 1, 'N'],\n        ['ediParm2', 'M', 1, 'AN'],\n        ['ediParm3', 'M', 1, 'AN'],\n        ['ediReference', 'M', 35, 'AN'],\n        ['ediFunction1', 'M', 3, 'AN'],\n        ['ediCustomerSearchName', 'M', 20, 'AN'],\n        ],\n}\n\n\n\nexample mapping\n\n\n    # xmlns tag for shipment\n    out.put({'BOTSID':'shipment','shipment__xmlns':'http://www.company.com/logistics/shipment'})\n\n\n\nexample output\n\n\n?xml version=\"1.0\" encoding=\"utf-8\" ?\n\n\nshipment xmlns=\"http://www.company.com/logistics/shipment\"\n\n    \nediCustomerNumber\n191\n/ediCustomerNumber\n\n    \nediParm1\n4\n/ediParm1\n\n    \nediParm2\ns\n/ediParm2\n\n    \nediParm3\nd\n/ediParm3\n\n    \nediReference\nSCN1022164911\n/ediReference\n\n    \nediFunction1\n9\n/ediFunction1\n\n    \nediCustomerSearchName\nSCHA\n/ediCustomerSearchName\n\n\n/shipment\n\n\n\n\n4. Outgoing XML with default namespace prefixes (ns0, ns1, etc)\n\n\nThis is the default behaviour of the python elementtree module used in\nBots.\n The actual prefix used is not important to XML meaning, so in\ntheory your EDI partners should not care what prefixes you use.\n\n\nexample grammar\n\n\nxmlns_env='{schemas-hiwg-org-au:EnvelopeV1.0}'\nxmlns='{schemas-hiwg-org-au:InvoiceV3.0}'\n\nsyntax = {\n        'xmlns_env':xmlns_env,\n        'xmlns':xmlns,\n        'merge':False,\n        'indented':True,\n}\n\nnextmessage = ({'BOTSID':xmlns_env+'Envelope'},{'BOTSID':'Documents'},{'BOTSID':xmlns+'Invoice'})\n\nstructure = [\n{ID:xmlns_env+'Envelope',MIN:0,MAX:99999,\n    QUERIES:{\n        'frompartner':{'BOTSID':xmlns_env+'Envelope',xmlns_env+'SenderID':None},\n        'topartner':{'BOTSID':xmlns_env+'Envelope',xmlns_env+'RecipientID':None},\n        },\n    LEVEL:[\n    {ID:'Documents',MIN:0,MAX:99999,LEVEL:[\n        {ID:xmlns+'Invoice',MIN:0,MAX:99999,\n            QUERIES:{\n                'botskey':({'BOTSID':xmlns+'Invoice',xmlns+'DocumentNo':None}),\n                },\n            LEVEL:[\n            {ID:xmlns+'Supplier',MIN:0,MAX:99999},\n            {ID:xmlns+'Buyer',MIN:0,MAX:99999},\n            {ID:xmlns+'Delivery',MIN:0,MAX:99999},\n            {ID:xmlns+'Line',MIN:0,MAX:99999},\n            {ID:xmlns+'Trailer',MIN:0,MAX:99999},\n        ]},\n    ]},\n]},\n]\n\n\n\nexample output\n\n\n?xml version=\"1.0\" encoding=\"utf-8\" ?\n\n\nns0:Envelope xmlns:ns0=\"schemas-hiwg-org-au:EnvelopeV1.0\" xmlns:ns1=\"schemas-hiwg-org-au:InvoiceV3.0\"\n\n    \nns0:SenderID\nsender\n/ns0:SenderID\n\n    \nns0:RecipientID\nrecipient\n/ns0:RecipientID\n\n    \nns0:DocumentCount\n1\n/ns0:DocumentCount\n\n    \nDocuments\n\n        \nns1:Invoice\n\n            \nns1:TradingPartnerID\nID1\n/ns1:TradingPartnerID\n\n            \nns1:MessageType\nINVOIC\n/ns1:MessageType\n\n            \nns1:VersionControlNo\n3.0\n/ns1:VersionControlNo\n\n            \nns1:DocumentType\nTAX INVOICE\n/ns1:DocumentType\n\n\n\n\n5. Outgoing XML with specific namespace prefixes\n\n\nYour EDI partner may request a specific namespace prefix be used; This\nis technically un-necessary and bad design, but they may insist on it\nanyway!\n\n\nexample grammar\n\n\nxmlns_env='{schemas-hiwg-org-au:EnvelopeV1.0}'\nxmlns='{schemas-hiwg-org-au:InvoiceV3.0}'\n\nsyntax = {\n        'xmlns_env':xmlns_env,\n        'xmlns':xmlns,\n        'namespace_prefixes':[('ENV',xmlns_env.strip('{}')),('INV',xmlns.strip('{}'))], # use ENV, INV instead of ns0, ns1\n        'merge':False,\n        'indented':True,\n}\n\nstructure = [\n{ID:xmlns_env+'Envelope',MIN:0,MAX:99999,\n    QUERIES:{\n        'frompartner':{'BOTSID':xmlns_env+'Envelope',xmlns_env+'SenderID':None},\n        'topartner':{'BOTSID':xmlns_env+'Envelope',xmlns_env+'RecipientID':None},\n        },\n    LEVEL:[\n    {ID:'Documents',MIN:0,MAX:99999,LEVEL:[\n        {ID:xmlns+'Invoice',MIN:0,MAX:99999,\n            QUERIES:{\n                'botskey':({'BOTSID':xmlns+'Invoice',xmlns+'DocumentNo':None}),\n                },\n            LEVEL:[\n            {ID:xmlns+'Supplier',MIN:0,MAX:99999},\n            {ID:xmlns+'Buyer',MIN:0,MAX:99999},\n            {ID:xmlns+'Delivery',MIN:0,MAX:99999},\n            {ID:xmlns+'Line',MIN:0,MAX:99999},\n            {ID:xmlns+'Trailer',MIN:0,MAX:99999},\n        ]},\n    ]},\n]},\n]\n\n\n\nexample output\n\n\n?xml version=\"1.0\" encoding=\"utf-8\" ?\n\n\nENV:Envelope xmlns:ENV=\"schemas-hiwg-org-au:EnvelopeV1.0\" xmlns:INV=\"schemas-hiwg-org-au:InvoiceV3.0\"\n\n    \nENV:SenderID\nsender\n/ENV:SenderID\n\n    \nENV:RecipientID\nrecipient\n/ENV:RecipientID\n\n    \nENV:DocumentCount\n1\n/ENV:DocumentCount\n\n    \nDocuments\n\n        \nINV:Invoice\n\n            \nINV:TradingPartnerID\nID1\n/INV:TradingPartnerID\n\n            \nINV:MessageType\nINVOIC\n/INV:MessageType\n\n            \nINV:VersionControlNo\n3.0\n/INV:VersionControlNo\n\n            \nINV:DocumentType\nTAX INVOICE\n/INV:DocumentType", 
            "title": "XML namespaces"
        }, 
        {
            "location": "/XMLnamespace/#xml-namespaces", 
            "text": "http://www.w3schools.com/xml/xml_namespaces.asp  based on mailing list topics here \nand  here    Dealing with xml namespaces can be a bit difficult in Bots. They can greatly\ncomplicate grammars and mappings. Often your EDI partner will want to\nsend or receive XML with namespaces, but actually Bots does not need (or\nwant) them as there are rarely any naming conflicts within a single XML\nfile!   Where an XML file has only one namespace, usually the \"default\"\nnamespace is used. \neg.  xmlns=\"schemas-hiwg-org-au:EnvelopeV1.0    If the file has multiple namespaces, then namespace prefixes are used. \nThese prefixes can be any value. \neg.  xmlns:ENV=\"schemas-hiwg-org-au:EnvelopeV1.0\"    There are several ways to deal with namespaces in Bots:", 
            "title": "XML namespaces"
        }, 
        {
            "location": "/XMLnamespace/#1-ignore-incoming-xml-namespace", 
            "text": "For incoming XML files that are to be mapped into something else, you\nprobably don't need the namespaces at all. In my opinion this is the\n\"best\" way. See  Ignore incoming XML\nnamespace \nfor an example preprocessing script to achieve this.", 
            "title": "1. Ignore incoming XML namespace"
        }, 
        {
            "location": "/XMLnamespace/#2-use-incoming-xml-namespace", 
            "text": "When a namespace must be used, it is needed in many places (structure,\nrecorddefs, mapping) but you want to specify the namespace string, which\ncan be quite long, only in one place  (DRY principle) . \nThis has several benefits:   If it needs to change, this is easy to do in one place only  grammar and mapping will be smaller, and look neater   For example, the incoming XML file may look like ...  ?xml version=\"1.0\"?  Orders xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n     xmlns=\"http://www.company.com/EDIOrders\"\n     targetNamespace=\"http//www.company.com/EDIOrders\" \n       Order \n         OrderNumber 239062415 /OrderNumber \n         DateOrdered 2014-02-24 /DateOrdered \n         LineCount 10 /LineCount \netc...  If you created your grammar with xml2botsgrammar, it probably has the\nnamespace repeated over and over in structure and recorddefs, like\nthis...  structure=    [\n{ID:'{http://www.company.com/EDIOrders}Orders',MIN:1,MAX:1,LEVEL:[\n    {ID:'{http://www.company.com/EDIOrders}Order',MIN:1,MAX:99999,\n        QUERIES:{\n             'botskey':      {'BOTSID':'{http://www.company.com/EDIOrders}Order','{http://www.company.com/EDIOrders}OrderNumber':None},\n            },\n        LEVEL:[\n        {ID:'{http://www.company.com/EDIOrders}OrderItems',MIN:0,MAX:1,LEVEL:[\n            {ID:'{http://www.company.com/EDIOrders}OrderLine',MIN:1,MAX:99999},\n            ]},\n        ]},\n    ]}\n]\n\nrecorddefs = {\n   '{http://www.company.com/EDIOrders}Orders':[\n            ['BOTSID','M',256,'A'],\n            ['{http://www.company.com/EDIOrders}Orders__targetNamespace','C',256,'AN'],\n          ],\n   '{http://www.company.com/EDIOrders}Order':[\n            ['BOTSID','M',256,'A'],\n            ['{http://www.company.com/EDIOrders}OrderNumber','C', 20,'AN'],\n            ['{http://www.company.com/EDIOrders}DateOrdered','C', 10,'AN'],\n            ['{http://www.company.com/EDIOrders}LineCount','C', 5,'R'],\n\n# etc...  So, we want to improve this. In your grammar, first add the namespace as\na string constant. This is the only place it should be specified, and\neverywhere else refers to it.  Note: If the XML has multiple namespaces, you can use the same\ntechnique and just add more constants (xmlns1, xmlns2, etc). \nAlso include it in the syntax dict. This allows us to reference it\nlater in mappings.  xmlns='{http://www.company.com/EDIOrders}'\n\nsyntax = {\n        'xmlns':xmlns,\n}  In your grammar, replace all instances of the namespace string with the\nconstant, so it looks like this...  structure=    [\n{ID:xmlns+'Orders',MIN:1,MAX:1,LEVEL:[\n    {ID:xmlns+'Order',MIN:1,MAX:99999,\n        QUERIES:{\n             'botskey':      {'BOTSID':xmlns+'Order',xmlns+'OrderNumber':None},\n            },\n        LEVEL:[\n        {ID:xmlns+'OrderItems',MIN:0,MAX:1,LEVEL:[\n            {ID:xmlns+'OrderLine',MIN:1,MAX:99999},\n            ]},\n        ]},\n    ]}\n]\n\nrecorddefs = {\n   xmlns+'Orders':[\n            ['BOTSID','M',256,'A'],\n            [xmlns+'Orders__targetNamespace','C',256,'AN'],\n          ],\n   xmlns+'Order':[\n            ['BOTSID','M',256,'A'],\n            [xmlns+'OrderNumber','C', 20,'AN'],\n            [xmlns+'DateOrdered','C', 10,'AN'],\n            [xmlns+'LineCount','C', 5,'R'],\n\n# etc...  Now in the mapping script, read the xmlns value from grammar.  import bots.grammar as grammar\n\n    xmlns = grammar.grammarread('xml',inn.ta_info['messagetype']).syntax['xmlns']  Then use it wherever needed in the mapping, like this...\\      # Get OrderNumber from XML with namespace\n    OrderNumber = inn.get({'BOTSID':xmlns+'Order',xmlns+'OrderNumber':None})", 
            "title": "2. Use incoming XML namespace"
        }, 
        {
            "location": "/XMLnamespace/#3-outgoing-xml-with-only-a-default-namespace", 
            "text": "This can be done by defining xmlns as a tag, and setting it in mapping.\nIt eliminates the need to use namespace prefix on every record and\nfield. \nexample grammar  recorddefs = {\n    'shipment':\n        [\n        ['BOTSID', 'M', 20, 'AN'],\n        ['shipment__xmlns', 'C', 80, 'AN'],   # xmlns is added as a tag (note double underscore)\n        ['ediCustomerNumber', 'M', 12, 'N'],\n        ['ediParm1', 'M', 1, 'N'],\n        ['ediParm2', 'M', 1, 'AN'],\n        ['ediParm3', 'M', 1, 'AN'],\n        ['ediReference', 'M', 35, 'AN'],\n        ['ediFunction1', 'M', 3, 'AN'],\n        ['ediCustomerSearchName', 'M', 20, 'AN'],\n        ],\n}  example mapping      # xmlns tag for shipment\n    out.put({'BOTSID':'shipment','shipment__xmlns':'http://www.company.com/logistics/shipment'})  example output  ?xml version=\"1.0\" encoding=\"utf-8\" ?  shipment xmlns=\"http://www.company.com/logistics/shipment\" \n     ediCustomerNumber 191 /ediCustomerNumber \n     ediParm1 4 /ediParm1 \n     ediParm2 s /ediParm2 \n     ediParm3 d /ediParm3 \n     ediReference SCN1022164911 /ediReference \n     ediFunction1 9 /ediFunction1 \n     ediCustomerSearchName SCHA /ediCustomerSearchName  /shipment", 
            "title": "3. Outgoing XML with only a default namespace"
        }, 
        {
            "location": "/XMLnamespace/#4-outgoing-xml-with-default-namespace-prefixes-ns0-ns1-etc", 
            "text": "This is the default behaviour of the python elementtree module used in\nBots.  The actual prefix used is not important to XML meaning, so in\ntheory your EDI partners should not care what prefixes you use.  example grammar  xmlns_env='{schemas-hiwg-org-au:EnvelopeV1.0}'\nxmlns='{schemas-hiwg-org-au:InvoiceV3.0}'\n\nsyntax = {\n        'xmlns_env':xmlns_env,\n        'xmlns':xmlns,\n        'merge':False,\n        'indented':True,\n}\n\nnextmessage = ({'BOTSID':xmlns_env+'Envelope'},{'BOTSID':'Documents'},{'BOTSID':xmlns+'Invoice'})\n\nstructure = [\n{ID:xmlns_env+'Envelope',MIN:0,MAX:99999,\n    QUERIES:{\n        'frompartner':{'BOTSID':xmlns_env+'Envelope',xmlns_env+'SenderID':None},\n        'topartner':{'BOTSID':xmlns_env+'Envelope',xmlns_env+'RecipientID':None},\n        },\n    LEVEL:[\n    {ID:'Documents',MIN:0,MAX:99999,LEVEL:[\n        {ID:xmlns+'Invoice',MIN:0,MAX:99999,\n            QUERIES:{\n                'botskey':({'BOTSID':xmlns+'Invoice',xmlns+'DocumentNo':None}),\n                },\n            LEVEL:[\n            {ID:xmlns+'Supplier',MIN:0,MAX:99999},\n            {ID:xmlns+'Buyer',MIN:0,MAX:99999},\n            {ID:xmlns+'Delivery',MIN:0,MAX:99999},\n            {ID:xmlns+'Line',MIN:0,MAX:99999},\n            {ID:xmlns+'Trailer',MIN:0,MAX:99999},\n        ]},\n    ]},\n]},\n]  example output  ?xml version=\"1.0\" encoding=\"utf-8\" ?  ns0:Envelope xmlns:ns0=\"schemas-hiwg-org-au:EnvelopeV1.0\" xmlns:ns1=\"schemas-hiwg-org-au:InvoiceV3.0\" \n     ns0:SenderID sender /ns0:SenderID \n     ns0:RecipientID recipient /ns0:RecipientID \n     ns0:DocumentCount 1 /ns0:DocumentCount \n     Documents \n         ns1:Invoice \n             ns1:TradingPartnerID ID1 /ns1:TradingPartnerID \n             ns1:MessageType INVOIC /ns1:MessageType \n             ns1:VersionControlNo 3.0 /ns1:VersionControlNo \n             ns1:DocumentType TAX INVOICE /ns1:DocumentType", 
            "title": "4. Outgoing XML with default namespace prefixes (ns0, ns1, etc)"
        }, 
        {
            "location": "/XMLnamespace/#5-outgoing-xml-with-specific-namespace-prefixes", 
            "text": "Your EDI partner may request a specific namespace prefix be used; This\nis technically un-necessary and bad design, but they may insist on it\nanyway!  example grammar  xmlns_env='{schemas-hiwg-org-au:EnvelopeV1.0}'\nxmlns='{schemas-hiwg-org-au:InvoiceV3.0}'\n\nsyntax = {\n        'xmlns_env':xmlns_env,\n        'xmlns':xmlns,\n        'namespace_prefixes':[('ENV',xmlns_env.strip('{}')),('INV',xmlns.strip('{}'))], # use ENV, INV instead of ns0, ns1\n        'merge':False,\n        'indented':True,\n}\n\nstructure = [\n{ID:xmlns_env+'Envelope',MIN:0,MAX:99999,\n    QUERIES:{\n        'frompartner':{'BOTSID':xmlns_env+'Envelope',xmlns_env+'SenderID':None},\n        'topartner':{'BOTSID':xmlns_env+'Envelope',xmlns_env+'RecipientID':None},\n        },\n    LEVEL:[\n    {ID:'Documents',MIN:0,MAX:99999,LEVEL:[\n        {ID:xmlns+'Invoice',MIN:0,MAX:99999,\n            QUERIES:{\n                'botskey':({'BOTSID':xmlns+'Invoice',xmlns+'DocumentNo':None}),\n                },\n            LEVEL:[\n            {ID:xmlns+'Supplier',MIN:0,MAX:99999},\n            {ID:xmlns+'Buyer',MIN:0,MAX:99999},\n            {ID:xmlns+'Delivery',MIN:0,MAX:99999},\n            {ID:xmlns+'Line',MIN:0,MAX:99999},\n            {ID:xmlns+'Trailer',MIN:0,MAX:99999},\n        ]},\n    ]},\n]},\n]  example output  ?xml version=\"1.0\" encoding=\"utf-8\" ?  ENV:Envelope xmlns:ENV=\"schemas-hiwg-org-au:EnvelopeV1.0\" xmlns:INV=\"schemas-hiwg-org-au:InvoiceV3.0\" \n     ENV:SenderID sender /ENV:SenderID \n     ENV:RecipientID recipient /ENV:RecipientID \n     ENV:DocumentCount 1 /ENV:DocumentCount \n     Documents \n         INV:Invoice \n             INV:TradingPartnerID ID1 /INV:TradingPartnerID \n             INV:MessageType INVOIC /INV:MessageType \n             INV:VersionControlNo 3.0 /INV:VersionControlNo \n             INV:DocumentType TAX INVOICE /INV:DocumentType", 
            "title": "5. Outgoing XML with specific namespace prefixes"
        }, 
        {
            "location": "/ConfigurationBotskey/", 
            "text": "Document View\n\n\nBots focuses mostly on edi files.\n\nAnother useful way of looking at edi is to view at 'business\ndocuments': orders, asn's, invoices etc.\n\n\nBots support this, but to have this work satisfactory some\nconfiguration needs to be done.\n\nEssential is the use of document numbers (eg order number, shipment\nnumber, invoice number); in bots this is called 'botskey'.\n\n\nUsage\n\n\nOnce 'botskey' is set correct for your documents, it can be used for:\n\n\n\n\nViewing and searching business documents:\n\n\nView last run: \nbots-monitor->Last run->Document\n\n\nView all runs: \nbots-monitor->All run->Document\n\n\nSelect/search for documents: \nbots-monitor->Select->Document\n\n\n\n\n\n\nSet output \nfile name in a\n    channel\n or in a\n    \ncommunicationscript\n\n\n\n\nConfigure botskey\n\n\nThis can be done in two ways:\n\n\n\n\n\n\nUsing QUERIES in the\n    \ngrammar\n of\n    the incoming edi file.\n\n\n# Example: botskey in a simple csv grammar\nstructure = [\n    {ID:'LIN',MIN:1,MAX:99999,\n        QUERIES:{\n            'frompartner': ({'BOTSID':'LIN','AccountCode':None}),\n            'topartner':   ({'BOTSID':'LIN','CustomerCode':None}),\n            'botskey':     ({'BOTSID':'LIN','PurchaseOrderNo':None}),\n        },\n    }\n]\n\n\n\n\n\n\n\nIn your \nmapping script\n.\n\n\nout.ta_info['botskey'] = inn.get({'BOTSID':'LIN','PurchaseOrderCode':None})", 
            "title": "Document View (botskey)"
        }, 
        {
            "location": "/ConfigurationBotskey/#document-view", 
            "text": "Bots focuses mostly on edi files. \nAnother useful way of looking at edi is to view at 'business\ndocuments': orders, asn's, invoices etc.  Bots support this, but to have this work satisfactory some\nconfiguration needs to be done. \nEssential is the use of document numbers (eg order number, shipment\nnumber, invoice number); in bots this is called 'botskey'.", 
            "title": "Document View"
        }, 
        {
            "location": "/ConfigurationBotskey/#usage", 
            "text": "Once 'botskey' is set correct for your documents, it can be used for:   Viewing and searching business documents:  View last run:  bots-monitor->Last run->Document  View all runs:  bots-monitor->All run->Document  Select/search for documents:  bots-monitor->Select->Document    Set output  file name in a\n    channel  or in a\n     communicationscript", 
            "title": "Usage"
        }, 
        {
            "location": "/ConfigurationBotskey/#configure-botskey", 
            "text": "This can be done in two ways:    Using QUERIES in the\n     grammar  of\n    the incoming edi file.  # Example: botskey in a simple csv grammar\nstructure = [\n    {ID:'LIN',MIN:1,MAX:99999,\n        QUERIES:{\n            'frompartner': ({'BOTSID':'LIN','AccountCode':None}),\n            'topartner':   ({'BOTSID':'LIN','CustomerCode':None}),\n            'botskey':     ({'BOTSID':'LIN','PurchaseOrderNo':None}),\n        },\n    }\n]    In your  mapping script .  out.ta_info['botskey'] = inn.get({'BOTSID':'LIN','PurchaseOrderCode':None})", 
            "title": "Configure botskey"
        }, 
        {
            "location": "/UserScriptingIntroduction/", 
            "text": "User Scripting\n\n\nBots has many places (exit points) where user scripting can be used. These user scripts are optional; bots will work without them but they provide great control over functionality for advanced users.\n\n\n\n\nChannels can have a \ncommunicationscript\n\n\nRoutes can have a \nroutescript\n\n\nBots-engine can also have \nit's own routescript\n\n\nEnveloping can be modified with an \nenvelopescript\n\n\netc", 
            "title": "Introduction"
        }, 
        {
            "location": "/UserScriptingIntroduction/#user-scripting", 
            "text": "Bots has many places (exit points) where user scripting can be used. These user scripts are optional; bots will work without them but they provide great control over functionality for advanced users.   Channels can have a  communicationscript  Routes can have a  routescript  Bots-engine can also have  it's own routescript  Enveloping can be modified with an  envelopescript  etc", 
            "title": "User Scripting"
        }, 
        {
            "location": "/RouteScriptsExampleBotsEngine/", 
            "text": "Route Script for Bots-engine\n\n\nA special routescript called botsengine.py can be added. This is called by the bots-engine at various points. You may wish to use this for your own logging, reporting or cleanup routines.\n\n\nIn Bots v3.2+ There are \npre\n and \npost\n exit points for all runs, and for each type of run (command).\n\n\n\n\npre (before any run)\n\n\nprenew\n\n\npreresend\n\n\nprerereceive\n\n\npreautomaticretrycommunicationcommunication\n\n\nprecleanup\n\n\npostnew\n\n\npostresend\n\n\npostrereceive\n\n\npostautomaticretrycommunicationcommunication\n\n\npostcleanup\n\n\npost (after any run)\n\n\n\n\n# user script example for some bots-engine exit points,\n# showing the passed args.\n\n# before any run\ndef pre(commandstorun,routestorun):\n    print 'pre',commandstorun,routestorun\n\n# before \nnew\n run\ndef prenew(routestorun):\n    print 'prenew',routestorun\n\n# after \ncleanup\n run\ndef postcleanup(routestorun):\n    print 'postcleanup',routestorun\n\n# after any run\ndef post(commandstorun,routestorun):\n    print 'post',commandstorun,routestorun\n\n\n\n\n\nExample of doing something useful with exit points\n\n\nThe \npostcleanup\n exit point can be used to add your own daily tasks (eg. cleanup, backup or reporting capabilities). By default, bots runs a cleanup \nonce per day\n at the end of the first run that day. (setting whencleanup=daily in bots.ini)\n\n\nThis example automatically activates or deactivates partners on the dates you configure for the partner (startdate, enddate)\n\n\nimport bots.botslib as botslib\nimport datetime\n\ndef postcleanup(routestorun):\n\n        # activate any partners with a \nstart date\n of today\n        botslib.changeq(u'''UPDATE partner\n                            SET active = 1\n                            WHERE startdate = %(today)s''',\n                            {'today':datetime.datetime.today().strftime('%Y-%m-%d')})\n\n        # deactivate any active partners with an \nend date\n before today\n        botslib.changeq(u'''UPDATE partner\n                            SET active = 0\n                            WHERE active = 1\n                            AND  enddate is not null\n                            AND enddate \n %(today)s''',\n                            {'today':datetime.datetime.today().strftime('%Y-%m-%d')})", 
            "title": "Bots engine scripting"
        }, 
        {
            "location": "/RouteScriptsExampleBotsEngine/#route-script-for-bots-engine", 
            "text": "A special routescript called botsengine.py can be added. This is called by the bots-engine at various points. You may wish to use this for your own logging, reporting or cleanup routines.  In Bots v3.2+ There are  pre  and  post  exit points for all runs, and for each type of run (command).   pre (before any run)  prenew  preresend  prerereceive  preautomaticretrycommunicationcommunication  precleanup  postnew  postresend  postrereceive  postautomaticretrycommunicationcommunication  postcleanup  post (after any run)   # user script example for some bots-engine exit points,\n# showing the passed args.\n\n# before any run\ndef pre(commandstorun,routestorun):\n    print 'pre',commandstorun,routestorun\n\n# before  new  run\ndef prenew(routestorun):\n    print 'prenew',routestorun\n\n# after  cleanup  run\ndef postcleanup(routestorun):\n    print 'postcleanup',routestorun\n\n# after any run\ndef post(commandstorun,routestorun):\n    print 'post',commandstorun,routestorun", 
            "title": "Route Script for Bots-engine"
        }, 
        {
            "location": "/RouteScriptsExampleBotsEngine/#example-of-doing-something-useful-with-exit-points", 
            "text": "The  postcleanup  exit point can be used to add your own daily tasks (eg. cleanup, backup or reporting capabilities). By default, bots runs a cleanup  once per day  at the end of the first run that day. (setting whencleanup=daily in bots.ini)  This example automatically activates or deactivates partners on the dates you configure for the partner (startdate, enddate)  import bots.botslib as botslib\nimport datetime\n\ndef postcleanup(routestorun):\n\n        # activate any partners with a  start date  of today\n        botslib.changeq(u'''UPDATE partner\n                            SET active = 1\n                            WHERE startdate = %(today)s''',\n                            {'today':datetime.datetime.today().strftime('%Y-%m-%d')})\n\n        # deactivate any active partners with an  end date  before today\n        botslib.changeq(u'''UPDATE partner\n                            SET active = 0\n                            WHERE active = 1\n                            AND  enddate is not null\n                            AND enddate   %(today)s''',\n                            {'today':datetime.datetime.today().strftime('%Y-%m-%d')})", 
            "title": "Example of doing something useful with exit points"
        }, 
        {
            "location": "/Confirmations/", 
            "text": "Confirmations/acknowledgements\n\n\nIntroduction\n\n\nIn edi often a confirmation (or acknowledgement) is needed. \nBots has a build-in confirmation framework that supports:\n\n\n\n\n997 (x12)\n\n\nCONTRL (edifact)\n\n\nMDN (email)\n\n\n\n\nNext to that Bots supports APERAK (edifact), see details below.\n\n\nNote that confirmations have 3 aspects:\n\n\n\n\nBots sends a confirmation for an incoming edi-file.\n\n\nBots asks a confirmation for an outgoing edi-file.\n\n\nBots processes an incoming confirmation.\n\n\n\n\nYou can view the results of asked or send confirmations in\n\nbots-monitor->All runs->Confirmations\n.\n\n\nAll send or asked confirmations are registered in bots if\nconfigured correct.\n\n\nExamples in plugins\n\n\n\n\nplugin \nx12-850-856-810-997\n\n\ngenerates a 997 for incoming orders, and dispatches this via a\n    composite route.\n\n\ninbound route is configured to process 997's.\\\n\n\n\n\n\n\nplugin \ndemo_mdn_confirmations\n sends and receives\n    email-confirmations (MDN)\\\n\n\nplugin \nedifact_ordersdesadvinvoic\n sends APERAK for incoming\n    orders - if indicated in incoming order.\n\n\n\n\nSend confirmation\n\n\n\n\nfirst configure correct processing of incoming edi-files.\n\n\n\n\nconfigure confirmrules in\n    \nbots-monitor->Configuration->Confirmrules\n. You can use several\n    confirmation rules, bots looks at all rules. Per rule:\n\n\n\n\nindicate the kind of confirmation to send (997, CONTRL, etc).\n\n\nindicate how the rules works - per route, channel, messagetype,\n    etc. (prior to bots 3.0, frompartner and topartner where swapped\n    :-(\n\n\nan option is to include first and than exclude using\n    'negativerule'. Bots first checks the positive rules, than the\n    negative rules. Eg: send 997 for all incoming x12-files in a\n    route, and exclude partner XXX.\n\n\n\n\n\n\n\n\nuse a \ncomposite route\n to send the\n    confirmations to the right destination.\n\n\n\n\n\n\nAsk confirmation\n\n\n\n\nfirst configure correct processing of outgoing edi-files.\n\n\n\n\nthan configure \nbots-monitor->Configuration->Confirmrules\n You can\n    configure several confirmation rules, bots looks at all rules. Per\n    rule:\n\n\n\n\nindicate the kind of confirmation to ask (997, CONTRL, etc).\n\n\nindicate how the rules works - per route, channel, messagetype,\n    etc. (prior to bots 3.0, frompartner and topartner where swapped\n    :-(\n\n\nan option is to include first and than exclude using\n    'negativerule'. Bots first checks the positive rules, than the\n    negative rules. Eg: ask 997 for all outgoing x12-files in a\n    route, and exclude partner XXX.\n\n\n\n\n\n\n\n\nyou will need to process the incoming confirmation.\n\n\n\n\n\n\nProcess incoming confirmation\n\n\n\n\n997 (x12): an additional translation and mapping script is needed.\n\n\nCONTRL (edifact): an additional translation and mapping script is\n    needed.\n\n\nMDN-confirmations: no additional comfiguration is needed.\n\n\n\n\nSend 997/acknowledgement for incoming x12 orders\n\n\nBefore attempting to configure confirmations create and test a route\\\n for a typical X12 message e.g. 850. Once that is working correctly,\nconfirmations can be configured for the route. Bots will now generate a\n997 message for each 850 recipient. Notice that the 997 is in the same\nRoute as the 850. Probably you will want the 997 to go back out to the\npartner that sent the 850. Use a \ncomposite route\n\nfor this.\n\n\nTell bots to send confirmations (997 message) in\n\nbots-monitor->Configuration->Confirmrules\n. Note that in the route\nestablished for the 850, there is a sequence number next to the routeID.\nThe 'seq' for the 850 is probably \"1\". A new route-part must now be\ncreated to handle the 997 that bots has generated. The new route-part\nhas the same routeID but a higher 'seq' number (e.g. \"2\"). Now configure\nto route the 997 message that bots will generate. The 997 is an\ninternally generated file. The user will have very little to do with its\ncreation but everything to do with where the file goes (i.e. its\nroute).\n\n\nRoute with seq 2 will have \nnone\n as its incoming channel, and does\nnot translate. Its outgoing channel will most likely be to FTP or a VAN.\n\nThe key to success\n is in using the \"Filtering for outchannel\" at the\nbottom of the \"Change Route\" page. In \"Filtering for outchannel\" for\n'seq' 1, set toeditype and tomessagetype so that only the translated 850\nfile will take this part of the Composite Route. Now for seq 2 set\ntoeditype to X12. This will cause only the X12 997 message to follow\nthis part of the composite route.", 
            "title": "Confirmations/acknowledgements"
        }, 
        {
            "location": "/Confirmations/#confirmationsacknowledgements", 
            "text": "", 
            "title": "Confirmations/acknowledgements"
        }, 
        {
            "location": "/Confirmations/#introduction", 
            "text": "In edi often a confirmation (or acknowledgement) is needed. \nBots has a build-in confirmation framework that supports:   997 (x12)  CONTRL (edifact)  MDN (email)   Next to that Bots supports APERAK (edifact), see details below.  Note that confirmations have 3 aspects:   Bots sends a confirmation for an incoming edi-file.  Bots asks a confirmation for an outgoing edi-file.  Bots processes an incoming confirmation.   You can view the results of asked or send confirmations in bots-monitor->All runs->Confirmations .  All send or asked confirmations are registered in bots if\nconfigured correct.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Confirmations/#examples-in-plugins", 
            "text": "plugin  x12-850-856-810-997  generates a 997 for incoming orders, and dispatches this via a\n    composite route.  inbound route is configured to process 997's.\\    plugin  demo_mdn_confirmations  sends and receives\n    email-confirmations (MDN)\\  plugin  edifact_ordersdesadvinvoic  sends APERAK for incoming\n    orders - if indicated in incoming order.", 
            "title": "Examples in plugins"
        }, 
        {
            "location": "/Confirmations/#send-confirmation", 
            "text": "first configure correct processing of incoming edi-files.   configure confirmrules in\n     bots-monitor->Configuration->Confirmrules . You can use several\n    confirmation rules, bots looks at all rules. Per rule:   indicate the kind of confirmation to send (997, CONTRL, etc).  indicate how the rules works - per route, channel, messagetype,\n    etc. (prior to bots 3.0, frompartner and topartner where swapped\n    :-(  an option is to include first and than exclude using\n    'negativerule'. Bots first checks the positive rules, than the\n    negative rules. Eg: send 997 for all incoming x12-files in a\n    route, and exclude partner XXX.     use a  composite route  to send the\n    confirmations to the right destination.", 
            "title": "Send confirmation"
        }, 
        {
            "location": "/Confirmations/#ask-confirmation", 
            "text": "first configure correct processing of outgoing edi-files.   than configure  bots-monitor->Configuration->Confirmrules  You can\n    configure several confirmation rules, bots looks at all rules. Per\n    rule:   indicate the kind of confirmation to ask (997, CONTRL, etc).  indicate how the rules works - per route, channel, messagetype,\n    etc. (prior to bots 3.0, frompartner and topartner where swapped\n    :-(  an option is to include first and than exclude using\n    'negativerule'. Bots first checks the positive rules, than the\n    negative rules. Eg: ask 997 for all outgoing x12-files in a\n    route, and exclude partner XXX.     you will need to process the incoming confirmation.", 
            "title": "Ask confirmation"
        }, 
        {
            "location": "/Confirmations/#process-incoming-confirmation", 
            "text": "997 (x12): an additional translation and mapping script is needed.  CONTRL (edifact): an additional translation and mapping script is\n    needed.  MDN-confirmations: no additional comfiguration is needed.", 
            "title": "Process incoming confirmation"
        }, 
        {
            "location": "/Confirmations/#send-997acknowledgement-for-incoming-x12-orders", 
            "text": "Before attempting to configure confirmations create and test a route\\\n for a typical X12 message e.g. 850. Once that is working correctly,\nconfirmations can be configured for the route. Bots will now generate a\n997 message for each 850 recipient. Notice that the 997 is in the same\nRoute as the 850. Probably you will want the 997 to go back out to the\npartner that sent the 850. Use a  composite route \nfor this.  Tell bots to send confirmations (997 message) in bots-monitor->Configuration->Confirmrules . Note that in the route\nestablished for the 850, there is a sequence number next to the routeID.\nThe 'seq' for the 850 is probably \"1\". A new route-part must now be\ncreated to handle the 997 that bots has generated. The new route-part\nhas the same routeID but a higher 'seq' number (e.g. \"2\"). Now configure\nto route the 997 message that bots will generate. The 997 is an\ninternally generated file. The user will have very little to do with its\ncreation but everything to do with where the file goes (i.e. its\nroute).  Route with seq 2 will have  none  as its incoming channel, and does\nnot translate. Its outgoing channel will most likely be to FTP or a VAN. The key to success  is in using the \"Filtering for outchannel\" at the\nbottom of the \"Change Route\" page. In \"Filtering for outchannel\" for\n'seq' 1, set toeditype and tomessagetype so that only the translated 850\nfile will take this part of the Composite Route. Now for seq 2 set\ntoeditype to X12. This will cause only the X12 997 message to follow\nthis part of the composite route.", 
            "title": "Send 997/acknowledgement for incoming x12 orders"
        }, 
        {
            "location": "/ConfigurationSplitMerge/", 
            "text": "Splitting, merging and enveloping edi files\n\n\nThe advised way of working with bots is to have a translation work \nwith a message (x12: transaction).  \n\n\nIn edi an incoming file will often have multiple messages.\n\n\nAnd often you will have to have multiple outgoing messages in one\nedi-file (merging, enveloping).", 
            "title": "Introduction"
        }, 
        {
            "location": "/ConfigurationSplitMerge/#splitting-merging-and-enveloping-edi-files", 
            "text": "The advised way of working with bots is to have a translation work \nwith a message (x12: transaction).    In edi an incoming file will often have multiple messages.  And often you will have to have multiple outgoing messages in one\nedi-file (merging, enveloping).", 
            "title": "Splitting, merging and enveloping edi files"
        }, 
        {
            "location": "/ConfigurationSplit/", 
            "text": "Splitting edi files\n\n\nOne edi-file can contain several edi-messages.\nEg: \n\n\n\n\none edifact file, multiple ORDERs. \n\n\none x12 file, multiple 850's. \n\n\nexport routine of your ERP software puts all exported invoices\n    in one file \n\n\nemail with multiple edi-attachments\n\n\n\n\nA bots mapping works best for one message (one order, one invoice).\n\nSo Bots splits up edi-files:\n\n\n\n\nIncoming email: different attachments are saved as a separate\n    edi-files.\n\n\nReceiving zipped edi files: the files in the zip-file as saved as\n    separate edi-files.\n\n\nFor edifact, x12, tradacoms: interchanges are being split up to separate\n    files.\n\n\nIncoming edi-files are being fed to the mapping-script as messages. This\n    is done by 'nextmessage' in the grammar syntax, see\n    \nNextmessage\n.\n\n\nSpit within a mapping script. Think of eg splitting up a shipment to the\n    different orders. There are 2 ways of doing this:  \n\n\nWrite multiple message to the same file.\n\n\nWrite each generated message to the same file, using alt translations.", 
            "title": "Split edi files"
        }, 
        {
            "location": "/ConfigurationSplit/#splitting-edi-files", 
            "text": "One edi-file can contain several edi-messages.\nEg:    one edifact file, multiple ORDERs.   one x12 file, multiple 850's.   export routine of your ERP software puts all exported invoices\n    in one file   email with multiple edi-attachments   A bots mapping works best for one message (one order, one invoice). \nSo Bots splits up edi-files:   Incoming email: different attachments are saved as a separate\n    edi-files.  Receiving zipped edi files: the files in the zip-file as saved as\n    separate edi-files.  For edifact, x12, tradacoms: interchanges are being split up to separate\n    files.  Incoming edi-files are being fed to the mapping-script as messages. This\n    is done by 'nextmessage' in the grammar syntax, see\n     Nextmessage .  Spit within a mapping script. Think of eg splitting up a shipment to the\n    different orders. There are 2 ways of doing this:    Write multiple message to the same file.  Write each generated message to the same file, using alt translations.", 
            "title": "Splitting edi files"
        }, 
        {
            "location": "/ConfigurationMerge/", 
            "text": "Merge/envelope edi message\n\n\nReasons to merge/envelope edi files: \n\n\n\n\nyour ERP-system expects one file (message-queue) with fixed\n    records \n\n\nyour edi-partners wants to limit the number of\n    edi-files/interchanges received. \n\n\ncosts: this can reduce transmission\n    costs for some VAN's \n\n\nIt is better to have one file with outgoing\n    invoices than 165 separate files ;-)\n\n\n\n\nMerge options:\n\n\n\n\n\n\nMerging: if the 'merge' parameter is set in the syntax of the outgoing\n    message, bots will try to merge seperate messages to one file. Messages\n    are only merged if: same from-partner, same to-partner, same editype,\n    same messagetype, same testindicator, same characterset, same envelope.\n\n\n\n\n\n\nEnveloping: (edifact, x12, tradacoms) bots will envelope these messages\n    (add UNB-UNZ for edifact, ISA-GS-GE-IEA for x12). Enveloping is\n    independent from merging: bots can envelope without merging, or merge\n    without enveloping.\n\n\n\n\n\n\nWrite to a message-queue in outgoing channel: if you use a fixed\n    filename in an outgoing channel, bots will append all messages to this\n    file. This is often used in eg a configuration where all orders go to\n    one file containing all incoming orders in fixed file format.", 
            "title": "Merge/envelope edi files"
        }, 
        {
            "location": "/ConfigurationMerge/#mergeenvelope-edi-message", 
            "text": "Reasons to merge/envelope edi files:    your ERP-system expects one file (message-queue) with fixed\n    records   your edi-partners wants to limit the number of\n    edi-files/interchanges received.   costs: this can reduce transmission\n    costs for some VAN's   It is better to have one file with outgoing\n    invoices than 165 separate files ;-)   Merge options:    Merging: if the 'merge' parameter is set in the syntax of the outgoing\n    message, bots will try to merge seperate messages to one file. Messages\n    are only merged if: same from-partner, same to-partner, same editype,\n    same messagetype, same testindicator, same characterset, same envelope.    Enveloping: (edifact, x12, tradacoms) bots will envelope these messages\n    (add UNB-UNZ for edifact, ISA-GS-GE-IEA for x12). Enveloping is\n    independent from merging: bots can envelope without merging, or merge\n    without enveloping.    Write to a message-queue in outgoing channel: if you use a fixed\n    filename in an outgoing channel, bots will append all messages to this\n    file. This is often used in eg a configuration where all orders go to\n    one file containing all incoming orders in fixed file format.", 
            "title": "Merge/envelope edi message"
        }, 
        {
            "location": "/EnvelopeScripting/", 
            "text": "Envelope scripting\n\n\nYou can use an envelopescript to do custom enveloping for edifact, \nx12, tradacoms, xml. Exit points that can be used: \n\n\n\n\nta_infocontent(ta_info) * at start of enveloping\n    process. ta_info contains the values that are used to write the\n    envelope; you can change these values. \n\n\nenvelopecontent(ta_info,out) * after bots has built the envelope\n    tree you can make changes to the envelope tree by using put(), change()\n    etc.\n\n\n\n\nFunctions should be in\n\nbots/usersys/envelopescripts/\neditype\n/\neditype\n.py\n, eg:\n\n\n\n\nbots/usersys/envelopescripts/edifact/edifact.py\n\n\nbots/usersys/envelopescripts/x12/x12.py\n\n\n\n\nExamples\n\n\nExample 1\n\n\nNote that this affects all outgoing edifact documents. Add conditional\nlogic if needed.\n\nIn file \nbots/usersys/envelopescripts/edifact/edifact.py\n:\n\n\ndef envelopecontent(ta_info,out,*args,**kwargs):\n    ''' Add extra fields to the edifact envelope.'''\n    out.put({'BOTSID':'UNB','S002.0008': 'PARTNER1'}) #Interchange sender internal identification\n    out.put({'BOTSID':'UNB','S003.0014': 'PARTNER2'}) #Interchange recipient internal identification\n    out.put({'BOTSID':'UNB','0029': 'A'})             #Processing priority code\n    out.put({'BOTSID':'UNB','0032': 'EANCOM'})        #Interchange agreement identifier\n\n\n\nExample 2\n\n\nIn file \nbots/usersys/envelopescripts/edifact/edifact.py\n:\n\n\ndef ta_infocontent(ta_info,*args,**kwargs):\n    ''' function is called before envelope tree is made.\n        values in ta_info will be used to create envelope.\n    '''\n    if ta_info['topartner'] == '1111111111111':\n        ta_info['topartner'] = 'XXXXXXXXXXXXXXXXX'\n        ta_info['UNB.S003.0014'] = '012345'\n\n\n\nExample 3\n\n\nIn file \nbots/usersys/envelopescripts/edifact/edifact.py\n:\n\n\ndef envelopecontent(ta_info,out,*args,**kwargs):\n    ''' function is called after envelope tree is made, but not written yet.\n        manipulate envelope tree itself.\n    '''\n    if ta_info['topartner'] == '1111111111111':\n        out.change(where=({'BOTSID':'UNB'},),change={'S003.0010': 'XXXXXXXXXXXXXXXXX'}) #field S003.0010 (receiver) is written to envelope tree\n        out.put({'BOTSID':'UNB','S003.0014': '012345'}) #field S003.0014 is written to envelope tree\n        ta_info['topartner'] = 'XXXXXXXXXXXXXXXXX'      #takes only care of changing the partnerID in bots interface (does not change envelope itself)", 
            "title": "Envelope scripting"
        }, 
        {
            "location": "/EnvelopeScripting/#envelope-scripting", 
            "text": "You can use an envelopescript to do custom enveloping for edifact, \nx12, tradacoms, xml. Exit points that can be used:    ta_infocontent(ta_info) * at start of enveloping\n    process. ta_info contains the values that are used to write the\n    envelope; you can change these values.   envelopecontent(ta_info,out) * after bots has built the envelope\n    tree you can make changes to the envelope tree by using put(), change()\n    etc.   Functions should be in bots/usersys/envelopescripts/ editype / editype .py , eg:   bots/usersys/envelopescripts/edifact/edifact.py  bots/usersys/envelopescripts/x12/x12.py", 
            "title": "Envelope scripting"
        }, 
        {
            "location": "/EnvelopeScripting/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/EnvelopeScripting/#example-1", 
            "text": "Note that this affects all outgoing edifact documents. Add conditional\nlogic if needed. \nIn file  bots/usersys/envelopescripts/edifact/edifact.py :  def envelopecontent(ta_info,out,*args,**kwargs):\n    ''' Add extra fields to the edifact envelope.'''\n    out.put({'BOTSID':'UNB','S002.0008': 'PARTNER1'}) #Interchange sender internal identification\n    out.put({'BOTSID':'UNB','S003.0014': 'PARTNER2'}) #Interchange recipient internal identification\n    out.put({'BOTSID':'UNB','0029': 'A'})             #Processing priority code\n    out.put({'BOTSID':'UNB','0032': 'EANCOM'})        #Interchange agreement identifier", 
            "title": "Example 1"
        }, 
        {
            "location": "/EnvelopeScripting/#example-2", 
            "text": "In file  bots/usersys/envelopescripts/edifact/edifact.py :  def ta_infocontent(ta_info,*args,**kwargs):\n    ''' function is called before envelope tree is made.\n        values in ta_info will be used to create envelope.\n    '''\n    if ta_info['topartner'] == '1111111111111':\n        ta_info['topartner'] = 'XXXXXXXXXXXXXXXXX'\n        ta_info['UNB.S003.0014'] = '012345'", 
            "title": "Example 2"
        }, 
        {
            "location": "/EnvelopeScripting/#example-3", 
            "text": "In file  bots/usersys/envelopescripts/edifact/edifact.py :  def envelopecontent(ta_info,out,*args,**kwargs):\n    ''' function is called after envelope tree is made, but not written yet.\n        manipulate envelope tree itself.\n    '''\n    if ta_info['topartner'] == '1111111111111':\n        out.change(where=({'BOTSID':'UNB'},),change={'S003.0010': 'XXXXXXXXXXXXXXXXX'}) #field S003.0010 (receiver) is written to envelope tree\n        out.put({'BOTSID':'UNB','S003.0014': '012345'}) #field S003.0014 is written to envelope tree\n        ta_info['topartner'] = 'XXXXXXXXXXXXXXXXX'      #takes only care of changing the partnerID in bots interface (does not change envelope itself)", 
            "title": "Example 3"
        }, 
        {
            "location": "/ConfigurationPartners/", 
            "text": "Plugin\n\n\nPlugin 'demo_partnerdependent' at \nthe bots sourceforge site\n demonstrates working with edi partners.", 
            "title": "Introduction"
        }, 
        {
            "location": "/ConfigurationPartners/#plugin", 
            "text": "Plugin 'demo_partnerdependent' at  the bots sourceforge site  demonstrates working with edi partners.", 
            "title": "Plugin"
        }, 
        {
            "location": "/TranslationperPartner/", 
            "text": "Partner specific translation\n\n\nExplain by example\n\n\nYou receive edifact ORDERSD96AUNEAN008 from several partners. Partner\n'retailer-abroad' fills the orders in a different way; the difference is\nso big that it is better to have a separate mapping script.\n\n\nConfigure this like:\n\n\n\n\none grammar for incoming edifact ORDERSD96AUNEAN008 message. (It is\n    a standard message, isn't it?)\n\n\none grammar for the inhouse import format. (We definitely want one\n    import for all orders!)\n\n\nnote that the incoming edifact grammar uses QUERIES to determine the\n    from-partner and to-partner before the translation.\n\n\nmake the 2 mapping scripts:\n\n\nmapping script 'ordersedi2inhouse_for_retailerabroad.py'\n    (specific for partner 'retailer-abroad').\n\n\nmapping script 'fixed-myinhouseorder' (for all other\n    retailers).\n\n\n\n\n\n\nadd 'retailer-abroad' to partners (via\n    \nbots-monitor->Configuration->Partners \n groups\n).\n\n\nUse 2 translations rules:\n\n\nedifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using mapping\n    script ordersedi2inhouse.py\n\n\nedifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using mapping\n    script ordersedi2inhouse_for_retailerabroad.py for\n    from-partner 'retailer-abroad'\n\n\n\n\n\n\n\n\nOften there are lots of similarities between the mappings - the 'many\nsimilar yet different mappings' problems. This can be \nhandled in\nbots\n\nin a nice way.\n\n\nPlugin\n\n\nPlugin 'demo_partnerdependent' at \nthe bots sourceforge\nsite\n demonstrates\npartner specific translations.", 
            "title": "Partner specific translations"
        }, 
        {
            "location": "/TranslationperPartner/#partner-specific-translation", 
            "text": "", 
            "title": "Partner specific translation"
        }, 
        {
            "location": "/TranslationperPartner/#explain-by-example", 
            "text": "You receive edifact ORDERSD96AUNEAN008 from several partners. Partner\n'retailer-abroad' fills the orders in a different way; the difference is\nso big that it is better to have a separate mapping script.  Configure this like:   one grammar for incoming edifact ORDERSD96AUNEAN008 message. (It is\n    a standard message, isn't it?)  one grammar for the inhouse import format. (We definitely want one\n    import for all orders!)  note that the incoming edifact grammar uses QUERIES to determine the\n    from-partner and to-partner before the translation.  make the 2 mapping scripts:  mapping script 'ordersedi2inhouse_for_retailerabroad.py'\n    (specific for partner 'retailer-abroad').  mapping script 'fixed-myinhouseorder' (for all other\n    retailers).    add 'retailer-abroad' to partners (via\n     bots-monitor->Configuration->Partners   groups ).  Use 2 translations rules:  edifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using mapping\n    script ordersedi2inhouse.py  edifact-ORDERSD96AUNEAN008 to fixed-myinhouseorder using mapping\n    script ordersedi2inhouse_for_retailerabroad.py for\n    from-partner 'retailer-abroad'     Often there are lots of similarities between the mappings - the 'many\nsimilar yet different mappings' problems. This can be  handled in\nbots \nin a nice way.", 
            "title": "Explain by example"
        }, 
        {
            "location": "/TranslationperPartner/#plugin", 
            "text": "Plugin 'demo_partnerdependent' at  the bots sourceforge\nsite  demonstrates\npartner specific translations.", 
            "title": "Plugin"
        }, 
        {
            "location": "/TranslationperPartnerExtended/", 
            "text": "Organize partner specific translations using imports\n\n\nOften in edi you need a number of very similar translations for different partners -\nthe 'many similar yet different mappings' problems.\n\n\nYou want to organize your mapping scripts so that code is not\nduplicated many times, creating maintenance problems.\n\n\nA nice approach is:\n\n\n\n\ncreate a default mapping.\n\n\nfor some partners you can use the default mapping, for others use \na\n    partner specific\n    translation\n\n\nthe partner-specific mappings import the default mapping and builds\n    upon that (additional pre- or post-mapping).\n     Note: plugin 'demo_partnerdependent' at \nthe bots sourceforge\n    site\n\n    demonstrates the use of default mappings and imports.\n\n\n\n\nBy Example\n\n\nthe default mapping\n\nScript file 'orders2idoc.py', translates edifact ORDERS to idoc\nORDERS05)\\\n\n\ndef main(inn,out):\n    # Order number\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDK02','QUALF':'001',\n                                   'BELNR':inn.get({'BOTSID':'UNH'},{'BOTSID':'BGM','C106.1004':None})})\n\n    # Buyer name\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKA1','PARVW':'AG',\n                                   'BNAME':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'BY','C056.3412':None})})\n\n    # blahblahblah.....lots more complex mapping code for the order\n\n\n\nthe partner specific mapping\n\nScript file 'customer2_orders2idoc.py' for for customer.\n\nThe default mapping is mostly OK, but a few changes are needed:  \n\n\nimport orders2idoc             #here the default mapping is imported\n\ndef main(inn,out):\n    #*** pre-mapping *******************\n    # do partner-specific mapping before the default mapping eg to make the incoming order \"more standard\" :-)\n    # In this example:\n    #     customer2 sends RFF+PR:BULK to indicate a stock order. Delete this and change to BGM+120\n    #     This must be done pre-mapping because we have complex mapping rules based on BGM order type.\n    if inn.get({'BOTSID':'UNH'},{'BOTSID':'RFF','C506.1153':'PR','C506.1154':None}) == 'BULK':\n        inn.delete({'BOTSID':'UNH'},{'BOTSID':'RFF','C506.1153':'PR','C506.1154':'BULK'})\n        inn.change(where=({'BOTSID':'UNH'},{'BOTSID':'BGM'}),change={'C002.1001':'120'})\n\n\n    #*** run the default mapping******************\n    orders2idoc.main(inn,out)\n\n\n    #*** post-mapping *******************\n    # Post-mapping to adjust or add to the mapped output.\n    # Delete unwanted text that is sent on their orders\n    out.delete({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKT2','TDLINE':'TOTAL EXCL. GST AUD'})\n    # Additional mapping: map buyer name from NAD+AB:\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKA1','PARVW':'AG',\n            'BNAME':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'AB','C056.3412':None})})\n\n\n\nSome details and tips:\n\n\n\n\nMake the default mapping is as generic as possible (eg. checking\n    multiple fields).\n\n\nDo not not put any partner specific implementation mapping in here\n\n\nAll mapping scripts are in the same directory (for the incoming\n    editype)\n\n\n\n\nPlugin\n\n\nPlugin 'demo_partnerdependent' at \nthe bots sourceforge\nsite\n demonstrates\nthe use of default mappings and imports.", 
            "title": "Organize partner specific translations"
        }, 
        {
            "location": "/TranslationperPartnerExtended/#organize-partner-specific-translations-using-imports", 
            "text": "Often in edi you need a number of very similar translations for different partners -\nthe 'many similar yet different mappings' problems.  You want to organize your mapping scripts so that code is not\nduplicated many times, creating maintenance problems.  A nice approach is:   create a default mapping.  for some partners you can use the default mapping, for others use  a\n    partner specific\n    translation  the partner-specific mappings import the default mapping and builds\n    upon that (additional pre- or post-mapping).\n     Note: plugin 'demo_partnerdependent' at  the bots sourceforge\n    site \n    demonstrates the use of default mappings and imports.", 
            "title": "Organize partner specific translations using imports"
        }, 
        {
            "location": "/TranslationperPartnerExtended/#by-example", 
            "text": "the default mapping \nScript file 'orders2idoc.py', translates edifact ORDERS to idoc\nORDERS05)\\  def main(inn,out):\n    # Order number\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDK02','QUALF':'001',\n                                   'BELNR':inn.get({'BOTSID':'UNH'},{'BOTSID':'BGM','C106.1004':None})})\n\n    # Buyer name\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKA1','PARVW':'AG',\n                                   'BNAME':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'BY','C056.3412':None})})\n\n    # blahblahblah.....lots more complex mapping code for the order  the partner specific mapping \nScript file 'customer2_orders2idoc.py' for for customer. \nThe default mapping is mostly OK, but a few changes are needed:    import orders2idoc             #here the default mapping is imported\n\ndef main(inn,out):\n    #*** pre-mapping *******************\n    # do partner-specific mapping before the default mapping eg to make the incoming order \"more standard\" :-)\n    # In this example:\n    #     customer2 sends RFF+PR:BULK to indicate a stock order. Delete this and change to BGM+120\n    #     This must be done pre-mapping because we have complex mapping rules based on BGM order type.\n    if inn.get({'BOTSID':'UNH'},{'BOTSID':'RFF','C506.1153':'PR','C506.1154':None}) == 'BULK':\n        inn.delete({'BOTSID':'UNH'},{'BOTSID':'RFF','C506.1153':'PR','C506.1154':'BULK'})\n        inn.change(where=({'BOTSID':'UNH'},{'BOTSID':'BGM'}),change={'C002.1001':'120'})\n\n\n    #*** run the default mapping******************\n    orders2idoc.main(inn,out)\n\n\n    #*** post-mapping *******************\n    # Post-mapping to adjust or add to the mapped output.\n    # Delete unwanted text that is sent on their orders\n    out.delete({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKT2','TDLINE':'TOTAL EXCL. GST AUD'})\n    # Additional mapping: map buyer name from NAD+AB:\n    out.put({'BOTSID':'EDI_DC40'},{'BOTSID':'E1EDK01'},{'BOTSID':'E1EDKA1','PARVW':'AG',\n            'BNAME':inn.get({'BOTSID':'UNH'},{'BOTSID':'NAD','3035':'AB','C056.3412':None})})  Some details and tips:   Make the default mapping is as generic as possible (eg. checking\n    multiple fields).  Do not not put any partner specific implementation mapping in here  All mapping scripts are in the same directory (for the incoming\n    editype)", 
            "title": "By Example"
        }, 
        {
            "location": "/TranslationperPartnerExtended/#plugin", 
            "text": "Plugin 'demo_partnerdependent' at  the bots sourceforge\nsite  demonstrates\nthe use of default mappings and imports.", 
            "title": "Plugin"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/", 
            "text": "Partner dependent syntax\n\n\nFor outgoing messages it is possible to specify a partner dependent syntax.\n\nThis is especially useful for x12 and edifact, for setting envelope\nvalues and partner specific separators.\n\nThese parameters override the settings in the message grammar; you only\nneed to specify the partner-specific parameters.\n\nNote: no need to set partner specific separators for incoming messages;\nbots will figure this out by itself.\n\nTo set partner specific syntax parameters, create according to editype\nused:\n\n\n\n\nbots/usersys/partners/x12/partnerid.py\n\n\nbots/usersys/partners/edifact/partnerid.py\n\n\n\n\nExample file with partner specific setting (x12):\n\n\n\n\nsyntax = {\n'ISA05'                  : 'XX',    #use different communication qualifier for sender\n'ISA07'                  : 'ZZ',    #use different communication qualifier for receiver\n'field_sep'              : '|',     #use different field separator\n}\n\n\n\n\n\nExample file with partner specific setting (edifact):\n\n\n\n\nsyntax = {\n'merge':False,\n'forceUNA':True,\n'UNB.S002.0007':'ZZ',        # partner qualifier\n'UNB.S003.0007':'ZZ',        # partner qualifier\n}\n\n\n\n\n\nPlugin\n\n\nPlugin 'demo_partnerdependent' at \nthe bots sourceforge\nsite\n demonstrates\npartner dependent syntax.\n\n\nRelevant x12 syntax settings\n\n\n\n\n\n\n\n\nName\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nISA05\n\n\n01\n\n\nInterchange ID Sender Qualifier\n\n\n\n\n\n\nISA07\n\n\n01\n\n\nInterchange ID Receiver Qualifier\n\n\n\n\n\n\nISA15\n\n\nP\n\n\nTestindicator: P(roduction) or T(est); mostly set per message/transaction.\n\n\n\n\n\n\nGS07\n\n\nX\n\n\nResponsible Agency Code\n\n\n\n\n\n\nversion\n\n\n00403\n\n\nAs ISA12\n\n\n\n\n\n\nfunctionalgroup\n\n\n\n\nAs GS01; set this for each x12 messagetype\n\n\n\n\n\n\nrecord_sep\n\n\n~\n\n\nSegment terminator.\n\n\n\n\n\n\nfield_sep\n\n\n*\n\n\n\n\n\n\n\n\nsfield_sep\n\n\n>\n\n\nSub-field separator (in composites).\n\n\n\n\n\n\nmerge\n\n\nTrue\n\n\nMerge messages to envelopes (False: no merging, only envelope).\n\n\n\n\n\n\nadd_crlfafterrecord_sep\n\n\n\\r\\n\n\n\nAdds CR/LF after each segment.\n\n\n\n\n\n\n\n\nRelevant edifact syntax settings\n\n\n\n\n\n\n\n\nName\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUNB.S002.0007\n\n\n14\n\n\nIdentification code qualifier\n\n\n\n\n\n\nUNB.S002.0008\n\n\n\n\nInterchange sender internal identification\n\n\n\n\n\n\nUNB.S002.0042\n\n\n\n\nInterchange sender internal sub-identification\n\n\n\n\n\n\nUNB.S003.0007\n\n\n14\n\n\nIdentification code qualifier\n\n\n\n\n\n\nUNB.S003.0014\n\n\n\n\nInterchange recipient internal identification\n\n\n\n\n\n\nUNB.S003.0046\n\n\n\n\nInterchange recipient internal sub-identification\n\n\n\n\n\n\nUNB.S005.0022\n\n\n\n\nRecipient reference/password\n\n\n\n\n\n\nUNB.S005.0025\n\n\n\n\nRecipient reference/password qualifier\n\n\n\n\n\n\nUNB.0026\n\n\n\n\nApplication reference\n\n\n\n\n\n\nUNB.0029\n\n\n\n\nProcessing priority code\n\n\n\n\n\n\nUNB.0031\n\n\n\n\nAcknowledgement request\n\n\n\n\n\n\nUNB.0032\n\n\n\n\nInterchange agreement identifier (eg. EANCOM)\n\n\n\n\n\n\nUNB.0035\n\n\n0\n\n\nTestindicator. Mostly set per message.\n\n\n\n\n\n\ncharset\n\n\nUNOA\n\n\nAs S001.0001\n\n\n\n\n\n\nversion\n\n\n3\n\n\nAs S001.0002\n\n\n\n\n\n\nmerge\n\n\nTrue\n\n\nMerge messages to envelopes (False: no merging, only envelope).\n\n\n\n\n\n\nforceUNA\n\n\nFalse\n\n\nAlways use UNA in outgoing edifact, even if not strictly needed.\n\n\n\n\n\n\nadd_crlfafterrecord_sep\n\n\n\\r\\n\n\n\nAdds CR/LF after each segment.", 
            "title": "Partner dependent syntax"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/#partner-dependent-syntax", 
            "text": "For outgoing messages it is possible to specify a partner dependent syntax. \nThis is especially useful for x12 and edifact, for setting envelope\nvalues and partner specific separators. \nThese parameters override the settings in the message grammar; you only\nneed to specify the partner-specific parameters. \nNote: no need to set partner specific separators for incoming messages;\nbots will figure this out by itself. \nTo set partner specific syntax parameters, create according to editype\nused:   bots/usersys/partners/x12/partnerid.py  bots/usersys/partners/edifact/partnerid.py   Example file with partner specific setting (x12):   syntax = {\n'ISA05'                  : 'XX',    #use different communication qualifier for sender\n'ISA07'                  : 'ZZ',    #use different communication qualifier for receiver\n'field_sep'              : '|',     #use different field separator\n}   Example file with partner specific setting (edifact):   syntax = {\n'merge':False,\n'forceUNA':True,\n'UNB.S002.0007':'ZZ',        # partner qualifier\n'UNB.S003.0007':'ZZ',        # partner qualifier\n}", 
            "title": "Partner dependent syntax"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/#plugin", 
            "text": "Plugin 'demo_partnerdependent' at  the bots sourceforge\nsite  demonstrates\npartner dependent syntax.", 
            "title": "Plugin"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/#relevant-x12-syntax-settings", 
            "text": "Name  Default  Description      ISA05  01  Interchange ID Sender Qualifier    ISA07  01  Interchange ID Receiver Qualifier    ISA15  P  Testindicator: P(roduction) or T(est); mostly set per message/transaction.    GS07  X  Responsible Agency Code    version  00403  As ISA12    functionalgroup   As GS01; set this for each x12 messagetype    record_sep  ~  Segment terminator.    field_sep  *     sfield_sep  >  Sub-field separator (in composites).    merge  True  Merge messages to envelopes (False: no merging, only envelope).    add_crlfafterrecord_sep  \\r\\n  Adds CR/LF after each segment.", 
            "title": "Relevant x12 syntax settings"
        }, 
        {
            "location": "/GrammarsPartnerSyntax/#relevant-edifact-syntax-settings", 
            "text": "Name  Default  Description      UNB.S002.0007  14  Identification code qualifier    UNB.S002.0008   Interchange sender internal identification    UNB.S002.0042   Interchange sender internal sub-identification    UNB.S003.0007  14  Identification code qualifier    UNB.S003.0014   Interchange recipient internal identification    UNB.S003.0046   Interchange recipient internal sub-identification    UNB.S005.0022   Recipient reference/password    UNB.S005.0025   Recipient reference/password qualifier    UNB.0026   Application reference    UNB.0029   Processing priority code    UNB.0031   Acknowledgement request    UNB.0032   Interchange agreement identifier (eg. EANCOM)    UNB.0035  0  Testindicator. Mostly set per message.    charset  UNOA  As S001.0001    version  3  As S001.0002    merge  True  Merge messages to envelopes (False: no merging, only envelope).    forceUNA  False  Always use UNA in outgoing edifact, even if not strictly needed.    add_crlfafterrecord_sep  \\r\\n  Adds CR/LF after each segment.", 
            "title": "Relevant edifact syntax settings"
        }, 
        {
            "location": "/ConfigurationPartnerGroup/", 
            "text": "Using partner groups\n\n\nedi-partners can be assigned to groups.\n\n\nThis might come in handy:\n\n\n\n\npartner dependent translations (in\n    \nbots-monitor->Configuration->Translations\n). Select a group here,\n    and translation is done for all members of the group.\n\n\npartner-based filtering for routes/outchannel (in\n    \nbots-monitor->Configuration->Routes\n): the outchannel is used for\n    all members of the group.\n\n\nin selections you can use partner-groups.\n\n    Note: partner-groups do not work for confirmations.\n\n\n\n\nHow to\n\n\n\n\nCreate a group in \nbots-monitor->Configuration->Partners \n\n    groups\n. Indicate it is a group using tick-box 'Isgroup'.\n\n\nFor the partners in a group, assign them to this group using 'Is in\n    groups'.\n\n\n\n\nPlugin\n\n\nPlugin 'demo_partnerdependent' at \nthe bots sourceforge\nsite\n demonstrates\npartner-groups.", 
            "title": "Partner groups"
        }, 
        {
            "location": "/ConfigurationPartnerGroup/#using-partner-groups", 
            "text": "edi-partners can be assigned to groups.  This might come in handy:   partner dependent translations (in\n     bots-monitor->Configuration->Translations ). Select a group here,\n    and translation is done for all members of the group.  partner-based filtering for routes/outchannel (in\n     bots-monitor->Configuration->Routes ): the outchannel is used for\n    all members of the group.  in selections you can use partner-groups. \n    Note: partner-groups do not work for confirmations.", 
            "title": "Using partner groups"
        }, 
        {
            "location": "/ConfigurationPartnerGroup/#how-to", 
            "text": "Create a group in  bots-monitor->Configuration->Partners  \n    groups . Indicate it is a group using tick-box 'Isgroup'.  For the partners in a group, assign them to this group using 'Is in\n    groups'.", 
            "title": "How to"
        }, 
        {
            "location": "/ConfigurationPartnerGroup/#plugin", 
            "text": "Plugin 'demo_partnerdependent' at  the bots sourceforge\nsite  demonstrates\npartner-groups.", 
            "title": "Plugin"
        }, 
        {
            "location": "/ChannelsRecipes/", 
            "text": "Channel Recipes\n\n\nEmail (smtp, pop3) and partners\n\n\nFor email channels, you need to configure partners with their email\naddresses.\n\nConfigure partners: \nbots-monitor->Configuration->Partners\n.\n\nA partner can have a different email address per channel, if not the\ndefault email addres is used.\n\nIs it needed to configure the partners because:\n\n\n\n\nfor incoming messages, to determine whether an email is from a valid\n    sender. Email from unknown partners are errors (think of spam).\n\n\nfor outgoing message, to determine the destination address.\n\n\n\n\nConfiguring a partner for email:\n\n\nConfigure a partner: \nbots-monitor->Configuration->Partners\n.", 
            "title": "Email addresses"
        }, 
        {
            "location": "/ChannelsRecipes/#channel-recipes", 
            "text": "", 
            "title": "Channel Recipes"
        }, 
        {
            "location": "/ChannelsRecipes/#email-smtp-pop3-and-partners", 
            "text": "For email channels, you need to configure partners with their email\naddresses. \nConfigure partners:  bots-monitor->Configuration->Partners . \nA partner can have a different email address per channel, if not the\ndefault email addres is used. \nIs it needed to configure the partners because:   for incoming messages, to determine whether an email is from a valid\n    sender. Email from unknown partners are errors (think of spam).  for outgoing message, to determine the destination address.   Configuring a partner for email:  Configure a partner:  bots-monitor->Configuration->Partners .", 
            "title": "Email (smtp, pop3) and partners"
        }, 
        {
            "location": "/MappingPartnerLookup/", 
            "text": "Partner look-up (bots>=3.0)\n\n\nOften there is a need to retrieve data from a partner, using a IDpartner. \nThink of: \n-   check if partner is active \n-   get name/address of partner \n-   get senderID for partner \n\n\nRecipe\n\n\nGet the value in field 'attr1' for the IDpartner.\n\nSee partners in \nbots-monitor->Configuration->Partners\n for possible\nfields.\n\n\ntransform.partnerlookup('buyer1','attr1',safe=True)\n\n\n\nCheck if a partner exists, and is active. If not, raise an exception.\n\n\ntransform.partnerlookup('buyer1','active')\n\n\n\n\n\n\n\n\n\nValue for safe\n\n\nIf a record matching your lookup does not exist, or the requested field is empty\n\n\n\n\n\n\n\n\n\n\nsafe=False\n(default)\n\n\nAn exception is raised You can check for this in your script if required and take action\n\n\n\n\n\n\nsafe=True\n\n\nNo exception is raised, just returns the lookup value  eg. to lookup a user defined field for partner translation on some partners\n\n\n\n\n\n\nsafe=None\n(Bots>=3.2)\n\n\nNo exception is raised, returns None eg. to get address lines where not all partners have addresses, but this is not an error\n\n\n\n\n\n\n\n\nLookup using a field other than IDpartner\n\n\nThis is similar to reverse code conversion, but can look up any partner\nfield and return any other partner field. Beware of performance issues\nif you have a large number of partners. Also there may be multiple\nmatches if the lookup is not unique, only one is returned.\n\n\nGet the value in field 'name' by looking up value in 'attr2'.\n\n\ntransform.partnerlookup('my attribute','name','attr2',safe=True)\n\n\n\nNotes\n\n\n\n\n\n\nIn bots\\\n3.0 this was possible using \ncode conversion\n.\n    But this could lead to situations where partners where both in\n    \nbots-monitor->Configuration->Partners \n groups\n and in code\n    conversions.\n\n\n\n\n\n\npartners have more fields in bots>=3.0 like name, address, 'free'\n    fields.", 
            "title": "Partner look-up"
        }, 
        {
            "location": "/MappingPartnerLookup/#partner-look-up-bots6230", 
            "text": "Often there is a need to retrieve data from a partner, using a IDpartner. \nThink of: \n-   check if partner is active \n-   get name/address of partner \n-   get senderID for partner", 
            "title": "Partner look-up (bots>=3.0)"
        }, 
        {
            "location": "/MappingPartnerLookup/#recipe", 
            "text": "Get the value in field 'attr1' for the IDpartner. \nSee partners in  bots-monitor->Configuration->Partners  for possible\nfields.  transform.partnerlookup('buyer1','attr1',safe=True)  Check if a partner exists, and is active. If not, raise an exception.  transform.partnerlookup('buyer1','active')     Value for safe  If a record matching your lookup does not exist, or the requested field is empty      safe=False (default)  An exception is raised You can check for this in your script if required and take action    safe=True  No exception is raised, just returns the lookup value  eg. to lookup a user defined field for partner translation on some partners    safe=None (Bots>=3.2)  No exception is raised, returns None eg. to get address lines where not all partners have addresses, but this is not an error", 
            "title": "Recipe"
        }, 
        {
            "location": "/MappingPartnerLookup/#lookup-using-a-field-other-than-idpartner", 
            "text": "This is similar to reverse code conversion, but can look up any partner\nfield and return any other partner field. Beware of performance issues\nif you have a large number of partners. Also there may be multiple\nmatches if the lookup is not unique, only one is returned.  Get the value in field 'name' by looking up value in 'attr2'.  transform.partnerlookup('my attribute','name','attr2',safe=True)", 
            "title": "Lookup using a field other than IDpartner"
        }, 
        {
            "location": "/MappingPartnerLookup/#notes", 
            "text": "In bots\\ 3.0 this was possible using  code conversion .\n    But this could lead to situations where partners where both in\n     bots-monitor->Configuration->Partners   groups  and in code\n    conversions.    partners have more fields in bots>=3.0 like name, address, 'free'\n    fields.", 
            "title": "Notes"
        }, 
        {
            "location": "/EnvelopeScripting/", 
            "text": "Envelope scripting\n\n\nYou can use an envelopescript to do custom enveloping for edifact, \nx12, tradacoms, xml. Exit points that can be used: \n\n\n\n\nta_infocontent(ta_info) * at start of enveloping\n    process. ta_info contains the values that are used to write the\n    envelope; you can change these values. \n\n\nenvelopecontent(ta_info,out) * after bots has built the envelope\n    tree you can make changes to the envelope tree by using put(), change()\n    etc.\n\n\n\n\nFunctions should be in\n\nbots/usersys/envelopescripts/\neditype\n/\neditype\n.py\n, eg:\n\n\n\n\nbots/usersys/envelopescripts/edifact/edifact.py\n\n\nbots/usersys/envelopescripts/x12/x12.py\n\n\n\n\nExamples\n\n\nExample 1\n\n\nNote that this affects all outgoing edifact documents. Add conditional\nlogic if needed.\n\nIn file \nbots/usersys/envelopescripts/edifact/edifact.py\n:\n\n\ndef envelopecontent(ta_info,out,*args,**kwargs):\n    ''' Add extra fields to the edifact envelope.'''\n    out.put({'BOTSID':'UNB','S002.0008': 'PARTNER1'}) #Interchange sender internal identification\n    out.put({'BOTSID':'UNB','S003.0014': 'PARTNER2'}) #Interchange recipient internal identification\n    out.put({'BOTSID':'UNB','0029': 'A'})             #Processing priority code\n    out.put({'BOTSID':'UNB','0032': 'EANCOM'})        #Interchange agreement identifier\n\n\n\nExample 2\n\n\nIn file \nbots/usersys/envelopescripts/edifact/edifact.py\n:\n\n\ndef ta_infocontent(ta_info,*args,**kwargs):\n    ''' function is called before envelope tree is made.\n        values in ta_info will be used to create envelope.\n    '''\n    if ta_info['topartner'] == '1111111111111':\n        ta_info['topartner'] = 'XXXXXXXXXXXXXXXXX'\n        ta_info['UNB.S003.0014'] = '012345'\n\n\n\nExample 3\n\n\nIn file \nbots/usersys/envelopescripts/edifact/edifact.py\n:\n\n\ndef envelopecontent(ta_info,out,*args,**kwargs):\n    ''' function is called after envelope tree is made, but not written yet.\n        manipulate envelope tree itself.\n    '''\n    if ta_info['topartner'] == '1111111111111':\n        out.change(where=({'BOTSID':'UNB'},),change={'S003.0010': 'XXXXXXXXXXXXXXXXX'}) #field S003.0010 (receiver) is written to envelope tree\n        out.put({'BOTSID':'UNB','S003.0014': '012345'}) #field S003.0014 is written to envelope tree\n        ta_info['topartner'] = 'XXXXXXXXXXXXXXXXX'      #takes only care of changing the partnerID in bots interface (does not change envelope itself)", 
            "title": "Envelope scripting"
        }, 
        {
            "location": "/EnvelopeScripting/#envelope-scripting", 
            "text": "You can use an envelopescript to do custom enveloping for edifact, \nx12, tradacoms, xml. Exit points that can be used:    ta_infocontent(ta_info) * at start of enveloping\n    process. ta_info contains the values that are used to write the\n    envelope; you can change these values.   envelopecontent(ta_info,out) * after bots has built the envelope\n    tree you can make changes to the envelope tree by using put(), change()\n    etc.   Functions should be in bots/usersys/envelopescripts/ editype / editype .py , eg:   bots/usersys/envelopescripts/edifact/edifact.py  bots/usersys/envelopescripts/x12/x12.py", 
            "title": "Envelope scripting"
        }, 
        {
            "location": "/EnvelopeScripting/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/EnvelopeScripting/#example-1", 
            "text": "Note that this affects all outgoing edifact documents. Add conditional\nlogic if needed. \nIn file  bots/usersys/envelopescripts/edifact/edifact.py :  def envelopecontent(ta_info,out,*args,**kwargs):\n    ''' Add extra fields to the edifact envelope.'''\n    out.put({'BOTSID':'UNB','S002.0008': 'PARTNER1'}) #Interchange sender internal identification\n    out.put({'BOTSID':'UNB','S003.0014': 'PARTNER2'}) #Interchange recipient internal identification\n    out.put({'BOTSID':'UNB','0029': 'A'})             #Processing priority code\n    out.put({'BOTSID':'UNB','0032': 'EANCOM'})        #Interchange agreement identifier", 
            "title": "Example 1"
        }, 
        {
            "location": "/EnvelopeScripting/#example-2", 
            "text": "In file  bots/usersys/envelopescripts/edifact/edifact.py :  def ta_infocontent(ta_info,*args,**kwargs):\n    ''' function is called before envelope tree is made.\n        values in ta_info will be used to create envelope.\n    '''\n    if ta_info['topartner'] == '1111111111111':\n        ta_info['topartner'] = 'XXXXXXXXXXXXXXXXX'\n        ta_info['UNB.S003.0014'] = '012345'", 
            "title": "Example 2"
        }, 
        {
            "location": "/EnvelopeScripting/#example-3", 
            "text": "In file  bots/usersys/envelopescripts/edifact/edifact.py :  def envelopecontent(ta_info,out,*args,**kwargs):\n    ''' function is called after envelope tree is made, but not written yet.\n        manipulate envelope tree itself.\n    '''\n    if ta_info['topartner'] == '1111111111111':\n        out.change(where=({'BOTSID':'UNB'},),change={'S003.0010': 'XXXXXXXXXXXXXXXXX'}) #field S003.0010 (receiver) is written to envelope tree\n        out.put({'BOTSID':'UNB','S003.0014': '012345'}) #field S003.0014 is written to envelope tree\n        ta_info['topartner'] = 'XXXXXXXXXXXXXXXXX'      #takes only care of changing the partnerID in bots interface (does not change envelope itself)", 
            "title": "Example 3"
        }, 
        {
            "location": "/Charsets/", 
            "text": "Characters sets, encoding and unicode\n\n\nThe good news: in\ngeneral Bots handles character sets well.\n\nIncoming files are read using the character-set specified in the\n'incoming' syntax, outgoing files are written using the character-set as\nspecified in the 'outgoing' syntax. You do not need to do anything in\nthe mapping, Bots does the character-set conversion automatically.\n\n\nNotes:\n\n\n\n\nLots of information about this topic can be found on\n    \nwikipedia\n.\n\n\nInformation about the different character-sets in python is \nat \n    python\n    site\n.\n\n\nOutgoing character sets can be set in syntax; this can be done on\n    envelope level, messagetype level of per partner.\n\n\nSometimes character-set conversion is not possible, eg\n    uft-8->ascii, as uft8 can contain characters not in utf8.\n\n\nFor edifact there is an option to do character-set mapping (eg\n    \u00e9->e); this is also possible for x12 (bit more work).\n\n\nNote that x12 can be tricky: the separators used can not be in the\n    data. There is no good workaround for this, best way is to change\n    the separators used.\n\n\n\n\nSpecifics of different character-sets\n\n\n\n\nMost used in edi is ascii, iso-8859-1, uft-8 (xml!).\n\n\nMost familiar is ascii. Note that ascii has only 128 characters! One\n    character is one byte.\n\n\nThe extended asccii character-sets.\n\n\nOne character is always one byte.\n\n\nThe upper 128 (above ascii) are used as special characters (eg\n    \u00e9\u00eb\u00e8).\n\n\nThese  different character-sets are about displaying (on screen,\n    print etc). If the texts is in iso-8859-1, but displayed as eg\n    IBM850 is looks 'wrong'. Note that the content is still the\n    same, it's only the display that is different.\n\n\nIn general these extended ascii character-sets will not be\n    problematic in translations, as segment ID's/tags are in ascii\n    and one character is one byte. In Bots the content of the\n    message will just be fetched and passed to the outgoing message.\n    So if a iso-8859-3 is handled as iso-8859-1 that will generally\n    not be problematic.\n\n\nExamples: iso-8859-1, windows-1252, iso-8859-2, iso-8859-3,\n    IBM850, UNOC, latin1.\n\n\n\n\n\n\nUnicode.\n\n\nExamples: utf-8, utf-16, utf-32, UCS-2\n\n\nUnicode is designed at accommodate much more characters, think\n    of eg Greek, Japanese, Chinese and Klingon characters.\n\n\nOne character is not one byte. (the different Unicode\n    characters-sets use different representation schemes.\n\n\nMuch used is utf-8. Advantage of utf-8 is that the first 128\n    ascii characters are one byte; this is way uft-8 is 'upward\n    compatible' with ascii: a file with only ascii characters is the\n    same in ascii and uft-8.\n\n\nIn Microsoft environments often utf-16 and utf-32 is used.\n\n\nFixed files can not have utf-8 character-set, as one character\n    might be more than one byte.\n\n\n\n\n\n\nEBCDIC :related to (extended) ascii: one character is one byte.\n    There are some variations of EBCDIC (eg extended EBCDIC).\n\n\n\n\nA nasty situation is eg when one partner sends Unicode (eg utf-8), and\nanother sends extended ascii (eg iso-8859-1). These extended characters\nwork quite differently: Bots has to know what character-set is used\nbefore reading them, as these character-sets are treated quite\ndifferently. Best way to solve this is to have receive these files via\ndifferent route(parts). Bots does no 'guessing of character-sets', as\nthis is not appropriate for business data.\n\n\nx12 incoming\n\n\nCharacter set as in envelope is used (if not set here default value of\ngrammar.py is used (ascii)).\n\n\nSome typical issues and solutions:\n\n\n\n\nif partner sends x12 as eg iso-8859-1, just specify this in the\n    syntax of the envelope (\nusersys/grammars/x12/x12.py\n). Note that\n    this is a system-wide setting, this will be used for all incoming\n\n\nShould not be a problem, iso-8859-1 is a superset of ascii. The\ncharacter-set of outgoing files should also be set to handle the\nextended characters. Also check your ERP software: what can it\nhandle?\n\n\n\n\n\n\nsame solution works for utf-8\n\n\n\n\nedifact incoming\n\n\nEdifact has its own character-sets: UNOA, UNOB, UNOC, etc.\n\nIn default bots setup:\n\n\n\n\nUNOA and UNOB have own character-set mapping in \nusersys/charsets\n.\n\n\nother edifact character-sets are aliased in \nconfig/bots.ini\n,\n    section charsets.\n\n\ndefault UNOA and UNOB are not 100% strict but allow some extra\n    characters like .\n\n\nthere are some variations of default UNOA/UNOB in \nsourceforge\n    downloads\n.\n\n\n\n\nSome typical issues and solutions:\n\n\n\n\n\n\nedifact files have 'UNOA' in them, but in fact they send more (UNOC).\n    Solution: use 'unoa_like_unoc.py' from downloads, save in\n    \nusersys/charsets\n and rename to unoa.py\n\n\n\n\n\n\npartner sends UNOC character-set, but my system can only handle ascii.\n    Solution: use 'unoa_like_unoc.py' from downloads; if you open this\n    file you can see a character mapping (note that incoming is a different\n    character mapping as outgoing). You can map eg incoming \u00e9->e (etcetc)\n\n\n\n\n\n\nour system uses iso-8859-1, but partner can handle only UNOB. Solution:\n    use 'unoa_like_unoc.py' from downloads; if you open this file you can\n    see a character mapping (note that incoming is a different character\n    mapping as outgoing). You can map eg outgoing \u00e9->e (etc etc)", 
            "title": "Character-sets/unicode"
        }, 
        {
            "location": "/Charsets/#characters-sets-encoding-and-unicode", 
            "text": "The good news: in\ngeneral Bots handles character sets well. \nIncoming files are read using the character-set specified in the\n'incoming' syntax, outgoing files are written using the character-set as\nspecified in the 'outgoing' syntax. You do not need to do anything in\nthe mapping, Bots does the character-set conversion automatically.  Notes:   Lots of information about this topic can be found on\n     wikipedia .  Information about the different character-sets in python is  at \n    python\n    site .  Outgoing character sets can be set in syntax; this can be done on\n    envelope level, messagetype level of per partner.  Sometimes character-set conversion is not possible, eg\n    uft-8->ascii, as uft8 can contain characters not in utf8.  For edifact there is an option to do character-set mapping (eg\n    \u00e9->e); this is also possible for x12 (bit more work).  Note that x12 can be tricky: the separators used can not be in the\n    data. There is no good workaround for this, best way is to change\n    the separators used.", 
            "title": "Characters sets, encoding and unicode"
        }, 
        {
            "location": "/Charsets/#specifics-of-different-character-sets", 
            "text": "Most used in edi is ascii, iso-8859-1, uft-8 (xml!).  Most familiar is ascii. Note that ascii has only 128 characters! One\n    character is one byte.  The extended asccii character-sets.  One character is always one byte.  The upper 128 (above ascii) are used as special characters (eg\n    \u00e9\u00eb\u00e8).  These  different character-sets are about displaying (on screen,\n    print etc). If the texts is in iso-8859-1, but displayed as eg\n    IBM850 is looks 'wrong'. Note that the content is still the\n    same, it's only the display that is different.  In general these extended ascii character-sets will not be\n    problematic in translations, as segment ID's/tags are in ascii\n    and one character is one byte. In Bots the content of the\n    message will just be fetched and passed to the outgoing message.\n    So if a iso-8859-3 is handled as iso-8859-1 that will generally\n    not be problematic.  Examples: iso-8859-1, windows-1252, iso-8859-2, iso-8859-3,\n    IBM850, UNOC, latin1.    Unicode.  Examples: utf-8, utf-16, utf-32, UCS-2  Unicode is designed at accommodate much more characters, think\n    of eg Greek, Japanese, Chinese and Klingon characters.  One character is not one byte. (the different Unicode\n    characters-sets use different representation schemes.  Much used is utf-8. Advantage of utf-8 is that the first 128\n    ascii characters are one byte; this is way uft-8 is 'upward\n    compatible' with ascii: a file with only ascii characters is the\n    same in ascii and uft-8.  In Microsoft environments often utf-16 and utf-32 is used.  Fixed files can not have utf-8 character-set, as one character\n    might be more than one byte.    EBCDIC :related to (extended) ascii: one character is one byte.\n    There are some variations of EBCDIC (eg extended EBCDIC).   A nasty situation is eg when one partner sends Unicode (eg utf-8), and\nanother sends extended ascii (eg iso-8859-1). These extended characters\nwork quite differently: Bots has to know what character-set is used\nbefore reading them, as these character-sets are treated quite\ndifferently. Best way to solve this is to have receive these files via\ndifferent route(parts). Bots does no 'guessing of character-sets', as\nthis is not appropriate for business data.", 
            "title": "Specifics of different character-sets"
        }, 
        {
            "location": "/Charsets/#x12-incoming", 
            "text": "Character set as in envelope is used (if not set here default value of\ngrammar.py is used (ascii)).  Some typical issues and solutions:   if partner sends x12 as eg iso-8859-1, just specify this in the\n    syntax of the envelope ( usersys/grammars/x12/x12.py ). Note that\n    this is a system-wide setting, this will be used for all incoming  Should not be a problem, iso-8859-1 is a superset of ascii. The\ncharacter-set of outgoing files should also be set to handle the\nextended characters. Also check your ERP software: what can it\nhandle?    same solution works for utf-8", 
            "title": "x12 incoming"
        }, 
        {
            "location": "/Charsets/#edifact-incoming", 
            "text": "Edifact has its own character-sets: UNOA, UNOB, UNOC, etc. \nIn default bots setup:   UNOA and UNOB have own character-set mapping in  usersys/charsets .  other edifact character-sets are aliased in  config/bots.ini ,\n    section charsets.  default UNOA and UNOB are not 100% strict but allow some extra\n    characters like .  there are some variations of default UNOA/UNOB in  sourceforge\n    downloads .   Some typical issues and solutions:    edifact files have 'UNOA' in them, but in fact they send more (UNOC).\n    Solution: use 'unoa_like_unoc.py' from downloads, save in\n     usersys/charsets  and rename to unoa.py    partner sends UNOC character-set, but my system can only handle ascii.\n    Solution: use 'unoa_like_unoc.py' from downloads; if you open this\n    file you can see a character mapping (note that incoming is a different\n    character mapping as outgoing). You can map eg incoming \u00e9->e (etcetc)    our system uses iso-8859-1, but partner can handle only UNOB. Solution:\n    use 'unoa_like_unoc.py' from downloads; if you open this file you can\n    see a character mapping (note that incoming is a different character\n    mapping as outgoing). You can map eg outgoing \u00e9->e (etc etc)", 
            "title": "edifact incoming"
        }, 
        {
            "location": "/Debug/", 
            "text": "Standard: via bots-monitor\n\n\n\n\nthe reports-screen gives an overview of what happened in a run. \n\n\nif there are process errors in a run, first view the process errors! \n\n\nthe incoming-screen gives information about the results of each incoming file\n\n\nfor each incoming edi-file: view the detail-screen for information about the processing\n    steps for incoming/outgoing edi file (in incoming-screen move your mouse\n    to the star at the start of the line, a drop-down box will appear,\n    choose 'details'.\n\n\nview the outgoing files, including communication errors for outgoing files.\n\n\n\n\nExtended debug options\n\n\nNote: the errors bots gives for incoming edi-files are quite accurate;-))\n\n\n\n\n\n\nin config/bots.ini there is the parameter get_checklevel. Set to to\n    2 for developing. Than all gets/puts are checked with the\n    grammar(s).\n\n\n\n\nFor production use 1 (does sanity checks on get/puts) or 0 (which\nis fastest, but if errors gives probably strange error-messages).\n\n\n\n\n\n\n\n\nif wished, use extended errors: parameter 'debug' in\n    \nbots.ini\n; gives information about the\n    place in the code where the error occurred.\n\n\n\n\nlogging. Logging can be found in botssys/logging. Parameters in\n    \nbots.ini\n can be set to get more debug\n    information:\n\n\nlog_file_level: set to DEBUG to get extended information.\\\n\n\nreadrecorddebug: information about the records that are read and\n    their content.\n\n\nmappingdebug: information about the results of get()/put() in\n    the mapping script. Note: in bots 3.0.0 this does not work\n    (bug). Fix: in botsinit.py, line 188 should be:\n    botsglobal.logmap = logging.getLogger('\nengine.map\n')\n\n\n\n\n\n\nextended log information for some communication protocols in\n    \nbots.ini\n: ftpdebug, smtpdebug,\n    pop3debug. This debug-information is on the console/command line.\n\n\nwithin a mapping script (or other user script) use 'print', output\n    can be viewed on the console/command line.\n\n\nuse root.display() to see message content in mapping script:\n\n\nincoming messages: at the start of the main function\n    \ninn.root.display()\n\n\noutgoing messages: at the end of the main function:\n    \nout.root.display()\n\n\n\n\n\n\n\n\n\n\nroot.display() is not the nicest output, but is definitely what you\nreceive/have generated.\n\n\n\n\nTips for debugging\n\n\n\n\nif a run has process errors, first check the process errors!\n\n\n\n\nBe careful with character-set/encoding:\n\n\n\n\nCan your editor handle this? Be careful with editing files and\n    saving these again, you might run into issues with\n    character-set/encodings!\n\n\nAre you familiar with the character-set you use? Are you familiar\n    with eg utf-8? If not, please check this first.\n\n\n\n\n\n\n\n\nin reality, edifact and x12 messages contains errors. Especially when\n    'found on internet'; lot of ISA headers for X12 are not OK!", 
            "title": "How to debug"
        }, 
        {
            "location": "/Debug/#standard-via-bots-monitor", 
            "text": "the reports-screen gives an overview of what happened in a run.   if there are process errors in a run, first view the process errors!   the incoming-screen gives information about the results of each incoming file  for each incoming edi-file: view the detail-screen for information about the processing\n    steps for incoming/outgoing edi file (in incoming-screen move your mouse\n    to the star at the start of the line, a drop-down box will appear,\n    choose 'details'.  view the outgoing files, including communication errors for outgoing files.", 
            "title": "Standard: via bots-monitor"
        }, 
        {
            "location": "/Debug/#extended-debug-options", 
            "text": "Note: the errors bots gives for incoming edi-files are quite accurate;-))    in config/bots.ini there is the parameter get_checklevel. Set to to\n    2 for developing. Than all gets/puts are checked with the\n    grammar(s).   For production use 1 (does sanity checks on get/puts) or 0 (which\nis fastest, but if errors gives probably strange error-messages).     if wished, use extended errors: parameter 'debug' in\n     bots.ini ; gives information about the\n    place in the code where the error occurred.   logging. Logging can be found in botssys/logging. Parameters in\n     bots.ini  can be set to get more debug\n    information:  log_file_level: set to DEBUG to get extended information.\\  readrecorddebug: information about the records that are read and\n    their content.  mappingdebug: information about the results of get()/put() in\n    the mapping script. Note: in bots 3.0.0 this does not work\n    (bug). Fix: in botsinit.py, line 188 should be:\n    botsglobal.logmap = logging.getLogger(' engine.map ')    extended log information for some communication protocols in\n     bots.ini : ftpdebug, smtpdebug,\n    pop3debug. This debug-information is on the console/command line.  within a mapping script (or other user script) use 'print', output\n    can be viewed on the console/command line.  use root.display() to see message content in mapping script:  incoming messages: at the start of the main function\n     inn.root.display()  outgoing messages: at the end of the main function:\n     out.root.display()      root.display() is not the nicest output, but is definitely what you\nreceive/have generated.", 
            "title": "Extended debug options"
        }, 
        {
            "location": "/Debug/#tips-for-debugging", 
            "text": "if a run has process errors, first check the process errors!   Be careful with character-set/encoding:   Can your editor handle this? Be careful with editing files and\n    saving these again, you might run into issues with\n    character-set/encodings!  Are you familiar with the character-set you use? Are you familiar\n    with eg utf-8? If not, please check this first.     in reality, edifact and x12 messages contains errors. Especially when\n    'found on internet'; lot of ISA headers for X12 are not OK!", 
            "title": "Tips for debugging"
        }, 
        {
            "location": "/PluginIntroduction/", 
            "text": "What is a plugin?\n\n\n\n\nA plugin is a file with predefined\n    configuration for bots. It includes routes, channels, grammars, mappings\n    etc. \n\n\nPlugins are installed via \nbots-monitor-Systasks->Read\n    plugin\n. \n\n\nIn order to run the routes in a plugin you first have to\n    activate the routes. \n    There are useful plugins on \nthe bots sourceforge site\n. \n\n\nDocumentation\n for these plugins. Note: grammars for\n    edifact and x12 are NOT plugins, and can not be installed.\n\n\n\n\nFor what is a bots plugin useful?\n\n\n\n\nAn easy way to distribute and share edi configurations for bots.\n\n\nLearn from existing configurations\n\n\nbackup your configuration.\n\n\nshare your configuration with others (It would be nice if you want\n    to share your configuration; other can use and/or learn from what\n    you have done!).\n\n\ndo another install of the same configuration.\n\n\ntransfer your environment from test to production.\n\n\nPlugins are used to update to a new version of bots (only between\n    minor versions).\n\n\n\n\nNote that all bots 3.0.0 plugins are suited to use in \nacceptance test\nmode\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/PluginIntroduction/#what-is-a-plugin", 
            "text": "A plugin is a file with predefined\n    configuration for bots. It includes routes, channels, grammars, mappings\n    etc.   Plugins are installed via  bots-monitor-Systasks->Read\n    plugin .   In order to run the routes in a plugin you first have to\n    activate the routes. \n    There are useful plugins on  the bots sourceforge site .   Documentation  for these plugins. Note: grammars for\n    edifact and x12 are NOT plugins, and can not be installed.", 
            "title": "What is a plugin?"
        }, 
        {
            "location": "/PluginIntroduction/#for-what-is-a-bots-plugin-useful", 
            "text": "An easy way to distribute and share edi configurations for bots.  Learn from existing configurations  backup your configuration.  share your configuration with others (It would be nice if you want\n    to share your configuration; other can use and/or learn from what\n    you have done!).  do another install of the same configuration.  transfer your environment from test to production.  Plugins are used to update to a new version of bots (only between\n    minor versions).   Note that all bots 3.0.0 plugins are suited to use in  acceptance test\nmode .", 
            "title": "For what is a bots plugin useful?"
        }, 
        {
            "location": "/PluginInstall/", 
            "text": "How to install a plugin\n\n\nProcedure:\n  1. First download the plugin from the \nbots sourceforge site\n to your file system.\n  1. Go to \nbots-monitor-Systasks-\nRead plugin\n\n  1. Select the plugin from your system.\n  1. After selecting choose 'Read'.\n\n\nBots will now report that is has read the plugin.\n\n\nNote 1: in order to run the routes in a plugin you first have to activate the routes.\n\n\nNote 2: grammars for edifact and x12 are NOT plugins, and can not be installed.", 
            "title": "Install a plugin"
        }, 
        {
            "location": "/PluginInstall/#how-to-install-a-plugin", 
            "text": "Procedure:\n  1. First download the plugin from the  bots sourceforge site  to your file system.\n  1. Go to  bots-monitor-Systasks- Read plugin \n  1. Select the plugin from your system.\n  1. After selecting choose 'Read'.  Bots will now report that is has read the plugin.  Note 1: in order to run the routes in a plugin you first have to activate the routes.  Note 2: grammars for edifact and x12 are NOT plugins, and can not be installed.", 
            "title": "How to install a plugin"
        }, 
        {
            "location": "/PluginList/", 
            "text": "Documentation for plugins on bots sourceforge site\n\n\nDownloads at \nthe bots sourceforge\nsite\n \n\n\n\n\nmy_first_plugin \n\n\nThis plugin is used in the the\n    \ntutorial\n. \n\n\nedifact ORDERS to fixed records. \n\n\n\n\n\n\nedifact2xml_ordersdesadvinvoice \n\n\nThe most used edifact messages in one package. \n\n\nedifact ORDERS to xml \n\n\nASN/shipping list:\n    edifact2xml_ordersdesadvinvoice to edifact DESADV. \n\n\nInvoice: xml to to edifact INVOIC. \n\n\n\n\n\n\nx12toxml_supplier_version_850-856-810-997 \n\n\nThe most used x12 messages in one package. \n\n\ntranslate x12 850 -> xml orders. \n\n\nGenerates 997's for the received orders. \n\n\ntranslate xml ASN's -> x12 856; including partner specific translation to 856. \n\n\ntranslate xml invoices -> x12 810. \n\n\n\n\n\n\nx12toxml_retailer_version_850-856-810-997 \n\n\nThe most used x12 messages in one package. \n\n\ntranslate xml orders -> x12 850. \n\n\ntranslate x12 856 -> xml ASN's \n\n\ntranslate x12 810 -> xml invoices \n\n\n\n\n\n\nx12toxml_one-on-one_835-837 \n\n\ntranslate x12 835 > xml and reverse (xml->x12 835) \n\n\ntranslate x12 837 > xml and reverse (xml->x12 837) \n\n\none-on-one mapping: structure of xml is similar to structure of x12 \n\n\nx12 envelopes are included in mapping \n\n\n\n\n\n\ndemo_composite_route \n\n\ndemonstrates the use of composite routes. \n\n\n2 different sources are used for incoming edifact files \n\n\nconvert edifact orders to fixed format. \n\n\nalso converts these orders to print format (html). \n\n\nconvert edifact SLSRPT to csv format. \n\n\nall outgoing messages go to different destination using filtered outchannels \n\n\n\n\n\n\nedifact2fixed_orders-desadv-invoic \n\n\nThe most used edifact messages in one package. \n\n\nSuited for Dutch non-food retailers; \n    probably for a lot of other retailers as well. \n\n\nedifact ORDERS to fixed file format. \n\n\ngenerate a edifact APERAK message (if requested in the order). \n\n\nfixed format ASN/shipping list to a edifact DESADV. \n\n\nfixed format invoice to edifact INVOIC. \n\n\n\n\n\n\ndemo_working_with_partners demonstrates the use of partner \n    dependent functionalities in bots: \n\n\nparter dependent translations. \n\n\nuser of 'default translation' and imports. \n\n\npartner dependent syntax. \n\n\nuse of partner-lookup in the database. \n\n\nuse of partner groups. \n\n\ndifferent destinations/outchannels for partners. \n\n\nadvanced usage of ISA qualifiers/partnerID. Your partnerID is used to lookup the\n    ediID and ISA qualifier in database (and of course vice versa). \n\n\n\n\n\n\ndemo_sap_idoc_orders_WPPLU \n\n\nedifact D96A ORDERS to idoc ORDERS01. \n\n\nedifact D96A PRICAT to idoc WP_PLU02. \n\n\nidoc ORDERS01 to edifact D96A ORDERS. \n\n\nidoc WP_PLU02 to edifact D96A PRICAT. \n\n\n\n\n\n\ndemo_communicationscript \n\n\nDemonstrates user communication scripting. \n\n\nIncoming edi-messages can be passed one by one or as one batch. \n\n\n\n\n\n\ndemo_databasecommunication \n\n\nDemonstrates database communication scripts; both reading and writing (in separate routes). \n\n\nA test database comes with the plugin. \n\n\n\n\n\n\ndemo_mdn_confirmations \n\n\nDemo configuration for MDN (email confirmations) \n\n\nSee also documentation about confirmations. \n\n\n\n\n\n\ndemo_one-on-one_edifactorder2xml \n\n\nTranslates a edifact ORDERS D96A message to xml-message using edifact \n    tags as xml-elements and vice versa. \n\n\nFor those who like processing xml instead of edifact. \n\n\nIt is quite easy to add other edifact messages types for similar\n    translations. \n\n\n\n\n\n\nedifact2json_invoic \n\n\nTranslates edifact D96A invoice to JSON en vice versa. \n\n\nedifact_ordertoprint \n\n\nTranslates a edifact ORDERS D96A message into a readable format (HTML). \n\n\nOf course you can print the order, so it is like a (edi)fax. \n\n\n\n\n\n\nedifact_orders2csv_and_vv \n\n\nTranslates edifact D96A orders to csv en vice versa. \n\n\nThere a 2 variants: csv with or without record\n    tags (csv from eg excel is often without records tags). \n\n\n\n\n\n\nedifact_pricat-slsrpt \n\n\nCsv to edifact PRICAT. \n\n\nEdifact SLSRPT to csv. \n\n\n\n\n\n\ndemo_preprocessing \n\n\nThis plugin demonstrate preprocessing:\n    the incoming edifact-files start with an number of '#' and '@'. \n    These characters are removed by preprocessing the files. \n\n\n\n\n\n\n\n\nDocumentation on the contributed plugins on the bots web site\n\n\n\n\nalto_seperate_headers_details \n\n\ninput: 2 csv files, one with headers, one with details lines. \n\n\nthis is processed into one idoc (so the headers and details are merged). \n\n\nSame technique is also usable for fixed format. \n\n\n\n\n\n\n\n\nx12_837_4010_to_x12_837_5010 \n\n\n\n\nconverts (physician) insurance claims (x12 837) in the version 4010 to\n    the new, upcoming, 5010 version. The mapping file is rudimentary, but I\n    believe the conversion is OK. I found that removing the one REF file\n    creates a version 5010 file that is accepted and processed properly by\n    Anvicare, the clearing house for my commercial claims. I have included\n    anonymized input edi transactions for Medicare, Blue Shield and\n    commercial insurers. My approach is to try the translation as is, and to\n    make corrections in the mapping file only if I get errors from the\n    clearing house. Medicare and Blue Shield provide comprehensive error\n    checking function. However, they do not yet accept 5010 transactions,\n    even for testing purposes. The clearing house accepts 5010 transactions,\n    and they work.\n\n    Mind: setting the parties in the GS envelopes works for bots up from\n    1.6.3\n\n\n\n\n\n\n\n\nx12_fixed_2_810\n\n\n\n\nconverts fixed inhouse to x12 810 including calculation of\n    invoice totals etc and partner specific seperators.", 
            "title": "Plugins at sourceforge"
        }, 
        {
            "location": "/PluginList/#documentation-for-plugins-on-bots-sourceforge-site", 
            "text": "Downloads at  the bots sourceforge\nsite     my_first_plugin   This plugin is used in the the\n     tutorial .   edifact ORDERS to fixed records.     edifact2xml_ordersdesadvinvoice   The most used edifact messages in one package.   edifact ORDERS to xml   ASN/shipping list:\n    edifact2xml_ordersdesadvinvoice to edifact DESADV.   Invoice: xml to to edifact INVOIC.     x12toxml_supplier_version_850-856-810-997   The most used x12 messages in one package.   translate x12 850 -> xml orders.   Generates 997's for the received orders.   translate xml ASN's -> x12 856; including partner specific translation to 856.   translate xml invoices -> x12 810.     x12toxml_retailer_version_850-856-810-997   The most used x12 messages in one package.   translate xml orders -> x12 850.   translate x12 856 -> xml ASN's   translate x12 810 -> xml invoices     x12toxml_one-on-one_835-837   translate x12 835 > xml and reverse (xml->x12 835)   translate x12 837 > xml and reverse (xml->x12 837)   one-on-one mapping: structure of xml is similar to structure of x12   x12 envelopes are included in mapping     demo_composite_route   demonstrates the use of composite routes.   2 different sources are used for incoming edifact files   convert edifact orders to fixed format.   also converts these orders to print format (html).   convert edifact SLSRPT to csv format.   all outgoing messages go to different destination using filtered outchannels     edifact2fixed_orders-desadv-invoic   The most used edifact messages in one package.   Suited for Dutch non-food retailers; \n    probably for a lot of other retailers as well.   edifact ORDERS to fixed file format.   generate a edifact APERAK message (if requested in the order).   fixed format ASN/shipping list to a edifact DESADV.   fixed format invoice to edifact INVOIC.     demo_working_with_partners demonstrates the use of partner \n    dependent functionalities in bots:   parter dependent translations.   user of 'default translation' and imports.   partner dependent syntax.   use of partner-lookup in the database.   use of partner groups.   different destinations/outchannels for partners.   advanced usage of ISA qualifiers/partnerID. Your partnerID is used to lookup the\n    ediID and ISA qualifier in database (and of course vice versa).     demo_sap_idoc_orders_WPPLU   edifact D96A ORDERS to idoc ORDERS01.   edifact D96A PRICAT to idoc WP_PLU02.   idoc ORDERS01 to edifact D96A ORDERS.   idoc WP_PLU02 to edifact D96A PRICAT.     demo_communicationscript   Demonstrates user communication scripting.   Incoming edi-messages can be passed one by one or as one batch.     demo_databasecommunication   Demonstrates database communication scripts; both reading and writing (in separate routes).   A test database comes with the plugin.     demo_mdn_confirmations   Demo configuration for MDN (email confirmations)   See also documentation about confirmations.     demo_one-on-one_edifactorder2xml   Translates a edifact ORDERS D96A message to xml-message using edifact \n    tags as xml-elements and vice versa.   For those who like processing xml instead of edifact.   It is quite easy to add other edifact messages types for similar\n    translations.     edifact2json_invoic   Translates edifact D96A invoice to JSON en vice versa.   edifact_ordertoprint   Translates a edifact ORDERS D96A message into a readable format (HTML).   Of course you can print the order, so it is like a (edi)fax.     edifact_orders2csv_and_vv   Translates edifact D96A orders to csv en vice versa.   There a 2 variants: csv with or without record\n    tags (csv from eg excel is often without records tags).     edifact_pricat-slsrpt   Csv to edifact PRICAT.   Edifact SLSRPT to csv.     demo_preprocessing   This plugin demonstrate preprocessing:\n    the incoming edifact-files start with an number of '#' and '@'. \n    These characters are removed by preprocessing the files.", 
            "title": "Documentation for plugins on bots sourceforge site"
        }, 
        {
            "location": "/PluginList/#documentation-on-the-contributed-plugins-on-the-bots-web-site", 
            "text": "alto_seperate_headers_details   input: 2 csv files, one with headers, one with details lines.   this is processed into one idoc (so the headers and details are merged).   Same technique is also usable for fixed format.      x12_837_4010_to_x12_837_5010    converts (physician) insurance claims (x12 837) in the version 4010 to\n    the new, upcoming, 5010 version. The mapping file is rudimentary, but I\n    believe the conversion is OK. I found that removing the one REF file\n    creates a version 5010 file that is accepted and processed properly by\n    Anvicare, the clearing house for my commercial claims. I have included\n    anonymized input edi transactions for Medicare, Blue Shield and\n    commercial insurers. My approach is to try the translation as is, and to\n    make corrections in the mapping file only if I get errors from the\n    clearing house. Medicare and Blue Shield provide comprehensive error\n    checking function. However, they do not yet accept 5010 transactions,\n    even for testing purposes. The clearing house accepts 5010 transactions,\n    and they work. \n    Mind: setting the parties in the GS envelopes works for bots up from\n    1.6.3     x12_fixed_2_810   converts fixed inhouse to x12 810 including calculation of\n    invoice totals etc and partner specific seperators.", 
            "title": "Documentation on the contributed plugins on the bots web site"
        }, 
        {
            "location": "/PluginGenerate/", 
            "text": "Make a plugin\n\n\nIt is very easy to generate a plugin from your own configuration:\n  1. Go to \nbots-monitor-\nSystasks-\nMake plugin\n\n  1. select what your want in the plugin (defaults are for a configuration plugin)\n  1. push button 'Make plugin'\n  1. give filename/path to save the plugin.", 
            "title": "Make a plugin"
        }, 
        {
            "location": "/PluginGenerate/#make-a-plugin", 
            "text": "It is very easy to generate a plugin from your own configuration:\n  1. Go to  bots-monitor- Systasks- Make plugin \n  1. select what your want in the plugin (defaults are for a configuration plugin)\n  1. push button 'Make plugin'\n  1. give filename/path to save the plugin.", 
            "title": "Make a plugin"
        }, 
        {
            "location": "/PluginDetail/", 
            "text": "Details about plugins\n\n\n\n\nA plugin is just a zip-file, you can view the contents.\n\n\nA plugin has to contain a file (at the root) called \nbotsindex\n. This contains the database configuration.\n\n\nThe plugins on the web-site contain example edi files so you can run a translation and see the results.\n\n\nThe edi files are in \nbots/botssys/infile\n; the results will be in \nbots/botssys/outfile\n.\n\n\nWhen reading a plugin your existing current configuration is backupped (in \nbots/botssys\n)\n\n\nWhen reading a plugin already existing database-entries, mapping scripts, grammars etc are overwritten.\n\n\nIn the web server log is logged what is installed (logging is in \nbots/botssys/logging\n).\n\n\nThere is no un-install.\n\n\nBeware if you make a plugin and share this: do not use e.g. password for an email account.\n\n\nPlugins contain source code. This is a potentially security risk. Use only plugins from trusted sources.\n\n\nGrammars for edifact and x12 are NOT plugins, and can not be installed!", 
            "title": "Plugin details"
        }, 
        {
            "location": "/PluginDetail/#details-about-plugins", 
            "text": "A plugin is just a zip-file, you can view the contents.  A plugin has to contain a file (at the root) called  botsindex . This contains the database configuration.  The plugins on the web-site contain example edi files so you can run a translation and see the results.  The edi files are in  bots/botssys/infile ; the results will be in  bots/botssys/outfile .  When reading a plugin your existing current configuration is backupped (in  bots/botssys )  When reading a plugin already existing database-entries, mapping scripts, grammars etc are overwritten.  In the web server log is logged what is installed (logging is in  bots/botssys/logging ).  There is no un-install.  Beware if you make a plugin and share this: do not use e.g. password for an email account.  Plugins contain source code. This is a potentially security risk. Use only plugins from trusted sources.  Grammars for edifact and x12 are NOT plugins, and can not be installed!", 
            "title": "Details about plugins"
        }, 
        {
            "location": "/DeploymentIntroduction/", 
            "text": "Deployment\n\n\nThis part of the wiki is about using bots in\nproduction.\n\n\nThere are extra points to consider when deploying bots in a 24x7\nproduction environment:\n\n\n\n\nConsider the best way of \nrunning bots-engine\n.\n\n\nWhen errors in edi-files occur, \nreceive a notification by\n    email\n.\n\n\nUse multiple environments\n; having\n    different environments for at least test and production is standard IT\n    practice.\n\n\nConsider if edi files need \nextra archiving\n\n\nOut of the box bots does not run as a \nservice/daemon\n. \n    In a production enviroment this is what you'll probably want.", 
            "title": "Introduction"
        }, 
        {
            "location": "/DeploymentIntroduction/#deployment", 
            "text": "This part of the wiki is about using bots in\nproduction.  There are extra points to consider when deploying bots in a 24x7\nproduction environment:   Consider the best way of  running bots-engine .  When errors in edi-files occur,  receive a notification by\n    email .  Use multiple environments ; having\n    different environments for at least test and production is standard IT\n    practice.  Consider if edi files need  extra archiving  Out of the box bots does not run as a  service/daemon . \n    In a production enviroment this is what you'll probably want.", 
            "title": "Deployment"
        }, 
        {
            "location": "/DeploymentEngineOverview/", 
            "text": "Options for running bots-engine\n\n\n\n\n\n\nRun automatic or manual \n\n\n\n\nManual runs by using the 'run' options in the menu. \n\n\nSchedule\n \n\n\nUse the \ndirectory monitor/watcher\n \n\n\nThis can be combined; eg \n\n\nschedule 'new' every 15minutes \n\n\nmanually 'rereceive' and 'resend' \n\n\n\n\n\n\n\n\n\n\n\n\nDirect or via \njobqueue-server\n \n\n\n\n\nSpecify the routes to run: \n\n\nRun all routes. Default way of running (nothing specified). \n\n\nRun all routes with excludes. Indicate in route if routes ought not to \n    run in a default run. \n\n\n\n\nRun specific routes: include route as parameters. Eg\n    (command-line):\n    \nbots-engine.py myroute1 myroute2\n\n\nRun \nnew or other\n:\n\n\n\n\nnew. Via run-menu or command-line:\n\n\nbots-engine.py --new\n\n\nrereceive: rereceive user indicated edi files. Via run-menu or\n    command-line:\n\n\nbots-engine.py --rereceive\n\n\nresend: resend user indicated edi-files. Via run-menu or command-line:\n\n\nbots-engine.py --resend\n\n\nautomaticretrycommunication: resend edi-files where out-communication\n    failed. Command-line:\n\n\nbots-engine.py --automaticretrycommunication", 
            "title": "Running bots-engine"
        }, 
        {
            "location": "/DeploymentEngineOverview/#options-for-running-bots-engine", 
            "text": "Run automatic or manual    Manual runs by using the 'run' options in the menu.   Schedule    Use the  directory monitor/watcher    This can be combined; eg   schedule 'new' every 15minutes   manually 'rereceive' and 'resend'        Direct or via  jobqueue-server     Specify the routes to run:   Run all routes. Default way of running (nothing specified).   Run all routes with excludes. Indicate in route if routes ought not to \n    run in a default run.    Run specific routes: include route as parameters. Eg\n    (command-line):\n     bots-engine.py myroute1 myroute2  Run  new or other :   new. Via run-menu or command-line:  bots-engine.py --new  rereceive: rereceive user indicated edi files. Via run-menu or\n    command-line:  bots-engine.py --rereceive  resend: resend user indicated edi-files. Via run-menu or command-line:  bots-engine.py --resend  automaticretrycommunication: resend edi-files where out-communication\n    failed. Command-line:  bots-engine.py --automaticretrycommunication", 
            "title": "Options for running bots-engine"
        }, 
        {
            "location": "/DeploymentEngine/", 
            "text": "Scheduling introduction\n\n\n\n\n\n\nBots does not have a built-in scheduler. Scheduling is done by the scheduler of your OS. \n\n\n\n\nWindows: use eg \nWindows Task Scheduler\n.\n\n\nLinux/unix: use eg \ncron\n.\n\n\n\n\n\n\n\n\nBots-engine does not run concurrently (in parallel). If a previous\n    run is still in progress, a new run will not start. From version 3.0\n    onwards, Bots includes an optional \njob queue server\n\n    to use when scheduling Bots engine. Using this is recommended, to\n    prevent discarding runs that overlap.\n\n\n\n\nStrong advice: when scheduling bots-engine, activate the sending of\n    automatic \nemail-reports for errors\n.\n\n\n\n\nPossible scheduling scenarios\n\n\n(command lines below are for Windows):\n\n\n\n\n\n\nIf all (or most) routes can be run on the same schedule, then just\n    schedule bots-engine \"new\" run as often as you need, Eg. every 5\n    minutes. To exclude some routes from this run, tick the\n    \nNotindefaultrun\n box in the route advanced settings. These can then\n    be scheduled separately by specifying route names on the command\n    line.\n\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-engine.py --new\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-engine.py \"my hourly route\"\n\n\n\n\n\n\n\nIf you have few routes but with varying schedules, then schedule\n    them individually (by putting route names on the command line).\n    Disadvantage: newly added routes are not automatically run, you must\n    adjust your schedule.\n\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-engine.py \"my orders route\" \"my invoice route\"\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-engine.py \"my daily route\"\n\n\n\n\n\n\n\nConsider whether you need to schedule retries periodically.\n    Particularly with accessing remote servers, sometimes there may be\n    communication errors that would be ok next time bots tries.\n    Otherwise you will need to retry these yourself. File errors are not\n    retried automatically because the same error will just come up\n    again!\n\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-engine.py --automaticretrycommunication\n\n\n\n\n\n\n\nMy Setup (Mike)\n\n\nI am using Windows task scheduler and Bots \njob queue\n is\nenabled. I have five scheduled tasks:\n\n\n\n\nBots-engine (every 5 minutes, 24x7)\n\n\nBots-engine-hourly (every hour on the hour)\n\n\nBots-engine-daily (1am daily)\n\n\nBots-engine-weekly (1am every Monday morning)\n\n\nBots-engine-monthly (1am first of the month)\n    Each task has a corresponding batch file in the scripts directory. This\n    makes task configuration and changes easier; the scheduled tasks simply\n    call the batch files. Within the batch files I use job2queue.py for\n    adding jobs. Some add only a single job, while some add multiple jobs.\n    (You could also put the command lines directly into Windows task\n    scheduler, each one as a separate task). I use appropriate priorities\n    for each job, as some times of the day Bots can get very busy. Several\n    examples are shown below.\n:: bots-engine.bat\n:: Regular run of bots engine (eg. every 5 minutes, highest priority)\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p1 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py --new\n\n:: bots-engine-hourly.bat\n\n:: Hourly monitoring alerts\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p2 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py hourly_alerts\n\n:: Hourly cleanup and low priority routes\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p6 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py ftp_cleanup ProductionOrders RemitAdvice\n\n:: automatic retry of failed outgoing communication\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p7 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py --automaticretrycommunication\n\n:: bots-engine-daily.bat\n\n:: daily housekeeping\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p3 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py daily_housekeeping\n\n:: daily reporting \n SAP data downloads\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p9 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py daily_reports SAP_Expired_Contracts", 
            "title": "Schedule bots-engine"
        }, 
        {
            "location": "/DeploymentEngine/#scheduling-introduction", 
            "text": "Bots does not have a built-in scheduler. Scheduling is done by the scheduler of your OS.    Windows: use eg  Windows Task Scheduler .  Linux/unix: use eg  cron .     Bots-engine does not run concurrently (in parallel). If a previous\n    run is still in progress, a new run will not start. From version 3.0\n    onwards, Bots includes an optional  job queue server \n    to use when scheduling Bots engine. Using this is recommended, to\n    prevent discarding runs that overlap.   Strong advice: when scheduling bots-engine, activate the sending of\n    automatic  email-reports for errors .", 
            "title": "Scheduling introduction"
        }, 
        {
            "location": "/DeploymentEngine/#possible-scheduling-scenarios", 
            "text": "(command lines below are for Windows):    If all (or most) routes can be run on the same schedule, then just\n    schedule bots-engine \"new\" run as often as you need, Eg. every 5\n    minutes. To exclude some routes from this run, tick the\n     Notindefaultrun  box in the route advanced settings. These can then\n    be scheduled separately by specifying route names on the command\n    line.  c:\\python27\\python c:\\python27\\Scripts\\bots-engine.py --new\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-engine.py \"my hourly route\"    If you have few routes but with varying schedules, then schedule\n    them individually (by putting route names on the command line).\n    Disadvantage: newly added routes are not automatically run, you must\n    adjust your schedule.  c:\\python27\\python c:\\python27\\Scripts\\bots-engine.py \"my orders route\" \"my invoice route\"\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-engine.py \"my daily route\"    Consider whether you need to schedule retries periodically.\n    Particularly with accessing remote servers, sometimes there may be\n    communication errors that would be ok next time bots tries.\n    Otherwise you will need to retry these yourself. File errors are not\n    retried automatically because the same error will just come up\n    again!  c:\\python27\\python c:\\python27\\Scripts\\bots-engine.py --automaticretrycommunication", 
            "title": "Possible scheduling scenarios"
        }, 
        {
            "location": "/DeploymentEngine/#my-setup-mike", 
            "text": "I am using Windows task scheduler and Bots  job queue  is\nenabled. I have five scheduled tasks:   Bots-engine (every 5 minutes, 24x7)  Bots-engine-hourly (every hour on the hour)  Bots-engine-daily (1am daily)  Bots-engine-weekly (1am every Monday morning)  Bots-engine-monthly (1am first of the month)\n    Each task has a corresponding batch file in the scripts directory. This\n    makes task configuration and changes easier; the scheduled tasks simply\n    call the batch files. Within the batch files I use job2queue.py for\n    adding jobs. Some add only a single job, while some add multiple jobs.\n    (You could also put the command lines directly into Windows task\n    scheduler, each one as a separate task). I use appropriate priorities\n    for each job, as some times of the day Bots can get very busy. Several\n    examples are shown below. :: bots-engine.bat\n:: Regular run of bots engine (eg. every 5 minutes, highest priority)\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p1 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py --new\n\n:: bots-engine-hourly.bat\n\n:: Hourly monitoring alerts\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p2 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py hourly_alerts\n\n:: Hourly cleanup and low priority routes\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p6 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py ftp_cleanup ProductionOrders RemitAdvice\n\n:: automatic retry of failed outgoing communication\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p7 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py --automaticretrycommunication\n\n:: bots-engine-daily.bat\n\n:: daily housekeeping\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p3 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py daily_housekeeping\n\n:: daily reporting   SAP data downloads\nC:\\python27\\python.exe C:\\python27\\scripts\\bots-job2queue.py -p9 C:\\python27\\python.exe C:\\python27\\scripts\\bots-engine.py daily_reports SAP_Expired_Contracts", 
            "title": "My Setup (Mike)"
        }, 
        {
            "location": "/Jobqueue/", 
            "text": "Bots Job Queue (bots >= 3.0)\n\n\nPurpose of the bots jobqueue is to enable better scheduling of bots engine: \n\n\n\n\nensures only a single bots-engine runs at any time. \n\n\nno engine runs are lost/discarded.\n\n\nnext engine run is started as soon as previous run has ended. Use of the\n    job queue is optional, but is recommended if \nscheduling bots-engine\n.\\\n\n\n\n\nDetails: \n\n\n\n\nLaunch sequence from the queue can be controlled using\n    different priorities when adding jobs. \n\n\nOther (non bots-engine) jobs can also be added to the queue if they need \n    to be run \"in between\"  bots-engine runs. \n\n\nIf you add a duplicate of another job _already\n    waiting on the queue_ the request is discarded. This is because the job\n    on the queue will perform the same action when it runs. If that job is\n    already running, the new job _will_ be added to the queue. \n\n\nlogging in _bots/botssys/logging/jobqueue.log_ \n\n\nWhen using Bots monitor run-menu the job queue will be used if enabled in \n    bots.ini; jobs are added with default priority of 5. \n\n\nIn production you'll probably want  to run bots-jobqueueserver as a \n    \ndaemon process/service\n. \n\n\nFull command-line usage instructions for bots-job2queue.py and \n    bots-jobqueueserver.py when started up with '--help' \n\n\nThe bots job queue server does 3 things \n\n\nmaintains a queue of jobs for bots-engine. \n\n\nreceives new jobs via the bots-job2queue.py \n    (or via _bots-monitor->Run_) \n\n\nlaunches a new job from the queue as soon as previous job ended.\n\n\n\n\n\n\n\n\nStarting with the job queue\n\n\n\n\nFirst, enabled in \nbots.ini\n (jobqueue\n    section, enabled = True).\n\n\nStart the bots-jobqueueserver. Command-line:\n    \nbots-jobqueueserver.py\n\n\nPut jobs in the job queue:\n\n\nvia menu using \nbots-monitor->Run\n\n\nstart from command-line (using bots-job2queue.py).\n\n\nstart from scheduler (using bots-job2queue.py).\n\n\n\n\n\n\n\n\nCommand examples\n\n\nJob2queue on windows example 1:\n\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-job2queue.py c:\\python27\\python c:\\python27\\Scripts\\bots-engine.py\n\n\n\nJob2queue on windows example 2:\n\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-job2queue.py -p3 c:\\python27\\python c:\\python27\\Scripts\\bots-engine.py --new -Cconfigprod\n\n\n\nJob2queue on windows example 3 (Adding other commands to the job queue):\n\n\nc:\\python27\\python c:\\python27\\Scripts\\bots-job2queue.py c:\\program files\\my_program.exe my_parm_1 my_parm_2\n\n\n\nJob2queue on linux example 4:\n\n\nbots-job2queue.py bots-engine.py\n\n\n\nJob2queue on linux example 5:\n\n\nbots-job2queue.py -p3 bots-engine.py --new -Cconfigprod", 
            "title": "Job Queue"
        }, 
        {
            "location": "/Jobqueue/#bots-job-queue-bots-62-30", 
            "text": "Purpose of the bots jobqueue is to enable better scheduling of bots engine:    ensures only a single bots-engine runs at any time.   no engine runs are lost/discarded.  next engine run is started as soon as previous run has ended. Use of the\n    job queue is optional, but is recommended if  scheduling bots-engine .\\   Details:    Launch sequence from the queue can be controlled using\n    different priorities when adding jobs.   Other (non bots-engine) jobs can also be added to the queue if they need \n    to be run \"in between\"  bots-engine runs.   If you add a duplicate of another job _already\n    waiting on the queue_ the request is discarded. This is because the job\n    on the queue will perform the same action when it runs. If that job is\n    already running, the new job _will_ be added to the queue.   logging in _bots/botssys/logging/jobqueue.log_   When using Bots monitor run-menu the job queue will be used if enabled in \n    bots.ini; jobs are added with default priority of 5.   In production you'll probably want  to run bots-jobqueueserver as a \n     daemon process/service .   Full command-line usage instructions for bots-job2queue.py and \n    bots-jobqueueserver.py when started up with '--help'   The bots job queue server does 3 things   maintains a queue of jobs for bots-engine.   receives new jobs via the bots-job2queue.py \n    (or via _bots-monitor->Run_)   launches a new job from the queue as soon as previous job ended.", 
            "title": "Bots Job Queue (bots >= 3.0)"
        }, 
        {
            "location": "/Jobqueue/#starting-with-the-job-queue", 
            "text": "First, enabled in  bots.ini  (jobqueue\n    section, enabled = True).  Start the bots-jobqueueserver. Command-line:\n     bots-jobqueueserver.py  Put jobs in the job queue:  via menu using  bots-monitor->Run  start from command-line (using bots-job2queue.py).  start from scheduler (using bots-job2queue.py).", 
            "title": "Starting with the job queue"
        }, 
        {
            "location": "/Jobqueue/#command-examples", 
            "text": "Job2queue on windows example 1:  c:\\python27\\python c:\\python27\\Scripts\\bots-job2queue.py c:\\python27\\python c:\\python27\\Scripts\\bots-engine.py  Job2queue on windows example 2:  c:\\python27\\python c:\\python27\\Scripts\\bots-job2queue.py -p3 c:\\python27\\python c:\\python27\\Scripts\\bots-engine.py --new -Cconfigprod  Job2queue on windows example 3 (Adding other commands to the job queue):  c:\\python27\\python c:\\python27\\Scripts\\bots-job2queue.py c:\\program files\\my_program.exe my_parm_1 my_parm_2  Job2queue on linux example 4:  bots-job2queue.py bots-engine.py  Job2queue on linux example 5:  bots-job2queue.py -p3 bots-engine.py --new -Cconfigprod", 
            "title": "Command examples"
        }, 
        {
            "location": "/DirMonitor/", 
            "text": "Bots Directory Monitor (bots >= 3.0)\n\n\nThis provides a method of monitoring specific \"local\" directories, \nand running Bots engine when files are ready to be processed. \n\n\nUse of the directory monitor is optional. It may be useful for processing \nfiles that only arrive occasionally and at random times. \n\n\nPrerequisites\n\n\nDirectory monitor uses the \njob queue\n.\n\nMonitoring must be configured in \nbots.ini\n\n(dirmonitorX sections)\n\nDirectory monitor \ndaemon process\n must be started \n(bots-dirmonitor.py)", 
            "title": "Directory Monitor"
        }, 
        {
            "location": "/DirMonitor/#bots-directory-monitor-bots-62-30", 
            "text": "This provides a method of monitoring specific \"local\" directories, \nand running Bots engine when files are ready to be processed.   Use of the directory monitor is optional. It may be useful for processing \nfiles that only arrive occasionally and at random times.", 
            "title": "Bots Directory Monitor (bots >= 3.0)"
        }, 
        {
            "location": "/DirMonitor/#prerequisites", 
            "text": "Directory monitor uses the  job queue . \nMonitoring must be configured in  bots.ini \n(dirmonitorX sections) \nDirectory monitor  daemon process  must be started \n(bots-dirmonitor.py)", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/DeploymentEngineReturnCode/", 
            "text": "Return codes for bots engine (bots\n=3.0)\n\n\nBots-engine uses the following return codes:\n\n\n\n\n0: OK, no errors.\n\n\n1: (system) errors: could not connect to database, not correct command line arguments,  database damaged, unexpected system error etc.\n\n\n2: bots ran OK, but there are errors/process errors in the run.\n\n\n3: Database is locked, but \"maxruntime\" has not been exceeded. (use the job queue server to avoid this type of errors).\n\n\n\n\nReturn code '2' is similar/equivalent to the error reports by email.", 
            "title": "Return codes"
        }, 
        {
            "location": "/DeploymentEngineReturnCode/#return-codes-for-bots-engine-bots30", 
            "text": "Bots-engine uses the following return codes:   0: OK, no errors.  1: (system) errors: could not connect to database, not correct command line arguments,  database damaged, unexpected system error etc.  2: bots ran OK, but there are errors/process errors in the run.  3: Database is locked, but \"maxruntime\" has not been exceeded. (use the job queue server to avoid this type of errors).   Return code '2' is similar/equivalent to the error reports by email.", 
            "title": "Return codes for bots engine (bots&gt;=3.0)"
        }, 
        {
            "location": "/DeploymentHandleErrors/", 
            "text": "Handling errors in production\n\n\nDifferent errors:\n\n\n\n\nerrors in edi files:\n\n\ninbound: contact your edi-partner they should send valid messages. (yes, and sometimes you will just have to adapt the definitions \n    of the standards).\n\n\noutbound: check out why your ERP-system sends invalid messages. Adapt the export-module.\n\n\n\n\n\n\ncommunication errors\n\n\ninbound: no problem, next run bots will try again to fetch the messages correctly. No action needed (but if it keeps happinging....).\n\n\noutbound. You can handle this manually or automated:\n\n\nmanually:\n\n\nin the outgoing view, select edi-files with failed outbound communication and mark these as 'resend'\n\n\ndo: 'Run user-indicated resends'\n\n\ncheck if communication was OK this time.\n\n\nNote: number of resends is indicated in the outgoing view.\n\n\n\n\n\n\nautomatic:\n\n\nschedule bots-engine with option '--automaticretrycommunication'.\n\n\nall edi-files for which out-communication failed will be resend automatically.\n\n\nif communication fails (again) in the automatic retry this is indicated in the error notification. So probably it is best to react \n    on this.\n\n\nNote: number of resends is indicated in the outgoing view.\n\n\nThe first time you use 'automaticretrycommunication' nothing is resend, but automaticretry is initialised: all failed\n    communications from that moment on will be resend. This is to prevent having all older failed communications resend.\n\n\nScheduling: often bots is scheduled to run eg every 10 minutes, and automaticretry once an hour. For this type of scheduling use \n    the \njobqueue server\n.", 
            "title": "Handle production errors"
        }, 
        {
            "location": "/DeploymentHandleErrors/#handling-errors-in-production", 
            "text": "Different errors:   errors in edi files:  inbound: contact your edi-partner they should send valid messages. (yes, and sometimes you will just have to adapt the definitions \n    of the standards).  outbound: check out why your ERP-system sends invalid messages. Adapt the export-module.    communication errors  inbound: no problem, next run bots will try again to fetch the messages correctly. No action needed (but if it keeps happinging....).  outbound. You can handle this manually or automated:  manually:  in the outgoing view, select edi-files with failed outbound communication and mark these as 'resend'  do: 'Run user-indicated resends'  check if communication was OK this time.  Note: number of resends is indicated in the outgoing view.    automatic:  schedule bots-engine with option '--automaticretrycommunication'.  all edi-files for which out-communication failed will be resend automatically.  if communication fails (again) in the automatic retry this is indicated in the error notification. So probably it is best to react \n    on this.  Note: number of resends is indicated in the outgoing view.  The first time you use 'automaticretrycommunication' nothing is resend, but automaticretry is initialised: all failed\n    communications from that moment on will be resend. This is to prevent having all older failed communications resend.  Scheduling: often bots is scheduled to run eg every 10 minutes, and automaticretry once an hour. For this type of scheduling use \n    the  jobqueue server .", 
            "title": "Handling errors in production"
        }, 
        {
            "location": "/DeploymentErrorReports/", 
            "text": "Receive email notifications for errors in edi\n\n\nWhen bots runs scheduled, it is cumbersome to keep checking for errors in the\nbots-monitor.\n\nIt is possible to receive an email-report in case of errors.\n\nConfigure this:\n\n\n\n\nSet option 'sendreportiferror' in \nbots/config/bots.ini\n to True.\n\n\n\n\nIn \nbots/config/settings.py\n set relevant data for email, eg like:\n\n\nMANAGERS = (    #bots will send error reports to the MANAGERS\n    ('name_manager', 'myemailaddress@gmail'),\n    )\nEMAIL_HOST = 'smtp.gmail.com'             #Default: 'localhost'\nEMAIL_PORT = '587'             #Default: 25\nEMAIL_USE_TLS = True       #Default: False\nEMAIL_HOST_USER = 'username'        #Default: ''. Username to use for the SMTP server defined in EMAIL_HOST. If empty, Django won't attempt authentication.\nEMAIL_HOST_PASSWORD = '*******'    #Default: ''. PASSWORD to use for the SMTP server defined in EMAIL_HOST. If empty, Django won't attempt authentication.\nSERVER_EMAIL = 'botserrors@gmail.com'           #Sender of bots error reports. Default: 'root@localhost'\nEMAIL_SUBJECT_PREFIX = ''   #This is prepended on email subject.\n\n\n\n\n\n\n\nTo test if it works OK, restart the bots-webserver and\n    \nbots-monitor->Systasks->Send test report\n. (I know, the\n    restarting is annoying.).\n\n\n\n\n\n\nNote: Email notifications are not sent while running \nacceptance\ntests\n.", 
            "title": "Email notification for errors"
        }, 
        {
            "location": "/DeploymentErrorReports/#receive-email-notifications-for-errors-in-edi", 
            "text": "When bots runs scheduled, it is cumbersome to keep checking for errors in the\nbots-monitor. \nIt is possible to receive an email-report in case of errors. \nConfigure this:   Set option 'sendreportiferror' in  bots/config/bots.ini  to True.   In  bots/config/settings.py  set relevant data for email, eg like:  MANAGERS = (    #bots will send error reports to the MANAGERS\n    ('name_manager', 'myemailaddress@gmail'),\n    )\nEMAIL_HOST = 'smtp.gmail.com'             #Default: 'localhost'\nEMAIL_PORT = '587'             #Default: 25\nEMAIL_USE_TLS = True       #Default: False\nEMAIL_HOST_USER = 'username'        #Default: ''. Username to use for the SMTP server defined in EMAIL_HOST. If empty, Django won't attempt authentication.\nEMAIL_HOST_PASSWORD = '*******'    #Default: ''. PASSWORD to use for the SMTP server defined in EMAIL_HOST. If empty, Django won't attempt authentication.\nSERVER_EMAIL = 'botserrors@gmail.com'           #Sender of bots error reports. Default: 'root@localhost'\nEMAIL_SUBJECT_PREFIX = ''   #This is prepended on email subject.    To test if it works OK, restart the bots-webserver and\n     bots-monitor->Systasks->Send test report . (I know, the\n    restarting is annoying.).    Note: Email notifications are not sent while running  acceptance\ntests .", 
            "title": "Receive email notifications for errors in edi"
        }, 
        {
            "location": "/Archiving/", 
            "text": "Archiving of EDI files\n\n\nThe current archive\n\n\nBots always uses the current archive.\n\nThe current archive is what can be seen in the bots-monitor: incoming\nfiles, outgoing files, document view etc.\n\nEdi-files are kept 30 days in the current archive (by default, can be\nset via parameter \nmaxdays\n in \nbots/config/bots.ini\n).\n\nAfter this time the edi-files and data about their processing (like\nruns, incoming files, etc) are discarded.\n\n\nDiscussion about long term archiving\n\n\nHow long should edi-files be archived? There is no fixed rule about this.\n\nSome argue that the edi-files are temporary information carriers and\nthat the real data is processed and archived in the ERP software of you\nand your edi-partner.\n\nBut:\n\n\n\n\nfor eg invoices there might be legal issues about keeping the\n    'original invoice'. Check this! (OTOH I get a big smile thinking of\n    legal/tax people wading though these EDI-files. ;-))\n\n\nit might be needed to keep the original in case there are any errors\n    or discrepancies that need to be investigated later.\n\n\n\n\nThe (default) 30 days of the current archive is a compromise between\n'keep all data always' and performance. If all data are kept,\nperformance will degrade in the long run.\n\n\nThe long term archive\n\n\nBots has an option for a long term archive.\n\nhow this works:\n\n\n\n\nPer channel: if you specify the 'Archive path' in a channel, all\n    files coming in or going out for that channel are archived.\n\n\nfor incoming files: archived as received (unchanged); for emails the\n    (un-mimified) attachments are saved.\n\n\nfor outgoing files: archived as send (unchanged). If outgoing\n    communication fails: nothing is send, so nothing is archived.\n\n\nThe long term archive contains copies of the files only. Once bots\n    has cleaned details from it's database you will need to use tools\n    like 'grep' to find what you need.\n\n\nBots creates a sub-directory per date, eg. myarchive_path/20131202,\n    myarchive_path/20131203, etc. The sub-directories contains the\n    edi-files archived in that day.\n\n\nWithin this daily directory, Bots uses unique numeric filenames by\n    default.\n\n\nEdi-files are kept 180 days in the long term archive (by default,\n    can be set via parameter \nmaxdaysarchive\n in\n    \nbots/config/bots.ini\n). Keeping files longer will not affect\n    performance significantly. Of course the files will occupy disc\n    space.\n\n\n\n\nExample of archiving\n\n\nArchive path for channel \nmy_inchannel\n is set to \nC:/edi/archive/my_inchannel\n.\n\nArchive path for channel \nmy_outchannel\n is set to \nC:/edi/archive/my_outchannel\n.  \n\n\nAfter a few days this will looks someting like:\n\n\n    C:/edi/archive/\n                  my_inchannel/\n                              20131202/\n                                      13892848\n                                      13892872\n                                      13892876\n                              20131203/\n                                      13892991\n                                      13893009\n                              20131204/\n                                      13893421\n                  my_outchannel/\n                              20131202/\n                                      13892861\n                                      13892886\n                              20131203/\n                                      13893123\n                              20131204/\n                                      13893479\n\n\n\n\nNote: it is strongly advised to archive the file outside of the bots\ndirectories!\n\n\nAdditional options for long term archive\n\n\n\n\n\n\narchiveexternalname (setting in \nbots/config/bots.ini\n). If set to True,\n  name of archived file is the name of the incoming/outgoing file. If this\n  name already exists in the archive: a timestamp is added to the\n  filename; eg. order.txt becomes order_112506.txt. External filenames\n  are only used for some channel types where the channel defines the\n  filename (file, ftp, ftps, ftpis, sftp, mimefile, communicationscript).\n  Default setting in bots.ini is False. New in version 3.0.\n\n\n\n\n\n\narchivezip (setting in \nbots/config/bots.ini\n). If set to True, each\n  archive folder will be a zip file. If you keep archives for a long time,\n  zipping them can save a lot of disc-space; most EDI files compress to\n  just a few percent of original size. Disadvantage: harder to search.\n  Default setting is False. New in version 3.0.\n\n\n\n\n\n\nuser scripting for archive path. See\n  \ncommunicationscript\n. Note: please archive within\n  the archive path as set in channel, else the cleanup routines for\n  parameter \nmaxdaysarchive\n will not function.\n\n\n\n\n\n\nuser scripting for name of archive file. See\n  \ncommunicationscript\n.", 
            "title": "Archiving of EDI files"
        }, 
        {
            "location": "/Archiving/#archiving-of-edi-files", 
            "text": "", 
            "title": "Archiving of EDI files"
        }, 
        {
            "location": "/Archiving/#the-current-archive", 
            "text": "Bots always uses the current archive. \nThe current archive is what can be seen in the bots-monitor: incoming\nfiles, outgoing files, document view etc. \nEdi-files are kept 30 days in the current archive (by default, can be\nset via parameter  maxdays  in  bots/config/bots.ini ). \nAfter this time the edi-files and data about their processing (like\nruns, incoming files, etc) are discarded.", 
            "title": "The current archive"
        }, 
        {
            "location": "/Archiving/#discussion-about-long-term-archiving", 
            "text": "How long should edi-files be archived? There is no fixed rule about this. \nSome argue that the edi-files are temporary information carriers and\nthat the real data is processed and archived in the ERP software of you\nand your edi-partner. \nBut:   for eg invoices there might be legal issues about keeping the\n    'original invoice'. Check this! (OTOH I get a big smile thinking of\n    legal/tax people wading though these EDI-files. ;-))  it might be needed to keep the original in case there are any errors\n    or discrepancies that need to be investigated later.   The (default) 30 days of the current archive is a compromise between\n'keep all data always' and performance. If all data are kept,\nperformance will degrade in the long run.", 
            "title": "Discussion about long term archiving"
        }, 
        {
            "location": "/Archiving/#the-long-term-archive", 
            "text": "Bots has an option for a long term archive. \nhow this works:   Per channel: if you specify the 'Archive path' in a channel, all\n    files coming in or going out for that channel are archived.  for incoming files: archived as received (unchanged); for emails the\n    (un-mimified) attachments are saved.  for outgoing files: archived as send (unchanged). If outgoing\n    communication fails: nothing is send, so nothing is archived.  The long term archive contains copies of the files only. Once bots\n    has cleaned details from it's database you will need to use tools\n    like 'grep' to find what you need.  Bots creates a sub-directory per date, eg. myarchive_path/20131202,\n    myarchive_path/20131203, etc. The sub-directories contains the\n    edi-files archived in that day.  Within this daily directory, Bots uses unique numeric filenames by\n    default.  Edi-files are kept 180 days in the long term archive (by default,\n    can be set via parameter  maxdaysarchive  in\n     bots/config/bots.ini ). Keeping files longer will not affect\n    performance significantly. Of course the files will occupy disc\n    space.", 
            "title": "The long term archive"
        }, 
        {
            "location": "/Archiving/#example-of-archiving", 
            "text": "Archive path for channel  my_inchannel  is set to  C:/edi/archive/my_inchannel . \nArchive path for channel  my_outchannel  is set to  C:/edi/archive/my_outchannel .    After a few days this will looks someting like:      C:/edi/archive/\n                  my_inchannel/\n                              20131202/\n                                      13892848\n                                      13892872\n                                      13892876\n                              20131203/\n                                      13892991\n                                      13893009\n                              20131204/\n                                      13893421\n                  my_outchannel/\n                              20131202/\n                                      13892861\n                                      13892886\n                              20131203/\n                                      13893123\n                              20131204/\n                                      13893479  Note: it is strongly advised to archive the file outside of the bots\ndirectories!", 
            "title": "Example of archiving"
        }, 
        {
            "location": "/Archiving/#additional-options-for-long-term-archive", 
            "text": "archiveexternalname (setting in  bots/config/bots.ini ). If set to True,\n  name of archived file is the name of the incoming/outgoing file. If this\n  name already exists in the archive: a timestamp is added to the\n  filename; eg. order.txt becomes order_112506.txt. External filenames\n  are only used for some channel types where the channel defines the\n  filename (file, ftp, ftps, ftpis, sftp, mimefile, communicationscript).\n  Default setting in bots.ini is False. New in version 3.0.    archivezip (setting in  bots/config/bots.ini ). If set to True, each\n  archive folder will be a zip file. If you keep archives for a long time,\n  zipping them can save a lot of disc-space; most EDI files compress to\n  just a few percent of original size. Disadvantage: harder to search.\n  Default setting is False. New in version 3.0.    user scripting for archive path. See\n   communicationscript . Note: please archive within\n  the archive path as set in channel, else the cleanup routines for\n  parameter  maxdaysarchive  will not function.    user scripting for name of archive file. See\n   communicationscript .", 
            "title": "Additional options for long term archive"
        }, 
        {
            "location": "/DaemonProcesses/", 
            "text": "Run as service/daemon\n\n\nA \ndaemon\n is a computer program that runs continuously as a background process.\n\n\nAfter Bots installation there are no service/daemon processes active. This is recommended for a production environment. Bots has several parts that you may want to run as services/daemons:\n\n\n\n\nbots-webserver.py\n\n\nbots-jobqueueserver.py (bots \n= 3.0.0, is optional)\n\n\nbots-dirmonitor.py (bots \n= 3.0.0, is optional)\n\n\n\n\nNote that bots-engine itself is not a daemon process; bots-engine is best \nscheduled\n.\n\n\nHow these daemons are created and managed depends on the operating system being used:\n\n\n\n\nIn Windows, you can set them up as \nWindows Services\n.\n\n\nIn linux/unix, you can start them as \nLinux daemons\n.", 
            "title": "Run as service/daemon"
        }, 
        {
            "location": "/DaemonProcesses/#run-as-servicedaemon", 
            "text": "A  daemon  is a computer program that runs continuously as a background process.  After Bots installation there are no service/daemon processes active. This is recommended for a production environment. Bots has several parts that you may want to run as services/daemons:   bots-webserver.py  bots-jobqueueserver.py (bots  = 3.0.0, is optional)  bots-dirmonitor.py (bots  = 3.0.0, is optional)   Note that bots-engine itself is not a daemon process; bots-engine is best  scheduled .  How these daemons are created and managed depends on the operating system being used:   In Windows, you can set them up as  Windows Services .  In linux/unix, you can start them as  Linux daemons .", 
            "title": "Run as service/daemon"
        }, 
        {
            "location": "/LinuxDaemons/", 
            "text": "Linux Daemons\n\n\nsome examples that run bots-webserver or jobqueserver as a daemon.\n\n\nExample1\n\n\n'I have been starting bots-webserver on my Linux (CentOS) servers via an entry in rc.local and wanted to provide a means to gracefully shut down the process on reboot.  There have been other examples of init scripts posted which do the trick, but I wanted to put something together that conformed to LSB.  I took an example script I found online and configured it for the bots.webserver process.  Since CentOS doesn't handle pid files correctly when using LSB functions, I tweaked it to work around the issue, and it should work on most distributions without a lot of modification.'\n\n\n### BEGIN INIT INFO\n# Provides:          bots-webserver\n# Required-Start:    $remote_fs $network\n# Required-Stop:     $remote_fs $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: BOTS webserver daemon\n# Description:       BOTS webserver daemon\n### END INIT INFO\n\n# Using the lsb functions to perform the operations.\n. /lib/lsb/init-functions\n# Process name ( For display )\nNAME=bots-webserver\n# Daemon name, where is the actual executable\nDAEMON=/usr/bin/bots-webserver.py\n# pid file for the daemon\nPIDFILE=/var/run/bots-webserver.pid\n# Arguments for the daemon\nARGS=\n /dev/null 2\n1 \n\n\n# If the daemon is not there, then exit.\ntest -x $DAEMON || exit 5\n\ncase $1 in\n start)\n  # Checked the PID file exists and check the actual status of process\n  if [ -e $PIDFILE ]; then\n   pidofproc -p $PIDFILE $DAEMON \n status=\n0\n || status=\n$?\n\n   # If the status is SUCCESS then don't need to start again.\n   if [ $status = \n0\n ]; then\n    log_success_msg \n$NAME process is already running\n\n    exit # Exit\n   fi\n  fi\n  # Start the daemon.\n  # Start the daemon with the help of start-stop-daemon\n  # Log the message appropriately\n  if start_daemon -p $PIDFILE $DAEMON $ARGS; then\n   # For older LSB functions that don't handle -p argument correctly (i.e. CentOS)\n   if [ ! -e $PIDFILE ]; then\n    pidofproc $DAEMON \n $PIDFILE\n   fi\n   log_success_msg \nStarting the process $NAME\n\n  else\n   log_failure_msg \nFailed to start the process $NAME\n\n  fi\n  ;;\n stop)\n  # Stop the daemon.\n  if [ -e $PIDFILE ]; then\n   pidofproc -p $PIDFILE $DAEMON \n /dev/null \n status=\n0\n || status=\n$?\n\n   if [ \n$status\n = 0 ]; then\n    killproc -p $PIDFILE $DAEMON\n    /bin/rm -f $PIDFILE\n    log_success_msg \nStoppping the $NAME process\n\n   fi\n  else\n   log_warning_msg \n$NAME process is not running\n\n  fi\n  ;;\n restart)\n  # Restart the daemon.\n  $0 stop \n sleep 2 \n $0 start\n  ;;\n status)\n  # Check the status of the process.\n  if [ -e $PIDFILE ]; then\n   pidofproc -p $PIDFILE $DAEMON \n /dev/null \n log_success_msg \n$NAME process is running\n \n exit 0 || exit $?\n  else\n   log_warning_msg \n$NAME process is not running\n\n  fi\n  ;;\n reload)\n  # Reload the process. Basically sending some signal to a daemon to reload\n  # it configurations.\n  if [ -e $PIDFILE ]; then\n   killproc -p $PIDFILE $DAEMON -signal USR1\n   log_success_msg \n$NAME process reloaded successfully\n\n  else\n   log_failure_msg \n$PIDFILE does not exists\n\n  fi\n  ;;\n *)\n  # For invalid arguments, print the usage message.\n  echo \nUsage: $0 {start|stop|restart|reload|status}\n\n  exit 2\n  ;;\nesac\n\n\n\n\nExample2\n\n\nDepends on 'start-stop-daemon' , which is used in debian/ubuntu.\n\n\n#! /bin/sh\n#\n# uses 'start-stop-daemon' , which is used in debian/ubuntu\nbr\n\n#\nNAME=bots-webserver\nPIDFILE=\n/var/run/$NAME.pid\n\nDAEMON=\n/usr/local/bin/bots-webserver.py\n\nDAEMON_ARGS=\n-cconfig\n\n\ncase \n$1\n in\n    start)\n        echo \nStarting \n$NAME\n \n\n        start-stop-daemon --start --verbose --background --pidfile $PIDFILE --make-pidfile --startas $DAEMON -- $DAEMON_ARGS\n        ;;\n    stop)\n        echo \nStopping \n$NAME\n \n\n        start-stop-daemon --stop --verbose --pidfile $PIDFILE\n        rm -f $PIDFILE\n        ;;\n    restart)\n        echo \nRestarting \n$NAME\n \n\n        start-stop-daemon --stop --verbose --pidfile $PIDFILE\n        rm -f $PIDFILE\n        sleep 1\n        start-stop-daemon --start --verbose --background --pidfile $PIDFILE --make-pidfile --startas $DAEMON -- $DAEMON_ARGS\n        ;;\n    *)\n        echo \nUsage: \n$(basename \n$0\n)\n {start|stop|restart}\n\n        echo \n    Starts the bots webserver as a daemon.\n\n        echo \n    Bots-webserver is part of bots open source edi translator (http://bots.sourceforge.net).\n\n        exit 1\n        ;;\nesac\n\nexit 0\n\n\n\n\nExample3\n\n\nA script for starting the job queue server as a upstart in Ubuntu.\nAdd the following file: /etc/init/bots-jobqueue.conf\n\n\ndescription \nBots Job queue server\n\nauthor \nbots@yourmail.com\n\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\nrespawn\n\nexec bots-jobqueueserver.py", 
            "title": "Linux Daemons"
        }, 
        {
            "location": "/LinuxDaemons/#linux-daemons", 
            "text": "some examples that run bots-webserver or jobqueserver as a daemon.", 
            "title": "Linux Daemons"
        }, 
        {
            "location": "/LinuxDaemons/#example1", 
            "text": "'I have been starting bots-webserver on my Linux (CentOS) servers via an entry in rc.local and wanted to provide a means to gracefully shut down the process on reboot.  There have been other examples of init scripts posted which do the trick, but I wanted to put something together that conformed to LSB.  I took an example script I found online and configured it for the bots.webserver process.  Since CentOS doesn't handle pid files correctly when using LSB functions, I tweaked it to work around the issue, and it should work on most distributions without a lot of modification.'  ### BEGIN INIT INFO\n# Provides:          bots-webserver\n# Required-Start:    $remote_fs $network\n# Required-Stop:     $remote_fs $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: BOTS webserver daemon\n# Description:       BOTS webserver daemon\n### END INIT INFO\n\n# Using the lsb functions to perform the operations.\n. /lib/lsb/init-functions\n# Process name ( For display )\nNAME=bots-webserver\n# Daemon name, where is the actual executable\nDAEMON=/usr/bin/bots-webserver.py\n# pid file for the daemon\nPIDFILE=/var/run/bots-webserver.pid\n# Arguments for the daemon\nARGS=  /dev/null 2 1  \n\n# If the daemon is not there, then exit.\ntest -x $DAEMON || exit 5\n\ncase $1 in\n start)\n  # Checked the PID file exists and check the actual status of process\n  if [ -e $PIDFILE ]; then\n   pidofproc -p $PIDFILE $DAEMON   status= 0  || status= $? \n   # If the status is SUCCESS then don't need to start again.\n   if [ $status =  0  ]; then\n    log_success_msg  $NAME process is already running \n    exit # Exit\n   fi\n  fi\n  # Start the daemon.\n  # Start the daemon with the help of start-stop-daemon\n  # Log the message appropriately\n  if start_daemon -p $PIDFILE $DAEMON $ARGS; then\n   # For older LSB functions that don't handle -p argument correctly (i.e. CentOS)\n   if [ ! -e $PIDFILE ]; then\n    pidofproc $DAEMON   $PIDFILE\n   fi\n   log_success_msg  Starting the process $NAME \n  else\n   log_failure_msg  Failed to start the process $NAME \n  fi\n  ;;\n stop)\n  # Stop the daemon.\n  if [ -e $PIDFILE ]; then\n   pidofproc -p $PIDFILE $DAEMON   /dev/null   status= 0  || status= $? \n   if [  $status  = 0 ]; then\n    killproc -p $PIDFILE $DAEMON\n    /bin/rm -f $PIDFILE\n    log_success_msg  Stoppping the $NAME process \n   fi\n  else\n   log_warning_msg  $NAME process is not running \n  fi\n  ;;\n restart)\n  # Restart the daemon.\n  $0 stop   sleep 2   $0 start\n  ;;\n status)\n  # Check the status of the process.\n  if [ -e $PIDFILE ]; then\n   pidofproc -p $PIDFILE $DAEMON   /dev/null   log_success_msg  $NAME process is running    exit 0 || exit $?\n  else\n   log_warning_msg  $NAME process is not running \n  fi\n  ;;\n reload)\n  # Reload the process. Basically sending some signal to a daemon to reload\n  # it configurations.\n  if [ -e $PIDFILE ]; then\n   killproc -p $PIDFILE $DAEMON -signal USR1\n   log_success_msg  $NAME process reloaded successfully \n  else\n   log_failure_msg  $PIDFILE does not exists \n  fi\n  ;;\n *)\n  # For invalid arguments, print the usage message.\n  echo  Usage: $0 {start|stop|restart|reload|status} \n  exit 2\n  ;;\nesac", 
            "title": "Example1"
        }, 
        {
            "location": "/LinuxDaemons/#example2", 
            "text": "Depends on 'start-stop-daemon' , which is used in debian/ubuntu.  #! /bin/sh\n#\n# uses 'start-stop-daemon' , which is used in debian/ubuntu br \n#\nNAME=bots-webserver\nPIDFILE= /var/run/$NAME.pid \nDAEMON= /usr/local/bin/bots-webserver.py \nDAEMON_ARGS= -cconfig \n\ncase  $1  in\n    start)\n        echo  Starting  $NAME   \n        start-stop-daemon --start --verbose --background --pidfile $PIDFILE --make-pidfile --startas $DAEMON -- $DAEMON_ARGS\n        ;;\n    stop)\n        echo  Stopping  $NAME   \n        start-stop-daemon --stop --verbose --pidfile $PIDFILE\n        rm -f $PIDFILE\n        ;;\n    restart)\n        echo  Restarting  $NAME   \n        start-stop-daemon --stop --verbose --pidfile $PIDFILE\n        rm -f $PIDFILE\n        sleep 1\n        start-stop-daemon --start --verbose --background --pidfile $PIDFILE --make-pidfile --startas $DAEMON -- $DAEMON_ARGS\n        ;;\n    *)\n        echo  Usage:  $(basename  $0 )  {start|stop|restart} \n        echo      Starts the bots webserver as a daemon. \n        echo      Bots-webserver is part of bots open source edi translator (http://bots.sourceforge.net). \n        exit 1\n        ;;\nesac\n\nexit 0", 
            "title": "Example2"
        }, 
        {
            "location": "/LinuxDaemons/#example3", 
            "text": "A script for starting the job queue server as a upstart in Ubuntu.\nAdd the following file: /etc/init/bots-jobqueue.conf  description  Bots Job queue server \nauthor  bots@yourmail.com \n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\nrespawn\n\nexec bots-jobqueueserver.py", 
            "title": "Example3"
        }, 
        {
            "location": "/WindowsServices/", 
            "text": "Creating Windows Services\n\n\nIf running Bots on a Windows server, you\ncan create services to keep the important background processes running.\nThis is the equivalent of a \"daemon\" process in Linux. \n\n\nPrerequisites\n\n\n\n\nsrvany.exe\n - This is a Microsoft utility\n    included in the Windows Server \nResource Kit\n    Tools\n. \n\n\nsc.exe\n -\n    The SC command is included by default in most Windows installations and\n    is also available in the resource kit. \n\n\nPython and Bots are already\n    installed and working, of course! \n\n\n\n\nProcedure\n\n\n\n\nCopy srvany.exe to C:\\Windows\\System32 \n\n\nOpen a command prompt and enter\n    the following commands, according to the service required. Note:\n    position of equal signs and spaces must be exactly as shown. \n    \nsc create \"Bots Webserver\" binPath= \"C:\\\\Windows\\\\System32\\\\srvany.exe\"\n        start= auto DisplayName= \"Bots Webserver\" sc description \"Bots\n        Webserver\" \"This is the webserver for Bots EDI translator.\"\n\n    \nsc create \"Bots Job Queue\" binPath=\n        \"C:\\\\Windows\\\\System32\\\\srvany.exe\" start= auto DisplayName= \"Bots Job\n        Queue\" sc description \"Bots Job Queue\" \"Provides job queue and launch\n        functionality for Bots EDI Translator\"\n \n    \nsc create \"Bots Directory Monitor\" binPath= \"C:\\\\Windows\\\\System32\\\\srvany.exe\" start=\n        auto DisplayName= \"Bots Directory Monitor\" sc description \"Bots\n        Directory Monitor\" \"Monitors one or more directories for new files and\n        creates Bots jobs to process them\"\n \n\n\nRun regedit and navigate to\n    `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\` \n\n\nIn the right hand pane of regedit, right click, New, Key, call it\n    `Parameters`. \n\n\nClick the new Parameters key to select it. \n\n\nIn the right hand pane, right click, New, String value, call it\n    `Application`. \n\n\nDouble click Application, enter the command to run\n    the required Bots script. This will vary according to your installed\n    location and Bots version, eg. \n    \nC:\\\\Python27\\\\python.exe\n        C:\\\\Python27\\\\Scripts\\\\bots-webserver.py \n        C:\\\\Python27\\\\python.exe C:\\\\Python27\\\\Scripts\\\\bots-jobqueueserver.py \n        C:\\\\Python27\\\\python.exe C:\\\\Python27\\\\Scripts\\\\bots-dirmonitor.py\n \n\n\nRun `services.msc`\n    to start/stop/configure your new services. \n\n\n\n\nReference links\n\n\n\n\nhttp://support.microsoft.com/?kbid=137890\n\n\nhttp://support.microsoft.com/?kbid=251192\n\n\n\n\n\n\nIf any of the above doesn't make sense to you, I have created a small\nfree utility program to do it all. This is a general purpose program for\ncreating services. My service configuration for Bots is included; you\nmay need to edit the paths to suit your installation. You can download\nthe program from\n\nhere\n.", 
            "title": "Windows Services"
        }, 
        {
            "location": "/WindowsServices/#creating-windows-services", 
            "text": "If running Bots on a Windows server, you\ncan create services to keep the important background processes running.\nThis is the equivalent of a \"daemon\" process in Linux.", 
            "title": "Creating Windows Services"
        }, 
        {
            "location": "/WindowsServices/#prerequisites", 
            "text": "srvany.exe  - This is a Microsoft utility\n    included in the Windows Server  Resource Kit\n    Tools .   sc.exe  -\n    The SC command is included by default in most Windows installations and\n    is also available in the resource kit.   Python and Bots are already\n    installed and working, of course!", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/WindowsServices/#procedure", 
            "text": "Copy srvany.exe to C:\\Windows\\System32   Open a command prompt and enter\n    the following commands, according to the service required. Note:\n    position of equal signs and spaces must be exactly as shown. \n     sc create \"Bots Webserver\" binPath= \"C:\\\\Windows\\\\System32\\\\srvany.exe\"\n        start= auto DisplayName= \"Bots Webserver\" sc description \"Bots\n        Webserver\" \"This is the webserver for Bots EDI translator.\" \n     sc create \"Bots Job Queue\" binPath=\n        \"C:\\\\Windows\\\\System32\\\\srvany.exe\" start= auto DisplayName= \"Bots Job\n        Queue\" sc description \"Bots Job Queue\" \"Provides job queue and launch\n        functionality for Bots EDI Translator\"  \n     sc create \"Bots Directory Monitor\" binPath= \"C:\\\\Windows\\\\System32\\\\srvany.exe\" start=\n        auto DisplayName= \"Bots Directory Monitor\" sc description \"Bots\n        Directory Monitor\" \"Monitors one or more directories for new files and\n        creates Bots jobs to process them\"    Run regedit and navigate to\n    `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\`   In the right hand pane of regedit, right click, New, Key, call it\n    `Parameters`.   Click the new Parameters key to select it.   In the right hand pane, right click, New, String value, call it\n    `Application`.   Double click Application, enter the command to run\n    the required Bots script. This will vary according to your installed\n    location and Bots version, eg. \n     C:\\\\Python27\\\\python.exe\n        C:\\\\Python27\\\\Scripts\\\\bots-webserver.py \n        C:\\\\Python27\\\\python.exe C:\\\\Python27\\\\Scripts\\\\bots-jobqueueserver.py \n        C:\\\\Python27\\\\python.exe C:\\\\Python27\\\\Scripts\\\\bots-dirmonitor.py    Run `services.msc`\n    to start/stop/configure your new services.", 
            "title": "Procedure"
        }, 
        {
            "location": "/WindowsServices/#reference-links", 
            "text": "http://support.microsoft.com/?kbid=137890  http://support.microsoft.com/?kbid=251192    If any of the above doesn't make sense to you, I have created a small\nfree utility program to do it all. This is a general purpose program for\ncreating services. My service configuration for Bots is included; you\nmay need to edit the paths to suit your installation. You can download\nthe program from here .", 
            "title": "Reference links"
        }, 
        {
            "location": "/DeploymentMultipleEnvironments/", 
            "text": "Multiple Environments (bots>=2.1)\n\n\nThere is more than one way of configuring multiple environments.\n Directories relevant for separate environments are:\n\n\n\n\nbots/config\n: global configuration; eg values for usersys, botssys,\n    database connection, port number.\n\n\nbots/botssys\n: storage of edi files, database, loggings etc.\n\n\nbots/usersys\n: grammars, mappings, route scripts etc.\n\n\n\n\n1. Use config parameter\n\n\nEach bots program \"start script\" accepts a parameter (-c) that indicates\nwhich config directory to use. Within config there are settings for\nbotssys and usersys, so this gives us the ability to have separate\nenvironments. The default, if this parameter is not used, is\n\nconfig\n.\n\n\nBy example:\n\n\n\n\nStart with configuration with the default \nconfig\n, \nusersys\n and\n    \nbotssys\n directories in bots directory.\n\n\nPurpose is to create a 2nd environment (env2).\n\n\n\n\nMake copies of 3 directories within bots directory. Advised is to\n    use the same name-suffix:\n\n\n\n\nMake copy of \nconfig\n, name it \nconfig-env2\n\n\nMake copy of \nbotssys\n, name it \nbotssys-env2\n\n\nMake copy of \nusersys\n, name it \nusersys-env2\n\n\n\n\n\n\n\n\nEdit the configuration files in \nconfig-env2\n and change (at least)\n    the following settings:\n\n\n\n\n\n\nin bots.ini\n\n\n botssys = botssys-env2\n usersys = usersys-env2\n\n\n\n\n\n\n\nsettings.py\n\n\nDATABASE_NAME = os.path.join(PROJECT_PATH, 'botssys-env2/sqlitedb/botsdb')\n\n\n\n\n\n\n\n\n\n\n\nStart bots scripts using the -c parameter to refer to the new\n    environment, eg:\n\n\nbots-webserver.py -cconfig-env2\nbots-engine.py -cconfig-env2\n\n\n\nNote: on linux the use of symlinks in bots directory might be\nuseful.\n\n\n\n\n\n\n2. Use different computers\n\n\nYour production environment is on a server.\n\nYour development environment is on your desktop/laptop PC.\n\nIn this way, you can replicate exactly the same setup (same python\nversion etc), and transfer things from one to the other once tested.\n\n\n3. Using different python installations\n\n\nI used this for a long time for windows.\n\nI had python2.5 and 2.6 installed;\n\nBots in python 2.6 was my development environment; bots in python 2.5\nwas production.\n\nThis is a very simple way to have 2 environments in windows.\n\n\n4. Using python virtualenv tool\n\n\nvirtualenv\n is a tool to\ncreate isolated Python environments.\n\nEach environment has a separate installation of bots and its\ndependencies, so \ndifferent versions\n can be tested. You can activate\nand deactivate the environments as needed. You can use in combination\nwith method 1 to have \"config environments within python environments\".\n\n\nMike has just started testing this method and will add\n\ndetails\n soon...", 
            "title": "Introduction"
        }, 
        {
            "location": "/DeploymentMultipleEnvironments/#multiple-environments-bots6221", 
            "text": "There is more than one way of configuring multiple environments.\n Directories relevant for separate environments are:   bots/config : global configuration; eg values for usersys, botssys,\n    database connection, port number.  bots/botssys : storage of edi files, database, loggings etc.  bots/usersys : grammars, mappings, route scripts etc.", 
            "title": "Multiple Environments (bots>=2.1)"
        }, 
        {
            "location": "/DeploymentMultipleEnvironments/#1-use-config-parameter", 
            "text": "Each bots program \"start script\" accepts a parameter (-c) that indicates\nwhich config directory to use. Within config there are settings for\nbotssys and usersys, so this gives us the ability to have separate\nenvironments. The default, if this parameter is not used, is config .  By example:   Start with configuration with the default  config ,  usersys  and\n     botssys  directories in bots directory.  Purpose is to create a 2nd environment (env2).   Make copies of 3 directories within bots directory. Advised is to\n    use the same name-suffix:   Make copy of  config , name it  config-env2  Make copy of  botssys , name it  botssys-env2  Make copy of  usersys , name it  usersys-env2     Edit the configuration files in  config-env2  and change (at least)\n    the following settings:    in bots.ini   botssys = botssys-env2\n usersys = usersys-env2    settings.py  DATABASE_NAME = os.path.join(PROJECT_PATH, 'botssys-env2/sqlitedb/botsdb')      Start bots scripts using the -c parameter to refer to the new\n    environment, eg:  bots-webserver.py -cconfig-env2\nbots-engine.py -cconfig-env2  Note: on linux the use of symlinks in bots directory might be\nuseful.", 
            "title": "1. Use config parameter"
        }, 
        {
            "location": "/DeploymentMultipleEnvironments/#2-use-different-computers", 
            "text": "Your production environment is on a server. \nYour development environment is on your desktop/laptop PC. \nIn this way, you can replicate exactly the same setup (same python\nversion etc), and transfer things from one to the other once tested.", 
            "title": "2. Use different computers"
        }, 
        {
            "location": "/DeploymentMultipleEnvironments/#3-using-different-python-installations", 
            "text": "I used this for a long time for windows. \nI had python2.5 and 2.6 installed; \nBots in python 2.6 was my development environment; bots in python 2.5\nwas production. \nThis is a very simple way to have 2 environments in windows.", 
            "title": "3. Using different python installations"
        }, 
        {
            "location": "/DeploymentMultipleEnvironments/#4-using-python-virtualenv-tool", 
            "text": "virtualenv  is a tool to\ncreate isolated Python environments. \nEach environment has a separate installation of bots and its\ndependencies, so  different versions  can be tested. You can activate\nand deactivate the environments as needed. You can use in combination\nwith method 1 to have \"config environments within python environments\".  Mike has just started testing this method and will add details  soon...", 
            "title": "4. Using python virtualenv tool"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/", 
            "text": "Using virtualenv\n\n\nvirtualenv is a tool to create isolated\nPython environments. Please refer to the \nvirtualenv package\ndocumentation\n to understand\nwhat it does and how to install it. Virtual environments are not just\nfor Bots; you can use them for any other python development. That is why\nI started investigating this methodology.\n\n This guide is based on information from the following links.\n\n\nhttps://zignar.net/2012/06/17/install-python-on-windows/\n\n\nhttp://www.stuartellis.eu/articles/python-development-windows/\n  \n\n\nInstallation\n\n\n\n\n\n\nInstall python: You have probably done this already! Make sure you\n    have the paths of your \npython27\n and \npython27\\scripts\n included in the\n    \nsystem path variable\n.\n\n\n\n\n\n\nInstall distribute: Download \ndistribute_setup.py\n\n    and invoke it using python.\n\n\n python C:\\Path\\to\\distribute_setup.py\n\n\n\n\n\n\n\nInstall Pip: Download\n    \nget-pip.py\n\n    (right click, save as) and invoke it using python.\n\n\n python C:\\Path\\to\\get-pip.py\n\n\n\n\n\n\n\nInstall Virtualenv: Once Pip is installed, installing any other\n    package (that is available in the Python Package Index) is easy.\n\n\n pip install virtualenv\n\n\n\n\n\n\n\nInstall C and C++ compilers (optional): Not all python libraries are\n    pure python, some may contain C code that must be compiled to install\n    successfully. Download \nMinGW\n,\n    run it, and select the C and C++ compilers to install. When complete,\n    edit the file \nPython27\\Lib\\distutils\\cygwincompiler.py\n and remove\n    \n-mno-cygwin\n from lines 322-326. This flag is no longer supported. You\n    also need to add a setting to each virtual environment that needs to use\n    the compilers (described in the next section). Make sure you have the\n    path of your \nMinGW\\bin\n included in the \nsystem path\n    variable\n.\n\n\n\n\n\n\nCreate your environments\n\n\nTechnically your virtual environments can be stored and scattered\nanywhere, but it makes sense to keep them all grouped together. I\nsuggest you create a \"root\" directory for environments, each environment\nwill be a subdirectory, eg.\n\n\nD:\\\n mkdir PythonEnv\nD:\\\n cd PythonEnv\nD:\\PythonEnv\n\n\n\n\nCreate as many environments as you need (for ease of use, keep\nenvironment names short but meaningful and without spaces), eg. bots310\n\n\nD:\\PythonEnv\n virtualenv bots310\nNew python executable in bots310\\Scripts\\python.exe\nInstalling Setuptools...........................................................\n............................done.\nInstalling Pip..................................................................\n.......................done.\n\nD:\\PythonEnv\n\n\n\n\nIf you installed compilers in the previous section and want to use them\nfor this environment, then edit \nLib\\distutils\\distutils.cfg\n within the\nenvironment folder, and add\n\n\n[build]\ncompiler=mingw32\n\n\n\nActivate and deactivate environments\n\n\nTo activate an environment, use the activate command in it's script\ndirectory. Notice your command prompt changes to show the active\nenvironment in brackets. Only one environment can be \"activated\" at a\ntime, in order to install modules etc.\n\n\nD:\\PythonEnv\n bots310\\scripts\\activate\n(bots310) D:\\PythonEnv\n\n\n\n\nTo deactivate the current environment, use the deactivate command.\nNotice your command prompt changes back to show no active environment in\nbrackets.\n\n\n(bots310) D:\\PythonEnv\n deactivate\nD:\\PythonEnv\n\n\n\n\nOptional; create an activate.bat file in your environment root\ndirectory. This gives you a shortcut to activate environments.\n\n\nREM activate.bat gives you a shortcut to activate python environments\nREM eg. activate bots310\ncall \"%1\\scripts\\activate\"\n\n\n\nInstall Bots in a virtual environment\n\n\nFirst, activate the required environment.\n\nInstall Bots and dependencies using pip (don't use the Bots Windows\ninstaller, because it installs to the default python folder!)\n\n\nInstall Bots from local downloaded .tar.gz file\n\n\n(bots310) D:\\PythonEnv\n pip install .\\bots-3.1.0.tar.gz\nUnpacking d:\\pythonenv\\bots-3.1.0.tar.gz\n  Running setup.py egg_info for package from file:///d7C%5Cpythonenv%5Cbots-3.1.0.tar.gz\n\nInstalling collected packages: bots\n  Running setup.py install for bots\n\nSuccessfully installed bots\nCleaning up...\n\n(bots310) D:\\PythonEnv\n\n\n\n\nInstall Django (version 1.4.x)\n\n\n(bots310) D:\\PythonEnv\npip install Django==1.4.6\nDownloading/unpacking Django==1.4.6\n  Downloading Django-1.4.6.tar.gz (7.7MB): 7.7MB downloaded\n  Running setup.py egg_info for package Django\n\nInstalling collected packages: Django\n  Running setup.py install for Django\n\nSuccessfully installed Django\nCleaning up...\n\n(bots310) D:\\PythonEnv\n\n\n\n\nInstall cherrypy (latest)\n\n\n(bots310) D:\\PythonEnv\n pip install cherrypy\nDownloading/unpacking cherrypy\n  Downloading CherryPy-3.2.4.tar.gz (424kB): 424kB downloaded\n  Running setup.py egg_info for package cherrypy\n\nInstalling collected packages: cherrypy\n  Running setup.py install for cherrypy\n\nSuccessfully installed cherrypy\nCleaning up...\n\n(bots310) D:\\PythonEnv\n\n\n\n\nInstall Genshi (optional, required for template-html output)\n\n\n(bots310) D:\\PythonEnv\n pip install Genshi\nDownloading/unpacking Genshi\n  You are installing a potentially insecure and unverifiable file. Future versions of pip will default to disallowing insecure files.\n  Downloading Genshi-0.7.tar.gz (491kB): 491kB downloaded\n  Running setup.py egg_info for package Genshi\n\n    warning: no files found matching 'COPYING' under directory 'doc'\n    warning: no previously-included files matching '*' found under directory 'doc\\logo.lineform'\n    warning: no previously-included files found matching 'doc\\2000ft.graffle'\n    warning: no previously-included files matching '*.pyc' found anywhere in distribution\nInstalling collected packages: Genshi\n  Running setup.py install for Genshi\n    building 'genshi._speedups' extension\n    C:\\MinGW\\bin\\gcc.exe -mdll -O -Wall -ID:\\Python27\\include -ID:\\PythonEnv\\bots310\\PC -c genshi/_speedups.c -o build\\temp.win32-2.7\\Release\\genshi\\_speedups.o\n    C:\\MinGW\\bin\\gcc.exe -shared -s build\\temp.win32-2.7\\Release\\genshi\\_speedups.o build\\temp.win32-2.7\\Release\\genshi\\_speedups.def -LD:\\Python27\\Libs -LD:\\PythonEnv\\bots310\\libs -LD:\\PythonEnv\\bots310\\PCbuild -lpython27 -lmsvcr90 -obuild\\lib.win32-2.7\\genshi\\_speedups.pyd\n\n    warning: no files found matching 'COPYING' under directory 'doc'\n    warning: no previously-included files matching '*' found under directory 'doc\\logo.lineform'\n    warning: no previously-included files found matching 'doc\\2000ft.graffle'\n    warning: no previously-included files matching '*.pyc' found anywhere in distribution\nSuccessfully installed Genshi\nCleaning up...\n\n(bots310) D:\\PythonEnv\n\n\n\n\nInstall cdecimal (optional, improves \nperformance\n)\n\n\nThis will not install/compile correctly on Windows using pip, and the\ninstaller is an msi (not exe) so easy_install won't work either. You\ncan install it manually though; the two files needed are \ncdedimal.pyd\n\nand \ncdecimal-2.3-py2.7.egg-info\n and they go in your virtual\nenvironment's \nsite-packages\n directory. There are two ways to get these\nfiles.\n\n\n\n\nInstall cdecimal in the default python folder (eg.\n    \nC:\\python27\\lib\\site-packages\n) using the windows msi installer,\n    then copy the two files to your virtual environment.\n\n\nExtract the files from the windows msi installer using a tool such\n    as \nuniversal\n    extractor\n.\n\n\n\n\nInstall pycrypto and paramiko (optional, required for sftp channels)\n\n\nThese will not install/compile correctly on Windows using pip. Instead,\nI used easy_install with a downloaded Windows installer exe.\n\n\n(bots310) C:\\PythonEnv\neasy_install pycrypto-2.1.0.win32-py2.7.exe\n\nProcessing pycrypto-2.1.0.win32-py2.7.exe\ncreating 'c:\\docume~1\\adadmi~3\\locals~1\\temp\\1\\easy_install-wy9qt4\\pycrypto-2.1.\n0-py2.7-win32.egg' and adding 'c:\\docume~1\\adadmi~3\\locals~1\\temp\\1\\easy_install\n-wy9qt4\\pycrypto-2.1.0-py2.7-win32.egg.tmp' to it\nMoving pycrypto-2.1.0-py2.7-win32.egg to c:\\pythonenv\\bots310\\lib\\site-packages\nAdding pycrypto 2.1.0 to easy-install.pth file\n\nInstalled c:\\pythonenv\\bots310\\lib\\site-packages\\pycrypto-2.1.0-py2.7-win32.egg\nProcessing dependencies for pycrypto==2.1.0\nFinished processing dependencies for pycrypto==2.1.0\n\n(bots310) C:\\PythonEnv\neasy_install paramiko-1.7.6.win32.exe\n\nProcessing paramiko-1.7.6.win32.exe\ncreating 'c:\\docume~1\\adadmi~3\\locals~1\\temp\\1\\easy_install-mwtlnu\\paramiko-1.7.\n6-py2.7-win32.egg' and adding 'c:\\docume~1\\adadmi~3\\locals~1\\temp\\1\\easy_install\n-mwtlnu\\paramiko-1.7.6-py2.7-win32.egg.tmp' to it\nMoving paramiko-1.7.6-py2.7-win32.egg to c:\\pythonenv\\bots310\\lib\\site-packages\nAdding paramiko 1.7.6 to easy-install.pth file\n\nInstalled c:\\pythonenv\\bots310\\lib\\site-packages\\paramiko-1.7.6-py2.7-win32.egg\nProcessing dependencies for paramiko==1.7.6\nFinished processing dependencies for paramiko==1.7.6\n\n\n\nStart Bots Webserver in the virtual environment\n\n\nYou can simply start the webserver manually from commandline. The\nvariable %VIRTUAL_ENV% contains the path to the activated environment.\nUsing the start command causes a new console window to be opened.\n\n\n(bots310) D:\\PythonEnv\n start python %VIRTUAL_ENV%\\scripts\\bots-webserver.py\n\n\n\nAlternatively you can modify the environment's activate command (it is a\nsmall batch file of about 25 lines). Edit\n\n%VIRTUAL_ENV%\\scripts\\activate.bat\n and add the above command to the\nend. Then every time you activate the environment, the webserver is\nstarted too. Same for jobqueueserver (if required). I also add a window\ntitle. eg.\n\n\nstart \"webserver (bots310)\" python %VIRTUAL_ENV%\\scripts\\bots-webserver.py\n\n\n\nRunning multiple Bots environments concurrently\n\n\nYes, this is possible!\n\nAlthough only a single environment can be \"activated\", once they are\ncreated you can run multiple bots webservers and engines simultaneously\nfrom different environments, if configured with different ports.\n\n\nbots.ini - use different ports for each environment. eg.\n\n\n[settings]\n#port used to assure only one instance of bots-engine is running. default: 28081\nport = 28091\n\n[webserver]\n#port at which at bots-gui is server. default is 8080\nport = 8090\n\n[jobqueue]\n# Port to use for the job queue xmlrpc server (on localhost). Default: 28082\nport = 28092\n\n\n\nsettings.py - add new setting for the session cookie name, and use a\ndifferent name for each environment. This allows simultaneous login to\neach environment from the same browser. eg. use the environment name\n(default is 'sessionid')\n\n\n#*********sessions, cookies, log out time*************************\nSESSION_COOKIE_NAME = 'bots310'", 
            "title": "Virtual environments"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#using-virtualenv", 
            "text": "virtualenv is a tool to create isolated\nPython environments. Please refer to the  virtualenv package\ndocumentation  to understand\nwhat it does and how to install it. Virtual environments are not just\nfor Bots; you can use them for any other python development. That is why\nI started investigating this methodology. \n This guide is based on information from the following links.  https://zignar.net/2012/06/17/install-python-on-windows/  http://www.stuartellis.eu/articles/python-development-windows/", 
            "title": "Using virtualenv"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#installation", 
            "text": "Install python: You have probably done this already! Make sure you\n    have the paths of your  python27  and  python27\\scripts  included in the\n     system path variable .    Install distribute: Download  distribute_setup.py \n    and invoke it using python.   python C:\\Path\\to\\distribute_setup.py    Install Pip: Download\n     get-pip.py \n    (right click, save as) and invoke it using python.   python C:\\Path\\to\\get-pip.py    Install Virtualenv: Once Pip is installed, installing any other\n    package (that is available in the Python Package Index) is easy.   pip install virtualenv    Install C and C++ compilers (optional): Not all python libraries are\n    pure python, some may contain C code that must be compiled to install\n    successfully. Download  MinGW ,\n    run it, and select the C and C++ compilers to install. When complete,\n    edit the file  Python27\\Lib\\distutils\\cygwincompiler.py  and remove\n     -mno-cygwin  from lines 322-326. This flag is no longer supported. You\n    also need to add a setting to each virtual environment that needs to use\n    the compilers (described in the next section). Make sure you have the\n    path of your  MinGW\\bin  included in the  system path\n    variable .", 
            "title": "Installation"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#create-your-environments", 
            "text": "Technically your virtual environments can be stored and scattered\nanywhere, but it makes sense to keep them all grouped together. I\nsuggest you create a \"root\" directory for environments, each environment\nwill be a subdirectory, eg.  D:\\  mkdir PythonEnv\nD:\\  cd PythonEnv\nD:\\PythonEnv   Create as many environments as you need (for ease of use, keep\nenvironment names short but meaningful and without spaces), eg. bots310  D:\\PythonEnv  virtualenv bots310\nNew python executable in bots310\\Scripts\\python.exe\nInstalling Setuptools...........................................................\n............................done.\nInstalling Pip..................................................................\n.......................done.\n\nD:\\PythonEnv   If you installed compilers in the previous section and want to use them\nfor this environment, then edit  Lib\\distutils\\distutils.cfg  within the\nenvironment folder, and add  [build]\ncompiler=mingw32", 
            "title": "Create your environments"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#activate-and-deactivate-environments", 
            "text": "To activate an environment, use the activate command in it's script\ndirectory. Notice your command prompt changes to show the active\nenvironment in brackets. Only one environment can be \"activated\" at a\ntime, in order to install modules etc.  D:\\PythonEnv  bots310\\scripts\\activate\n(bots310) D:\\PythonEnv   To deactivate the current environment, use the deactivate command.\nNotice your command prompt changes back to show no active environment in\nbrackets.  (bots310) D:\\PythonEnv  deactivate\nD:\\PythonEnv   Optional; create an activate.bat file in your environment root\ndirectory. This gives you a shortcut to activate environments.  REM activate.bat gives you a shortcut to activate python environments\nREM eg. activate bots310\ncall \"%1\\scripts\\activate\"", 
            "title": "Activate and deactivate environments"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#install-bots-in-a-virtual-environment", 
            "text": "First, activate the required environment. \nInstall Bots and dependencies using pip (don't use the Bots Windows\ninstaller, because it installs to the default python folder!)", 
            "title": "Install Bots in a virtual environment"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#install-bots-from-local-downloaded-targz-file", 
            "text": "(bots310) D:\\PythonEnv  pip install .\\bots-3.1.0.tar.gz\nUnpacking d:\\pythonenv\\bots-3.1.0.tar.gz\n  Running setup.py egg_info for package from file:///d7C%5Cpythonenv%5Cbots-3.1.0.tar.gz\n\nInstalling collected packages: bots\n  Running setup.py install for bots\n\nSuccessfully installed bots\nCleaning up...\n\n(bots310) D:\\PythonEnv", 
            "title": "Install Bots from local downloaded .tar.gz file"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#install-django-version-14x", 
            "text": "(bots310) D:\\PythonEnv pip install Django==1.4.6\nDownloading/unpacking Django==1.4.6\n  Downloading Django-1.4.6.tar.gz (7.7MB): 7.7MB downloaded\n  Running setup.py egg_info for package Django\n\nInstalling collected packages: Django\n  Running setup.py install for Django\n\nSuccessfully installed Django\nCleaning up...\n\n(bots310) D:\\PythonEnv", 
            "title": "Install Django (version 1.4.x)"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#install-cherrypy-latest", 
            "text": "(bots310) D:\\PythonEnv  pip install cherrypy\nDownloading/unpacking cherrypy\n  Downloading CherryPy-3.2.4.tar.gz (424kB): 424kB downloaded\n  Running setup.py egg_info for package cherrypy\n\nInstalling collected packages: cherrypy\n  Running setup.py install for cherrypy\n\nSuccessfully installed cherrypy\nCleaning up...\n\n(bots310) D:\\PythonEnv", 
            "title": "Install cherrypy (latest)"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#install-genshi-optional-required-for-template-html-output", 
            "text": "(bots310) D:\\PythonEnv  pip install Genshi\nDownloading/unpacking Genshi\n  You are installing a potentially insecure and unverifiable file. Future versions of pip will default to disallowing insecure files.\n  Downloading Genshi-0.7.tar.gz (491kB): 491kB downloaded\n  Running setup.py egg_info for package Genshi\n\n    warning: no files found matching 'COPYING' under directory 'doc'\n    warning: no previously-included files matching '*' found under directory 'doc\\logo.lineform'\n    warning: no previously-included files found matching 'doc\\2000ft.graffle'\n    warning: no previously-included files matching '*.pyc' found anywhere in distribution\nInstalling collected packages: Genshi\n  Running setup.py install for Genshi\n    building 'genshi._speedups' extension\n    C:\\MinGW\\bin\\gcc.exe -mdll -O -Wall -ID:\\Python27\\include -ID:\\PythonEnv\\bots310\\PC -c genshi/_speedups.c -o build\\temp.win32-2.7\\Release\\genshi\\_speedups.o\n    C:\\MinGW\\bin\\gcc.exe -shared -s build\\temp.win32-2.7\\Release\\genshi\\_speedups.o build\\temp.win32-2.7\\Release\\genshi\\_speedups.def -LD:\\Python27\\Libs -LD:\\PythonEnv\\bots310\\libs -LD:\\PythonEnv\\bots310\\PCbuild -lpython27 -lmsvcr90 -obuild\\lib.win32-2.7\\genshi\\_speedups.pyd\n\n    warning: no files found matching 'COPYING' under directory 'doc'\n    warning: no previously-included files matching '*' found under directory 'doc\\logo.lineform'\n    warning: no previously-included files found matching 'doc\\2000ft.graffle'\n    warning: no previously-included files matching '*.pyc' found anywhere in distribution\nSuccessfully installed Genshi\nCleaning up...\n\n(bots310) D:\\PythonEnv", 
            "title": "Install Genshi (optional, required for template-html output)"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#install-cdecimal-optional-improves-performance", 
            "text": "This will not install/compile correctly on Windows using pip, and the\ninstaller is an msi (not exe) so easy_install won't work either. You\ncan install it manually though; the two files needed are  cdedimal.pyd \nand  cdecimal-2.3-py2.7.egg-info  and they go in your virtual\nenvironment's  site-packages  directory. There are two ways to get these\nfiles.   Install cdecimal in the default python folder (eg.\n     C:\\python27\\lib\\site-packages ) using the windows msi installer,\n    then copy the two files to your virtual environment.  Extract the files from the windows msi installer using a tool such\n    as  universal\n    extractor .", 
            "title": "Install cdecimal (optional, improves performance)"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#install-pycrypto-and-paramiko-optional-required-for-sftp-channels", 
            "text": "These will not install/compile correctly on Windows using pip. Instead,\nI used easy_install with a downloaded Windows installer exe.  (bots310) C:\\PythonEnv easy_install pycrypto-2.1.0.win32-py2.7.exe\n\nProcessing pycrypto-2.1.0.win32-py2.7.exe\ncreating 'c:\\docume~1\\adadmi~3\\locals~1\\temp\\1\\easy_install-wy9qt4\\pycrypto-2.1.\n0-py2.7-win32.egg' and adding 'c:\\docume~1\\adadmi~3\\locals~1\\temp\\1\\easy_install\n-wy9qt4\\pycrypto-2.1.0-py2.7-win32.egg.tmp' to it\nMoving pycrypto-2.1.0-py2.7-win32.egg to c:\\pythonenv\\bots310\\lib\\site-packages\nAdding pycrypto 2.1.0 to easy-install.pth file\n\nInstalled c:\\pythonenv\\bots310\\lib\\site-packages\\pycrypto-2.1.0-py2.7-win32.egg\nProcessing dependencies for pycrypto==2.1.0\nFinished processing dependencies for pycrypto==2.1.0\n\n(bots310) C:\\PythonEnv easy_install paramiko-1.7.6.win32.exe\n\nProcessing paramiko-1.7.6.win32.exe\ncreating 'c:\\docume~1\\adadmi~3\\locals~1\\temp\\1\\easy_install-mwtlnu\\paramiko-1.7.\n6-py2.7-win32.egg' and adding 'c:\\docume~1\\adadmi~3\\locals~1\\temp\\1\\easy_install\n-mwtlnu\\paramiko-1.7.6-py2.7-win32.egg.tmp' to it\nMoving paramiko-1.7.6-py2.7-win32.egg to c:\\pythonenv\\bots310\\lib\\site-packages\nAdding paramiko 1.7.6 to easy-install.pth file\n\nInstalled c:\\pythonenv\\bots310\\lib\\site-packages\\paramiko-1.7.6-py2.7-win32.egg\nProcessing dependencies for paramiko==1.7.6\nFinished processing dependencies for paramiko==1.7.6", 
            "title": "Install pycrypto and paramiko (optional, required for sftp channels)"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#start-bots-webserver-in-the-virtual-environment", 
            "text": "You can simply start the webserver manually from commandline. The\nvariable %VIRTUAL_ENV% contains the path to the activated environment.\nUsing the start command causes a new console window to be opened.  (bots310) D:\\PythonEnv  start python %VIRTUAL_ENV%\\scripts\\bots-webserver.py  Alternatively you can modify the environment's activate command (it is a\nsmall batch file of about 25 lines). Edit %VIRTUAL_ENV%\\scripts\\activate.bat  and add the above command to the\nend. Then every time you activate the environment, the webserver is\nstarted too. Same for jobqueueserver (if required). I also add a window\ntitle. eg.  start \"webserver (bots310)\" python %VIRTUAL_ENV%\\scripts\\bots-webserver.py", 
            "title": "Start Bots Webserver in the virtual environment"
        }, 
        {
            "location": "/DeploymentMultipleEnvironmentsVirtual/#running-multiple-bots-environments-concurrently", 
            "text": "Yes, this is possible! \nAlthough only a single environment can be \"activated\", once they are\ncreated you can run multiple bots webservers and engines simultaneously\nfrom different environments, if configured with different ports.  bots.ini - use different ports for each environment. eg.  [settings]\n#port used to assure only one instance of bots-engine is running. default: 28081\nport = 28091\n\n[webserver]\n#port at which at bots-gui is server. default is 8080\nport = 8090\n\n[jobqueue]\n# Port to use for the job queue xmlrpc server (on localhost). Default: 28082\nport = 28092  settings.py - add new setting for the session cookie name, and use a\ndifferent name for each environment. This allows simultaneous login to\neach environment from the same browser. eg. use the environment name\n(default is 'sessionid')  #*********sessions, cookies, log out time*************************\nSESSION_COOKIE_NAME = 'bots310'", 
            "title": "Running multiple Bots environments concurrently"
        }, 
        {
            "location": "/DeploymentAdvanced/", 
            "text": "Advanced Deployment\n\n\nTopics:\n  1. If more users have access to bots-monitor, use \nlimited rights for users\n.\n  1. If you use bots-monitor over the internet/outside your LAN, use \nHTTPS/SSL connection\n.\n  1. Use \nMySQL or PostgreSQL as the Bots database\n.\n  1. Use \nAS2 as a communication method\n.\n  1. Bots has \noptions to push changes from test to production\n.\n  1. Information about \nperformance\n.", 
            "title": "Advanced Deployment"
        }, 
        {
            "location": "/DeploymentAdvanced/#advanced-deployment", 
            "text": "Topics:\n  1. If more users have access to bots-monitor, use  limited rights for users .\n  1. If you use bots-monitor over the internet/outside your LAN, use  HTTPS/SSL connection .\n  1. Use  MySQL or PostgreSQL as the Bots database .\n  1. Use  AS2 as a communication method .\n  1. Bots has  options to push changes from test to production .\n  1. Information about  performance .", 
            "title": "Advanced Deployment"
        }, 
        {
            "location": "/UserSecurity/", 
            "text": "User Rights\n\n\nTo add Bots users, select \nUsers\n on\nthe \nSysTasks\n menu. The Change User screen has a section\ncalled \nPermissions\n which contains the following settings\ncontrolling that user's access. \n\n\nActive\n\n\nIf this box is checked, the user is able to log on to the webserver and view \nrun details. \n\n\nNote: A bug in version 3.1.0 prevents users with only Active status from\nchanging their own passwords. To be fixed in v3.2.0.\n\n\nStaff status\n\n\nThese users may also see the Configuration and Run menu items, depending\non specific user permissions (see below). Only the permitted menu items\nwill be visible.\n\nIf you do not give any extra permissions, only an empty configuration\nmenu is shown.\n\n\nSuperuser status\n\n\nThese users can also see the Systasks menu. They have access to all\nConfiguration and Run options without being specifically given\npermission. The default user (bots) is a superuser.\n\n\nRecommendation: Create user names according to your company policy.\nDisable the default user or change the password; anybody can find out\nthe default user/password for bots!\n\n\nUser Permissions for Staff status users\n\n\nHere you can add permissions for specific configuration objects. Only\nsome of the permissions shown in the list are relevant; they control\naccess to the corresponding configuration menu options. Any permissions\nnot listed below can be ignored as they have no effect in Bots GUI.\nPermissions can be given directly to a user, or to a user group which is\nthen added to multiple users.\n\n\n\n\nbots route\n\n\nbots channel\n\n\nbots translation\n\n\nbots partner\n\n\nbots confirm rule\n\n\nbots user code\n\n\nbots user code type\n\n\nbots mutex - gives access to the Run menu\n    * new in version 2.2.0\n\n\n\n\nYou can use the search box under Available user permissions, then select\nthe required permissions. Use the Ctrl-key to select multple items.\nNormally, you would give add/change/delete permissions together for the\nrequired configuration.\n\n\neg. To allow a staff user to configure channels, give these\npermissions.\n\n\nbots | channel | Can add channel\nbots | channel | Can change channel\nbots | channel | Can delete channel\n\n\n\nTo allow a staff user access to the Run menu, give this special\npermission. (mutex is a table that bots uses to indicate a database lock\nwhile the engine runs)\n\n\nbots | mutex | Can change mutex\n\n\n\n!!explain user groups!!", 
            "title": "User Rights"
        }, 
        {
            "location": "/UserSecurity/#user-rights", 
            "text": "To add Bots users, select  Users  on\nthe  SysTasks  menu. The Change User screen has a section\ncalled  Permissions  which contains the following settings\ncontrolling that user's access.", 
            "title": "User Rights"
        }, 
        {
            "location": "/UserSecurity/#active", 
            "text": "If this box is checked, the user is able to log on to the webserver and view \nrun details.   Note: A bug in version 3.1.0 prevents users with only Active status from\nchanging their own passwords. To be fixed in v3.2.0.", 
            "title": "Active"
        }, 
        {
            "location": "/UserSecurity/#staff-status", 
            "text": "These users may also see the Configuration and Run menu items, depending\non specific user permissions (see below). Only the permitted menu items\nwill be visible. \nIf you do not give any extra permissions, only an empty configuration\nmenu is shown.", 
            "title": "Staff status"
        }, 
        {
            "location": "/UserSecurity/#superuser-status", 
            "text": "These users can also see the Systasks menu. They have access to all\nConfiguration and Run options without being specifically given\npermission. The default user (bots) is a superuser.  Recommendation: Create user names according to your company policy.\nDisable the default user or change the password; anybody can find out\nthe default user/password for bots!", 
            "title": "Superuser status"
        }, 
        {
            "location": "/UserSecurity/#user-permissions-for-staff-status-users", 
            "text": "Here you can add permissions for specific configuration objects. Only\nsome of the permissions shown in the list are relevant; they control\naccess to the corresponding configuration menu options. Any permissions\nnot listed below can be ignored as they have no effect in Bots GUI.\nPermissions can be given directly to a user, or to a user group which is\nthen added to multiple users.   bots route  bots channel  bots translation  bots partner  bots confirm rule  bots user code  bots user code type  bots mutex - gives access to the Run menu\n    * new in version 2.2.0   You can use the search box under Available user permissions, then select\nthe required permissions. Use the Ctrl-key to select multple items.\nNormally, you would give add/change/delete permissions together for the\nrequired configuration.  eg. To allow a staff user to configure channels, give these\npermissions.  bots | channel | Can add channel\nbots | channel | Can change channel\nbots | channel | Can delete channel  To allow a staff user access to the Run menu, give this special\npermission. (mutex is a table that bots uses to indicate a database lock\nwhile the engine runs)  bots | mutex | Can change mutex  !!explain user groups!!", 
            "title": "User Permissions for Staff status users"
        }, 
        {
            "location": "/DeploymentHttps/", 
            "text": "Bots-monitor over HTTPS Introduction\n\n\nThis feature is introduced in bots 2.1.0.\n\nThis works with cherrypy > 3.2.0 in combination with python 2.6 or\n2.7. In python 2.5 this works (using extra dependency pyOpenssl) but\ngives problems with reading plugins.\n\n\nProcedure:\n\n\n\n\nyou will need an SSL certificate. You can use self-signed\n    certificates.\n\n\n\n\nin \nbots/config/bots.ini\n uncomment options ssl_certificate and\n    ssl_private_key (in section webserver), and set these to the right\n    value, eg:\n\n\nssl_certificate = /mysafeplace/mycert.pem \nssl_private_key = /mysafeplace/mycert.pem\n#In this example certificate and private key are in the same pem-file.\n\n\n\n\n\n\n\nrestart bots-webserver\n\n\n\n\npoint your browser to the right https-address, eg:\n    \nhttps://localhost:8080\n\n\n\n\nTips\n\n\nIf you are using cherrypy and receive an error\n\"ssl_error_rx_record_too_long\" try the 2-line fix at\n\nhttps://bitbucket.org/cherrypy/cherrypy/issue/1293/ssl-broken-under-pypy-221\n\n\nYou can create self-signed certificates at\n\nhttp://www.selfsignedcertificate.com/\n \n\n\nYou can configure port=443 in\nbots.ini then just point your browser to \nhttps://localhost", 
            "title": "Bots-monitor over HTTPS"
        }, 
        {
            "location": "/DeploymentHttps/#bots-monitor-over-https-introduction", 
            "text": "This feature is introduced in bots 2.1.0. \nThis works with cherrypy > 3.2.0 in combination with python 2.6 or\n2.7. In python 2.5 this works (using extra dependency pyOpenssl) but\ngives problems with reading plugins.  Procedure:   you will need an SSL certificate. You can use self-signed\n    certificates.   in  bots/config/bots.ini  uncomment options ssl_certificate and\n    ssl_private_key (in section webserver), and set these to the right\n    value, eg:  ssl_certificate = /mysafeplace/mycert.pem \nssl_private_key = /mysafeplace/mycert.pem\n#In this example certificate and private key are in the same pem-file.    restart bots-webserver   point your browser to the right https-address, eg:\n     https://localhost:8080", 
            "title": "Bots-monitor over HTTPS Introduction"
        }, 
        {
            "location": "/DeploymentHttps/#tips", 
            "text": "If you are using cherrypy and receive an error\n\"ssl_error_rx_record_too_long\" try the 2-line fix at https://bitbucket.org/cherrypy/cherrypy/issue/1293/ssl-broken-under-pypy-221  You can create self-signed certificates at http://www.selfsignedcertificate.com/    You can configure port=443 in\nbots.ini then just point your browser to  https://localhost", 
            "title": "Tips"
        }, 
        {
            "location": "/DeploymentWebserver/", 
            "text": "Running bots-webserver\n\n\nThe bots-webserver process should always run without any human intervention in case the server bots is installed on is restarted.\n\n\n\n\nIn Windows, you can set up a [Windows Service](WindowsServices.md]\n\n\nIn linux/unix... (add info)", 
            "title": "Use Apache2"
        }, 
        {
            "location": "/DeploymentWebserver/#running-bots-webserver", 
            "text": "The bots-webserver process should always run without any human intervention in case the server bots is installed on is restarted.   In Windows, you can set up a [Windows Service](WindowsServices.md]  In linux/unix... (add info)", 
            "title": "Running bots-webserver"
        }, 
        {
            "location": "/DeploymentOtherDatabase/", 
            "text": "Use MySQL or PostgreSQL as database\n\n\nBackgrond information: \n\n\n\n\nDefault bots uses a SQLite database. This is included in the standard\n    installation and works out-of-the-box. Performance of SQLite is good! \n\n\nBots always uses utf-8 in the database communication. \n\n\nDatabase tables are installed using django-machinery. See django docs. \n\n\nAfter installation, you may want to \nmigrate some\n    data\n. \n\n\nYou might have to manually add a database\n    trigger if using \npersist functions\n.\\\n\n\n\n\nPostgreSQL\n\n\n\n\ninstall PostgreSQL.\n\n\ninstall psycopg2 as python database adapter.\n\n\nlogin in command line client of database.\n\n\nCreate database (CLI) :\n    \nCREATE DATABASE botsdb WITH ENCODING 'UTF8';\n\n\nCreate user (CLI): \nCREATE USER bots WITH PASSWORD 'botsbots';\n\n\nGive user rights: (CLI)\n    \nGRANT ALL PRIVILEGES ON DATABASE botsdb TO bots;\n\n\nmake sure database accepts connections over (non-local) TCP/IP:\n    change parameter listen_addresses in in postgresql.conf; add/change\n    setting for user in pg_hba.conf.\n\n\nSet connection parameter in bots configuration in\n    \nbots/config/settings.py\n. Examples are provided - see comments in\n    settings.py\n\n\nCreate the required tables (CLI):\n\n\n(CLI) \ndjango-admin syncdb  --settings='bots.config.settings'\n\n\n(CLI) or when bots is not installed in the default directory:\n    \ndjango-admin syncdb --pythonpath='path to bots' --settings='bots.config.settings'\n\n\nDjango asks for name etc of default user.\n\n\n\n\n\n\n\n\nMySQL\n\n\n\n\ninstall MySQL.\n\n\ninstall mysql-Python as python database adapter.\n\n\nlogin in command line client of database.\n\n\nCreate database (CLI):\n    \nCREATE DATABASE botsdb DEFAULT CHARSET utf8;\n\n\nCreate user (CLI): \nCREATE USER 'bots' IDENTIFIED BY 'botsbots';\n\n\nGive user rights (CLI):\n    \nGRANT ALL PRIVILEGES ON botsdb.* TO 'bots';\n\n\nmake sure database accepts connections over (non-local) TCP/IP:\n    change parameter 'binds' in /etc/mysql/my.cfg.\n\n\nSet connection parameter in bots configuration in\n    \nbots/config/settings.py\n. Examples are provided - see comments in\n    settings.py\n\n\nCreate the required tables:\n\n\n(CLI) \ndjango-admin syncdb  --settings='bots.config.settings'\n\n\n(CLI) or when bots is not installed in the default directory:\n    \ndjango-admin syncdb --pythonpath='path to bots' --settings='bots.config.settings'\n\n\nDjango asks for name etc of default user.\n\n\n\n\n\n\n\n\nMySQL on Windows\n\n\n\n\nDownload \nMySQL community\n    server\n msi installer.\n    (tested version 5.5.20)\n\n\nRun the installer, do a \"typical\" installation and follow the\n    prompts. On the final screen, make sure \nLaunch the MySQL Instance\n    Configuration Wizard\n box is ticked.\n\n\nWhen the configuration wizard starts, make the following\n    selections:\n\n\nDetailed configuration\n\n\nServer machine (you may choose developer for your bots test\n    environment)\n\n\nTransactional database\n\n\nDSS/OLAP (20 connections)\n\n\nEnable TCP/IP and Strict mode (defaults)\n\n\nBest support for multilingualism (\nUTF8\n)\n\n\nInstall as Windows service (default)\n\n\nModify security settings; enter a root password and write it\n    down.\n\n\nExecute configuration\n\n\nCreate a shortcut to \nC:\\Program Files\\MySQL\\MySQL Server\n    5.5\\bin\\MySQLInstanceConfig.exe\n in case you want to modify\n    any of these settings later.\n\n\n\n\n\n\nGo to \nStart > Programs > MySQL > MySQL Server > MySQL Command\n    Line Client\n. Enter your root password when prompted. You should now\n    have a \nmysql\n command prompt.\n\n\n\n\nEnter the following MySQL commands at the prompt:\n\n\nmysql\n CREATE DATABASE botsdb DEFAULT CHARSET utf8;\n Query OK, 1 row affected (0.01 sec)\n\nmysql\n CREATE USER 'bots' IDENTIFIED BY 'botsbots';\n Query OK, 0 rows affected (0.00 sec)\n\nmysql\n GRANT ALL ON botsdb.* TO 'bots';\n Query OK, 0 rows affected (0.03 sec)\n\n\n\n\n\n\n\nDownload and install \nMySQL-python for\n    Windows\n to suit your python\n    version (tested MySQL-python-1.2.3.win32-py2.7.exe)\n\n\n\n\n\n\nSet connection parameters in bots configuration in\n    \nbots/config/settings.py\n. MySQL example is provided, I only changed\n    HOST.\n\n\n#MySQL:\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'botsdb',\n        'USER': 'bots',\n        'PASSWORD': 'botsbots',\n        'HOST': 'localhost',  #database is on same server as Bots\n        'PORT': '3306',\n        'OPTIONS': {'use_unicode':True,'charset':'utf8','init_command': 'SET storage_engine=INNODB'},\n        }\n    }\n\n\n\n\n\n\n\nCreate the required tables from a command prompt. Django asks for\n    name etc of superuser. (enter user: bots, password: botsbots)\n\n\n D:\\python27\\python.exe D:\\Python27\\lib\\site-packages\\django\\bin\\django-admin.py syncdb \n  --settings=bots.config.settings\n\nCreating tables ...\nCreating table auth_permission\nCreating table auth_group_permissions\nCreating table auth_group\nCreating table auth_user_user_permissions\nCreating table auth_user_groups\nCreating table auth_user\nCreating table auth_message\nCreating table django_content_type\nCreating table django_session\nCreating table django_admin_log\nCreating table confirmrule\nCreating table ccodetrigger\nCreating table ccode\nCreating table channel\nCreating table partnergroup\nCreating table partner\nCreating table chanpar\nCreating table translate\nCreating table routes\nCreating table filereport\nCreating table mutex\nCreating table persist\nCreating table report\nCreating table ta\nCreating table uniek\n\nYou just installed Django's auth system, which means you don't have any superusers defined.\nWould you like to create one now? (yes/no): yes\nUsername (Leave blank to use 'mike'): bots\nE-mail address: bots@bots.com\nPassword: botsbots\nPassword (again): botsbots\nSuperuser created successfully.\nInstalling custom SQL ...\nInstalling indexes ...\nNo fixtures found.\n\n\n\n\n\n\n\nNow start bots-webserver and log in as bots.\n\n\n\n\n\n\nNote: The database is stored in C:/ProgramData/MySQL/MySQL Server\n5.5/Data/ by default (on Windows 7).  \n\n\nTo move the database, do the following:\n\n\n\n\n\n\nStop the MySQL service\n\n\n\n\n\n\nMove the /Data/ folder only to your required location (eg. D:/MySQL\n    Server 5.5/Data/\n\n\n\n\n\n\nMake sure the permissions are moved with it. \"NETWORK SERVCE\" must have\n    full control\n\n\n\n\n\n\nChange the setting \"datadir\" in C:/ProgramData/MySQL/MySQL Server\n    5.5/my.ini to indicate the new folder location\\\n\n\n# Path to the database root\ndatadir=D:/MySQL Server 5.6/Data\n\n\n\n\n\n\n\nRestart the MySQL service. If it will not start, check permissions!", 
            "title": "Use MySQL/PostgreSQL"
        }, 
        {
            "location": "/DeploymentOtherDatabase/#use-mysql-or-postgresql-as-database", 
            "text": "Backgrond information:    Default bots uses a SQLite database. This is included in the standard\n    installation and works out-of-the-box. Performance of SQLite is good!   Bots always uses utf-8 in the database communication.   Database tables are installed using django-machinery. See django docs.   After installation, you may want to  migrate some\n    data .   You might have to manually add a database\n    trigger if using  persist functions .\\", 
            "title": "Use MySQL or PostgreSQL as database"
        }, 
        {
            "location": "/DeploymentOtherDatabase/#postgresql", 
            "text": "install PostgreSQL.  install psycopg2 as python database adapter.  login in command line client of database.  Create database (CLI) :\n     CREATE DATABASE botsdb WITH ENCODING 'UTF8';  Create user (CLI):  CREATE USER bots WITH PASSWORD 'botsbots';  Give user rights: (CLI)\n     GRANT ALL PRIVILEGES ON DATABASE botsdb TO bots;  make sure database accepts connections over (non-local) TCP/IP:\n    change parameter listen_addresses in in postgresql.conf; add/change\n    setting for user in pg_hba.conf.  Set connection parameter in bots configuration in\n     bots/config/settings.py . Examples are provided - see comments in\n    settings.py  Create the required tables (CLI):  (CLI)  django-admin syncdb  --settings='bots.config.settings'  (CLI) or when bots is not installed in the default directory:\n     django-admin syncdb --pythonpath='path to bots' --settings='bots.config.settings'  Django asks for name etc of default user.", 
            "title": "PostgreSQL"
        }, 
        {
            "location": "/DeploymentOtherDatabase/#mysql", 
            "text": "install MySQL.  install mysql-Python as python database adapter.  login in command line client of database.  Create database (CLI):\n     CREATE DATABASE botsdb DEFAULT CHARSET utf8;  Create user (CLI):  CREATE USER 'bots' IDENTIFIED BY 'botsbots';  Give user rights (CLI):\n     GRANT ALL PRIVILEGES ON botsdb.* TO 'bots';  make sure database accepts connections over (non-local) TCP/IP:\n    change parameter 'binds' in /etc/mysql/my.cfg.  Set connection parameter in bots configuration in\n     bots/config/settings.py . Examples are provided - see comments in\n    settings.py  Create the required tables:  (CLI)  django-admin syncdb  --settings='bots.config.settings'  (CLI) or when bots is not installed in the default directory:\n     django-admin syncdb --pythonpath='path to bots' --settings='bots.config.settings'  Django asks for name etc of default user.", 
            "title": "MySQL"
        }, 
        {
            "location": "/DeploymentOtherDatabase/#mysql-on-windows", 
            "text": "Download  MySQL community\n    server  msi installer.\n    (tested version 5.5.20)  Run the installer, do a \"typical\" installation and follow the\n    prompts. On the final screen, make sure  Launch the MySQL Instance\n    Configuration Wizard  box is ticked.  When the configuration wizard starts, make the following\n    selections:  Detailed configuration  Server machine (you may choose developer for your bots test\n    environment)  Transactional database  DSS/OLAP (20 connections)  Enable TCP/IP and Strict mode (defaults)  Best support for multilingualism ( UTF8 )  Install as Windows service (default)  Modify security settings; enter a root password and write it\n    down.  Execute configuration  Create a shortcut to  C:\\Program Files\\MySQL\\MySQL Server\n    5.5\\bin\\MySQLInstanceConfig.exe  in case you want to modify\n    any of these settings later.    Go to  Start > Programs > MySQL > MySQL Server > MySQL Command\n    Line Client . Enter your root password when prompted. You should now\n    have a  mysql  command prompt.   Enter the following MySQL commands at the prompt:  mysql  CREATE DATABASE botsdb DEFAULT CHARSET utf8;\n Query OK, 1 row affected (0.01 sec)\n\nmysql  CREATE USER 'bots' IDENTIFIED BY 'botsbots';\n Query OK, 0 rows affected (0.00 sec)\n\nmysql  GRANT ALL ON botsdb.* TO 'bots';\n Query OK, 0 rows affected (0.03 sec)    Download and install  MySQL-python for\n    Windows  to suit your python\n    version (tested MySQL-python-1.2.3.win32-py2.7.exe)    Set connection parameters in bots configuration in\n     bots/config/settings.py . MySQL example is provided, I only changed\n    HOST.  #MySQL:\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'botsdb',\n        'USER': 'bots',\n        'PASSWORD': 'botsbots',\n        'HOST': 'localhost',  #database is on same server as Bots\n        'PORT': '3306',\n        'OPTIONS': {'use_unicode':True,'charset':'utf8','init_command': 'SET storage_engine=INNODB'},\n        }\n    }    Create the required tables from a command prompt. Django asks for\n    name etc of superuser. (enter user: bots, password: botsbots)   D:\\python27\\python.exe D:\\Python27\\lib\\site-packages\\django\\bin\\django-admin.py syncdb \n  --settings=bots.config.settings\n\nCreating tables ...\nCreating table auth_permission\nCreating table auth_group_permissions\nCreating table auth_group\nCreating table auth_user_user_permissions\nCreating table auth_user_groups\nCreating table auth_user\nCreating table auth_message\nCreating table django_content_type\nCreating table django_session\nCreating table django_admin_log\nCreating table confirmrule\nCreating table ccodetrigger\nCreating table ccode\nCreating table channel\nCreating table partnergroup\nCreating table partner\nCreating table chanpar\nCreating table translate\nCreating table routes\nCreating table filereport\nCreating table mutex\nCreating table persist\nCreating table report\nCreating table ta\nCreating table uniek\n\nYou just installed Django's auth system, which means you don't have any superusers defined.\nWould you like to create one now? (yes/no): yes\nUsername (Leave blank to use 'mike'): bots\nE-mail address: bots@bots.com\nPassword: botsbots\nPassword (again): botsbots\nSuperuser created successfully.\nInstalling custom SQL ...\nInstalling indexes ...\nNo fixtures found.    Now start bots-webserver and log in as bots.    Note: The database is stored in C:/ProgramData/MySQL/MySQL Server\n5.5/Data/ by default (on Windows 7).    To move the database, do the following:    Stop the MySQL service    Move the /Data/ folder only to your required location (eg. D:/MySQL\n    Server 5.5/Data/    Make sure the permissions are moved with it. \"NETWORK SERVCE\" must have\n    full control    Change the setting \"datadir\" in C:/ProgramData/MySQL/MySQL Server\n    5.5/my.ini to indicate the new folder location\\  # Path to the database root\ndatadir=D:/MySQL Server 5.6/Data    Restart the MySQL service. If it will not start, check permissions!", 
            "title": "MySQL on Windows"
        }, 
        {
            "location": "/DeploymentAS2/", 
            "text": "Using AS2 with Bots\n\n\nWhat is AS2\n\n\nAS2 (Applicability Statement 2) is a specification about how to transport data \nsecurely and reliably over the Internet. Security is achieved by using digital\ncertificates and encryption.  \n\n\nThere are multiple forms of AS2, most used is AS2 over HTTP(S).\n\nAS2 (over HTTP) is a server protocol: to use AS2 you will need an\nAS2-server. Each partner requires their own AS2 communications gateway.\nAll AS2 software is designed to be interoperable. There are several open\nsource implementations, as well as commercial software and hosted\nservices.\n\nSee also \nwikipedia\n\n\n\n\n\n\n\n\nHow to use AS2 with Bots\n\n\nSeveral threads in the mailing list about this. To be condensed into a\ngood how-to article...\n\n\n\n\nhttp://groups.google.com/group/botsmail/browse_thread/thread/b98c49f9ec9c4e8a/15e9ed6dbae987f5\n\n\nhttp://groups.google.com/group/botsmail/browse_thread/thread/54c7462a32fb9741/c594d71fb214b8c1\n\n\nhttp://groups.google.com/group/botsmail/browse_thread/thread/9bd0cc65461478b/0bbc729349392a1f\n\n\n\n\nAS2 Software\n\n\nhttp://sourceforge.net/projects/mec-as2/\n\n\nhttp://sourceforge.net/projects/openas2/\n\n\nhttp://www.cecid.hku.hk/hermes.php\n\n\nhttp://stackoverflow.com/questions/7426951/is-anyone-using-python-for-gs1-xml-and-as2-edi", 
            "title": "Using AS2 with Bots"
        }, 
        {
            "location": "/DeploymentAS2/#using-as2-with-bots", 
            "text": "", 
            "title": "Using AS2 with Bots"
        }, 
        {
            "location": "/DeploymentAS2/#what-is-as2", 
            "text": "AS2 (Applicability Statement 2) is a specification about how to transport data \nsecurely and reliably over the Internet. Security is achieved by using digital\ncertificates and encryption.    There are multiple forms of AS2, most used is AS2 over HTTP(S). \nAS2 (over HTTP) is a server protocol: to use AS2 you will need an\nAS2-server. Each partner requires their own AS2 communications gateway.\nAll AS2 software is designed to be interoperable. There are several open\nsource implementations, as well as commercial software and hosted\nservices. \nSee also  wikipedia", 
            "title": "What is AS2"
        }, 
        {
            "location": "/DeploymentAS2/#how-to-use-as2-with-bots", 
            "text": "Several threads in the mailing list about this. To be condensed into a\ngood how-to article...   http://groups.google.com/group/botsmail/browse_thread/thread/b98c49f9ec9c4e8a/15e9ed6dbae987f5  http://groups.google.com/group/botsmail/browse_thread/thread/54c7462a32fb9741/c594d71fb214b8c1  http://groups.google.com/group/botsmail/browse_thread/thread/9bd0cc65461478b/0bbc729349392a1f", 
            "title": "How to use AS2 with Bots"
        }, 
        {
            "location": "/DeploymentAS2/#as2-software", 
            "text": "http://sourceforge.net/projects/mec-as2/  http://sourceforge.net/projects/openas2/  http://www.cecid.hku.hk/hermes.php  http://stackoverflow.com/questions/7426951/is-anyone-using-python-for-gs1-xml-and-as2-edi", 
            "title": "AS2 Software"
        }, 
        {
            "location": "/DeploymentEnv/", 
            "text": "Configuration change management (bots>=3.0)\n\n\nHaving different environments for at least test and production is a sound IT \npractice.\n\nBut having different environments also brings problems:\n\n\n\n\npush changes in a controlled way to production-environment\n\n\nare changes done right, and does the existing configuration still\n    run right?\n\n\nkeep test-environment in line with production-environment\n\n\n\n\nTo handle these problems bots has some features called\n\nconfiguration change management\n.\n\n\nBots configuration change management\n\n\nConfiguration change management in bots has 2 aspects:\n\n\n\n\n\n\nUse \ntools\n for:\n\n\n\n\nComparing differences in configuration of environments\n\n\nPushing the changes from test->production environment in a\n    controlled, automated way\n\n\n\n\n\n\n\n\nUse of \nisolated acceptance test\n to:\n\n\n\n\ncheck if acceptance test runs OK in test\n\n\ncheck if acceptance test runs OK in production\n\n\nmake the test-environment (very) equal to production-environment\n\n\n\n\n\n\n\n\nConfiguration change management works best if both aspects are\ncombined!\n\n\nSee \nreceipe\n for this!", 
            "title": "Configuration change management"
        }, 
        {
            "location": "/DeploymentEnv/#configuration-change-management-bots6230", 
            "text": "Having different environments for at least test and production is a sound IT \npractice. \nBut having different environments also brings problems:   push changes in a controlled way to production-environment  are changes done right, and does the existing configuration still\n    run right?  keep test-environment in line with production-environment   To handle these problems bots has some features called configuration change management .", 
            "title": "Configuration change management (bots>=3.0)"
        }, 
        {
            "location": "/DeploymentEnv/#bots-configuration-change-management", 
            "text": "Configuration change management in bots has 2 aspects:    Use  tools  for:   Comparing differences in configuration of environments  Pushing the changes from test->production environment in a\n    controlled, automated way     Use of  isolated acceptance test  to:   check if acceptance test runs OK in test  check if acceptance test runs OK in production  make the test-environment (very) equal to production-environment     Configuration change management works best if both aspects are\ncombined!  See  receipe  for this!", 
            "title": "Bots configuration change management"
        }, 
        {
            "location": "/DeploymentAcceptance/", 
            "text": "Isolated acceptance testing (bots>=3.0)\n\n\nThis is a 'mode' for testing which is \nisolated\n: \n\n\n\n\nno external communication: all\n    I/O is from/to file system \n\n\nsystem state does not change (eg no\n    increased counters, no test runs in system, etc) Idea is to run an\n    acceptance test without affecting your system (or the system of your\n    edi-partner). \n\n\n\n\nNote\n: all plugins since 20130101 are suited for\nisolated acceptances tests.\n\n\nAdvantages\n\n\n\n\nIsolated acceptance tests are 'repeatable' (because same counters\n    are used, same time is used etc). This is great for testing: each\n    run of a test gives the same results. This makes it easy to compared\n    the results automatically.\n\n\nBy using isolated acceptance tests your test-environment can be\n    equal to production-environment. So you can use standard directory\n    comparison tools to push changes test->production.\n\n\nAs the acceptance tests are isolated, this means an acceptance test\n    can be run in a production-environment without affecting this\n    environment. This way you can verify that after a change, all still\n    runs as before in your production environment.\n\n\n\n\nRunning isolated acceptance tests\n\n\n\n\nin all channels set 'testpath'. Testpath should point to a directory\n    with test-files.\n\n\nSet option 'runacceptancetest' in bots.ini to 'True'.\n\n\nRun 'new'\n\n\nCheck results of run with what you expect\n\n\nDelete runs/files from acceptance test (menu:Systasks->Bulk delete;\n    select \nonly\n 'Delete transactions in acceptance testing'.)\n\n\n\n\nAcceptance tests in plugins\n\n\nPlugins since 20130101 can be run as acceptance tests.\n\nAbout the plugins with build-in acceptance test:\n\n\n\n\n'testpath' for incoming files are in botssys\\infile\n\n\n'testpath' for outgoing files go to botssys\\outfile\n\n\neach plugin also contains the the expected outgoing files\n    (botssys\\infile\\outfile); these are used to compare the results.\n\n\nincluded is a route script\n    (bots/usersys/routescripts/bots_acceptancetest.py):\n\n\nbefore run: discard directory 'botssys\\outfile'.\n\n\nafter run: global run results are compared with expectation\n    (#in, #out. #errors, etc)\n\n\nafter run: compare files in botssys\\outfile with expected files\n    in botssys\\infile\\outfile\n\n\nthe output of these comparisons can be seen in terminal\n    ('dos-box')\n\n\n\n\n\n\n\n\nImplementation Details\n\n\nWhat bots does when running an isolated acceptance test:\n\n\n\n\nchannel-type is set to 'file'.\n\n\nchannel-path is set to the value in 'testpath'. if testpath is\n    empty: use path.\n\n\nchannel-remove is set to 'off': no deletion of incoming files.\n\n\nerror-email: not send.\n\n\nfixed date/time in envelopes and in mappings (if function\n    transform.strftime() is used)\n\n\ncounters/references: fixed; counters are not incremented\n\n\nincoming files are always read in same order.\n\n\noutgoing-filename options: date/time is fixed\n\n\nno archiving\n\n\nadditional user exits are run. User exits are in file\n    usersys/routescripts/botsacceptancetest.py :\n\n\nbefore run:: function pretest. use eg to empty out-directories\n    etc\n\n\nafter run: function post-test. This can be used to check\n    results, compare files etc\n     After running an isolated acceptance test, the\n    reports/filereports/data-files/etc generated during\n    acceptance-testing can be deleted via: menu:Systasks->Bulk\n    delete; select \nonly\n 'Delete transactions in acceptance\n    testing'.\n\n\n\n\n\n\n\n\nImplementation remarks:\n\n\n\n\n\n\nGUI does not have the results of post-test script (runs after\n    automaticmaintanance); view this in terminal/dos-box.\n\n\n\n\n\n\ncommunication scripts: script should check explicitly if in acceptance\n    test and act accordingly.\n\n\n\n\n\n\ndatabase communication: script should check explicitly if in acceptance\n    test and act accordingly.", 
            "title": "Isolated acceptance test"
        }, 
        {
            "location": "/DeploymentAcceptance/#isolated-acceptance-testing-bots6230", 
            "text": "This is a 'mode' for testing which is  isolated :    no external communication: all\n    I/O is from/to file system   system state does not change (eg no\n    increased counters, no test runs in system, etc) Idea is to run an\n    acceptance test without affecting your system (or the system of your\n    edi-partner).    Note : all plugins since 20130101 are suited for\nisolated acceptances tests.", 
            "title": "Isolated acceptance testing (bots>=3.0)"
        }, 
        {
            "location": "/DeploymentAcceptance/#advantages", 
            "text": "Isolated acceptance tests are 'repeatable' (because same counters\n    are used, same time is used etc). This is great for testing: each\n    run of a test gives the same results. This makes it easy to compared\n    the results automatically.  By using isolated acceptance tests your test-environment can be\n    equal to production-environment. So you can use standard directory\n    comparison tools to push changes test->production.  As the acceptance tests are isolated, this means an acceptance test\n    can be run in a production-environment without affecting this\n    environment. This way you can verify that after a change, all still\n    runs as before in your production environment.", 
            "title": "Advantages"
        }, 
        {
            "location": "/DeploymentAcceptance/#running-isolated-acceptance-tests", 
            "text": "in all channels set 'testpath'. Testpath should point to a directory\n    with test-files.  Set option 'runacceptancetest' in bots.ini to 'True'.  Run 'new'  Check results of run with what you expect  Delete runs/files from acceptance test (menu:Systasks->Bulk delete;\n    select  only  'Delete transactions in acceptance testing'.)", 
            "title": "Running isolated acceptance tests"
        }, 
        {
            "location": "/DeploymentAcceptance/#acceptance-tests-in-plugins", 
            "text": "Plugins since 20130101 can be run as acceptance tests. \nAbout the plugins with build-in acceptance test:   'testpath' for incoming files are in botssys\\infile  'testpath' for outgoing files go to botssys\\outfile  each plugin also contains the the expected outgoing files\n    (botssys\\infile\\outfile); these are used to compare the results.  included is a route script\n    (bots/usersys/routescripts/bots_acceptancetest.py):  before run: discard directory 'botssys\\outfile'.  after run: global run results are compared with expectation\n    (#in, #out. #errors, etc)  after run: compare files in botssys\\outfile with expected files\n    in botssys\\infile\\outfile  the output of these comparisons can be seen in terminal\n    ('dos-box')", 
            "title": "Acceptance tests in plugins"
        }, 
        {
            "location": "/DeploymentAcceptance/#implementation-details", 
            "text": "What bots does when running an isolated acceptance test:   channel-type is set to 'file'.  channel-path is set to the value in 'testpath'. if testpath is\n    empty: use path.  channel-remove is set to 'off': no deletion of incoming files.  error-email: not send.  fixed date/time in envelopes and in mappings (if function\n    transform.strftime() is used)  counters/references: fixed; counters are not incremented  incoming files are always read in same order.  outgoing-filename options: date/time is fixed  no archiving  additional user exits are run. User exits are in file\n    usersys/routescripts/botsacceptancetest.py :  before run:: function pretest. use eg to empty out-directories\n    etc  after run: function post-test. This can be used to check\n    results, compare files etc\n     After running an isolated acceptance test, the\n    reports/filereports/data-files/etc generated during\n    acceptance-testing can be deleted via: menu:Systasks->Bulk\n    delete; select  only  'Delete transactions in acceptance\n    testing'.     Implementation remarks:    GUI does not have the results of post-test script (runs after\n    automaticmaintanance); view this in terminal/dos-box.    communication scripts: script should check explicitly if in acceptance\n    test and act accordingly.    database communication: script should check explicitly if in acceptance\n    test and act accordingly.", 
            "title": "Implementation Details"
        }, 
        {
            "location": "/DeploymentAutopush/", 
            "text": "Recipe to push test->production (bots>=3.0)\n\n\nRecipe to use a standard \ndirectory comparison\ntool\n to manage the differences in\nconfiguration between test and production: \n\n\n\n\nFor both environments,\n    make configuration index file (menu->Systasks->Make configuration\n    index) \n\n\nCompare both environments using a \ndirectory comparison\n    tool\n. What you should compare\n    is: \n\n\nAll files in \nbots/usersys\n. \n\n\nNote that the file\n    \nbots/usersys/index.py\n contains the configuration as in the database\n    (routes, channels, partners). \n\n\n\n\n\n\nPush changes using such a directory comparison tool. \n\n\nAnd read configuration index file (menu->Systasks->Read configuration\n    index) to the database.\n\n\n\n\nDetails\n\n\n\n\n\n\nif the configuration index file is generated all configuration is in\n    usersys (routes, mappings, partners etc).\n\n\n\n\n\n\nBy using the 'isolated acceptance test' both environments can be 'very\n    equal'.\n\n\n\n\n\n\nThe configuration index file can also be generated by command line tool.\n    20130117: not read by command line tool.\n\n\n\n\n\n\nLook like it is possible to use a version control system. I have not\n    tried it, but recipes and experiences are welcome!", 
            "title": "Push test->production"
        }, 
        {
            "location": "/DeploymentAutopush/#recipe-to-push-test-62production-bots6230", 
            "text": "Recipe to use a standard  directory comparison\ntool  to manage the differences in\nconfiguration between test and production:    For both environments,\n    make configuration index file (menu->Systasks->Make configuration\n    index)   Compare both environments using a  directory comparison\n    tool . What you should compare\n    is:   All files in  bots/usersys .   Note that the file\n     bots/usersys/index.py  contains the configuration as in the database\n    (routes, channels, partners).     Push changes using such a directory comparison tool.   And read configuration index file (menu->Systasks->Read configuration\n    index) to the database.", 
            "title": "Recipe to push test->production (bots>=3.0)"
        }, 
        {
            "location": "/DeploymentAutopush/#details", 
            "text": "if the configuration index file is generated all configuration is in\n    usersys (routes, mappings, partners etc).    By using the 'isolated acceptance test' both environments can be 'very\n    equal'.    The configuration index file can also be generated by command line tool.\n    20130117: not read by command line tool.    Look like it is possible to use a version control system. I have not\n    tried it, but recipes and experiences are welcome!", 
            "title": "Details"
        }, 
        {
            "location": "/DeploymentTestSet/", 
            "text": "Build a good test-set\n\n\nWhen you do changes in your edi environment, you want to know that every \n'ran as before'. What can be helpful for this is to use a \n\nisolated acceptance test\n for this.\n\n\nThis is easy to demonstrate:\n\n\n\n\nDownload a plugin from \nbots sourceforge\n    site\n and\n    install it (not on your production environment;-))\n\n\nIn \nconfig/bots.ini\n set 'runacceptancetest' to True\n\n\nRun bots-engine via command-line\n\n\n\n\nHow this works: in acceptance tests an extra script\n\nusersys/routescripts/bots_acceptancetest.py\n runs when all routes are\nfinished. This script does 2 things:\n\n\n\n\nIt compares the results (#files received, errors, send, etc) with\n    the expected results. If results are different you'll see this (on\n    command-line window).\n\n\nThe files in \nbotssys/infile/outfile\n are compared with files as\n    generated by the run in \nbotssys/outfile\n. If results are different\n    you'll see this (on command-line window).\n\n\n\n\nSome things to look at when you build a test-set:\n\n\n\n\n\n\nUse the 'acceptance test path' in the channels to point to your file\n    system for incoming and outgoing channels (prevents using communication\n    methods like pop3, ftp, etc).\n\n\n\n\n\n\nTest file in \nbotssys/infile\n are added to plugins (I find this very\n    convenient).\n\n\n\n\n\n\nCounters (for message numbers, file names etc (via unique()) are the\n    same in every run, so results are the same every run.\\\n\n\n\n\n\n\nIf date/times need to made, use transform.strftime() for this; it is\n    like pythons time.strftime() but gives always the same date/time in\n    acceptance testing.", 
            "title": "Build test-set"
        }, 
        {
            "location": "/DeploymentTestSet/#build-a-good-test-set", 
            "text": "When you do changes in your edi environment, you want to know that every \n'ran as before'. What can be helpful for this is to use a  isolated acceptance test  for this.  This is easy to demonstrate:   Download a plugin from  bots sourceforge\n    site  and\n    install it (not on your production environment;-))  In  config/bots.ini  set 'runacceptancetest' to True  Run bots-engine via command-line   How this works: in acceptance tests an extra script usersys/routescripts/bots_acceptancetest.py  runs when all routes are\nfinished. This script does 2 things:   It compares the results (#files received, errors, send, etc) with\n    the expected results. If results are different you'll see this (on\n    command-line window).  The files in  botssys/infile/outfile  are compared with files as\n    generated by the run in  botssys/outfile . If results are different\n    you'll see this (on command-line window).   Some things to look at when you build a test-set:    Use the 'acceptance test path' in the channels to point to your file\n    system for incoming and outgoing channels (prevents using communication\n    methods like pop3, ftp, etc).    Test file in  botssys/infile  are added to plugins (I find this very\n    convenient).    Counters (for message numbers, file names etc (via unique()) are the\n    same in every run, so results are the same every run.\\    If date/times need to made, use transform.strftime() for this; it is\n    like pythons time.strftime() but gives always the same date/time in\n    acceptance testing.", 
            "title": "Build a good test-set"
        }, 
        {
            "location": "/Performance/", 
            "text": "Performance\n\n\n\n\nMost edi files are just a few kilobyes. An edi file of 5Mb is\n    very large (edifact, x12). If you encounter larger ones: please let me\n    know. \n\n\nAFAIK there are no issues with performance. If you run into\n    this: please inform me eg via mailing list.\n\n\n\n\nMore performance\n\n\n\n\n(Bots >= 2.2.0) Cdecimals (Extern library) speeds up bots. This\n    library will be included in python 3.3, but can be installed in\n    earlier python versions. See\n    \nwebsite\n\n\n(bots >= 3.1) Do not use get_checklevel=2 in config/bots.ini. This\n    does extended checking of mpath's, use this during development\n    only.\n\n\n(bots >= 3.0) Schedule bots-engine via the \njob queue\n    server\n.\n\n\nFor xml: check if the c-version of python's elementtree is installed\n    and used.\n\n\nEnough memory is important for performance: disk-memory swapping is\n    slow! Actual memory usage depends on size of edi-files.\n\n\nCheck mappings for slow/inefficient algorithms.\n\n\nBots works with [www.pypy.org pypy], see below on this page.\n\n\nUse SSD for faster reading/writing. In config/bots.ini the\n    botssys-directory can be set, in config/settings.py the place of the\n    SQLite-database.\n\n\n\n\nStrategy for bigger edi volumes\n\n\n\n\nBest strategy is to \nschedule\n bots-engine more\n    often.\n\n\n(bots >= 3.0) Schedule bots-engine via the \njob queue\n    server\n.\n\n\nRoutes can be \nscheduled\n    independently\n.\n\n\n\n\nSet-up good scheduling, keeping volumes in mind.\n\n\n\n\nedi in the real world has often large peaks.\n\n\nsome edi transactions are time critical (eg orders), others not\n    so much (eg invoices)\n\n\ncheck where the large volumes are (size and number of\n    edi-transactions)\n\n\nlook at the sending pattern of your customers. Often edi is send\n    in night jobs, so you might receive lot of volume early in the\n    morning.\n\n\ncheck where you send large volumes. Send this at a time that\n    does not interfere with other flows.\n\n\n\n\n\n\n\n\nIncoming volumes can be limited per run. This way the time\n    bots-engine runs is predictable. The max time a channel fetches\n    incoming files is a parameter for each channel. Note: this is\n    dependent upon the communication type used; eg file system I/O is\n    much faster than SFTP. Files \"left behind\" will be fetched on\n    subsequent runs.\n\n\n\n\n(Bots >= 3.0) Limit for max file-size (set in bots.ini). If an\n    incoming file is larger, bots will give error. This is to prevent\n    'accidents'.\n\n\n\n\nPerformance/throughput testing\n\n\n\n\nTests are done using file system I/O (no testing of communication\n    performance).\n\n\nTests done in one run of bots-engine.\n\n\nTest system: Intel Q9400 2.66GHz; 4Gb memory; ubuntu 10.04(lucid);\n    python 2.7; default SQLite database.\n\n\nPlease note that these tests are 'artificial': if you have such high\n    volumes and big files look at good scheduling!\n\n\ntest are with edifact; x12 performance is the same.\n\n\n\n\n\n  \n\n    \n \n\n    \n \n\n    \n \n\n    \n \n\n    \n \nbots2.0\n \n\n    \n \n\n    \n \nbots2.2\n \n\n    \n \n(cdecimal)\n\n    \n \nbots3.2\n \n\n    \n \n\n  \n\n  \n\n    \n\n      \n \ndescription\n \n\n      \n \n#file\n \n\n      \n \nvol\n \n\n      \n \n#mess.\n \n\n      \n \ntime\n \n\n      \n \n\n      \n \ntime\n \n\n      \n \n\n      \n \ntime\n \n\n      \n \n\n    \n\n    \n\n      \n01 edifact2fixed\n\n      \n32 \n\n      \n305Mb \n\n      \n32\n\n      \n1:01:39 \n\n      \n82 kb/s\n\n      \n0:50:57 \n\n      \n 100 kb/s \n\n      \n0:44:01 \n\n      \n 115 kb/s\n\n    \n\n    \n\n      \n02 edifact2fixed\n\n      \n116\n\n      \n300Mb\n\n      \n116\n\n      \n1:14:18 \n\n      \n68 kb/s\n\n      \n0:36:20 \n\n      \n137 kb/s \n\n      \n0:37:25 \n\n      \n 133 kb/s\n\n    \n\n    \n\n      \n03 edifact2fixed\n\n      \n94048\n\n      \n295Mb\n\n      \n141072\n\n      \n0:47:21 \n\n      \n104 kb/s \n\n      \n0:39:54 \n\n      \n125 kb/s \n\n      \n0:42:30 \n\n      \n 115 kb/s\n\n    \n\n    \n\n      \n04 fixed2edifact\n\n      \n14244\n\n      \n300Mb\n\n      \n78342\n\n      \n1:04:11 \n\n      \n78 kb/s\n\n      \n0:33:21 \n\n      \n150 kb/s \n\n      \n0:32:40 \n\n      \n 153 kb/s\n\n    \n\n    \n\n      \n05 xml2edifact\n\n      \n17424\n\n      \n300Mb\n\n      \n17424\n\n      \n0:41:24 \n\n      \n121 kb/s \n\n      \n0:35:48 \n\n      \n139 kb/s \n\n      \n0:35:20 \n\n      \n 141 kb/s\n\n    \n\n    \n\n      \n06 edifact2xml(1to1)\n\n      \n14609\n\n      \n300Mb\n\n      \n74919\n\n      \n1:23:03 \n\n      \n60 kb/s \n\n      \n0:58:19 \n\n      \n85 kb/s \n\n      \n0:44:38 \n\n      \n 112 kb/s \n\n    \n\n  \n\n\n\n\n\nConclusions of performance measurements\n\n\n\n\nMemory usage is stable (no leakage).\n\n\nMemory usage is directly related to the size of the edi-files. In\n    test 01 (edifact files of 9.5Mb) bots-engine uses 1.5Gb memory.\n\n\nTested with edifact files of 120Mb; memory usage is stable at\n    4.5Gb.\n\n\nPerformance is reasonably independent from the size of\n    edi-files/messages.\n\n\nan edifact file of 9.5Mb takes about 85sec to be processed.\n\n\nfor outgoing edi files: writing to one file or multiple file does\n    not significantly affect performance.\n\n\n\n\nTesting with pypy\n\n\npypy\n is a python implementation that is faster by using a\nJIT (that is one of their achievements...).\n\nResults of the first tests with pypy (beta-versions of pypy 2.0): \n\n\n\n\nBots works with pypy.\n\n\nComparing some stress tests: much faster, 2-3 times faster.\n\n\nDid not run all test-sets. Probably I will do that with definitive\n    version of pypy 2.0 and/or release of bots 3.1.\n\n\nProblem might be that not all libraries/dependencies work with pypy.\n\n\nSQLite3 database connector: OK\n\n\nMySQL database connector: version 1.2.5 does. Note that bots 3.1.0 gave\n    am error with this version, a patch was easy.\n\n\nparamiko (for SFTP/SSH): no, dependency pycrypto is not supported.\n    This looks like a very interesting development!", 
            "title": "Performance/big volumes"
        }, 
        {
            "location": "/Performance/#performance", 
            "text": "Most edi files are just a few kilobyes. An edi file of 5Mb is\n    very large (edifact, x12). If you encounter larger ones: please let me\n    know.   AFAIK there are no issues with performance. If you run into\n    this: please inform me eg via mailing list.", 
            "title": "Performance"
        }, 
        {
            "location": "/Performance/#more-performance", 
            "text": "(Bots >= 2.2.0) Cdecimals (Extern library) speeds up bots. This\n    library will be included in python 3.3, but can be installed in\n    earlier python versions. See\n     website  (bots >= 3.1) Do not use get_checklevel=2 in config/bots.ini. This\n    does extended checking of mpath's, use this during development\n    only.  (bots >= 3.0) Schedule bots-engine via the  job queue\n    server .  For xml: check if the c-version of python's elementtree is installed\n    and used.  Enough memory is important for performance: disk-memory swapping is\n    slow! Actual memory usage depends on size of edi-files.  Check mappings for slow/inefficient algorithms.  Bots works with [www.pypy.org pypy], see below on this page.  Use SSD for faster reading/writing. In config/bots.ini the\n    botssys-directory can be set, in config/settings.py the place of the\n    SQLite-database.", 
            "title": "More performance"
        }, 
        {
            "location": "/Performance/#strategy-for-bigger-edi-volumes", 
            "text": "Best strategy is to  schedule  bots-engine more\n    often.  (bots >= 3.0) Schedule bots-engine via the  job queue\n    server .  Routes can be  scheduled\n    independently .   Set-up good scheduling, keeping volumes in mind.   edi in the real world has often large peaks.  some edi transactions are time critical (eg orders), others not\n    so much (eg invoices)  check where the large volumes are (size and number of\n    edi-transactions)  look at the sending pattern of your customers. Often edi is send\n    in night jobs, so you might receive lot of volume early in the\n    morning.  check where you send large volumes. Send this at a time that\n    does not interfere with other flows.     Incoming volumes can be limited per run. This way the time\n    bots-engine runs is predictable. The max time a channel fetches\n    incoming files is a parameter for each channel. Note: this is\n    dependent upon the communication type used; eg file system I/O is\n    much faster than SFTP. Files \"left behind\" will be fetched on\n    subsequent runs.   (Bots >= 3.0) Limit for max file-size (set in bots.ini). If an\n    incoming file is larger, bots will give error. This is to prevent\n    'accidents'.", 
            "title": "Strategy for bigger edi volumes"
        }, 
        {
            "location": "/Performance/#performancethroughput-testing", 
            "text": "Tests are done using file system I/O (no testing of communication\n    performance).  Tests done in one run of bots-engine.  Test system: Intel Q9400 2.66GHz; 4Gb memory; ubuntu 10.04(lucid);\n    python 2.7; default SQLite database.  Please note that these tests are 'artificial': if you have such high\n    volumes and big files look at good scheduling!  test are with edifact; x12 performance is the same.   \n   \n       \n       \n       \n       \n       bots2.0   \n       \n       bots2.2   \n       (cdecimal) \n       bots3.2   \n       \n   \n   \n     \n         description   \n         #file   \n         vol   \n         #mess.   \n         time   \n         \n         time   \n         \n         time   \n         \n     \n     \n       01 edifact2fixed \n       32  \n       305Mb  \n       32 \n       1:01:39  \n       82 kb/s \n       0:50:57  \n        100 kb/s  \n       0:44:01  \n        115 kb/s \n     \n     \n       02 edifact2fixed \n       116 \n       300Mb \n       116 \n       1:14:18  \n       68 kb/s \n       0:36:20  \n       137 kb/s  \n       0:37:25  \n        133 kb/s \n     \n     \n       03 edifact2fixed \n       94048 \n       295Mb \n       141072 \n       0:47:21  \n       104 kb/s  \n       0:39:54  \n       125 kb/s  \n       0:42:30  \n        115 kb/s \n     \n     \n       04 fixed2edifact \n       14244 \n       300Mb \n       78342 \n       1:04:11  \n       78 kb/s \n       0:33:21  \n       150 kb/s  \n       0:32:40  \n        153 kb/s \n     \n     \n       05 xml2edifact \n       17424 \n       300Mb \n       17424 \n       0:41:24  \n       121 kb/s  \n       0:35:48  \n       139 kb/s  \n       0:35:20  \n        141 kb/s \n     \n     \n       06 edifact2xml(1to1) \n       14609 \n       300Mb \n       74919 \n       1:23:03  \n       60 kb/s  \n       0:58:19  \n       85 kb/s  \n       0:44:38  \n        112 kb/s  \n     \n     Conclusions of performance measurements   Memory usage is stable (no leakage).  Memory usage is directly related to the size of the edi-files. In\n    test 01 (edifact files of 9.5Mb) bots-engine uses 1.5Gb memory.  Tested with edifact files of 120Mb; memory usage is stable at\n    4.5Gb.  Performance is reasonably independent from the size of\n    edi-files/messages.  an edifact file of 9.5Mb takes about 85sec to be processed.  for outgoing edi files: writing to one file or multiple file does\n    not significantly affect performance.", 
            "title": "Performance/throughput testing"
        }, 
        {
            "location": "/Performance/#testing-with-pypy", 
            "text": "pypy  is a python implementation that is faster by using a\nJIT (that is one of their achievements...). \nResults of the first tests with pypy (beta-versions of pypy 2.0):    Bots works with pypy.  Comparing some stress tests: much faster, 2-3 times faster.  Did not run all test-sets. Probably I will do that with definitive\n    version of pypy 2.0 and/or release of bots 3.1.  Problem might be that not all libraries/dependencies work with pypy.  SQLite3 database connector: OK  MySQL database connector: version 1.2.5 does. Note that bots 3.1.0 gave\n    am error with this version, a patch was easy.  paramiko (for SFTP/SSH): no, dependency pycrypto is not supported.\n    This looks like a very interesting development!", 
            "title": "Testing with pypy"
        }, 
        {
            "location": "/Troubleshooting/", 
            "text": "Troubleshooting FAQ\n\n\nAnswers to common problems in bots...\"traps for new players\". See also: \n-   \nInstallation FAQ\n \n-   \nGet Bots Running FAQ\n\n\nFiles get \"stuck\"\n\n\nBackground\n:\n\nBasically bots expects input to lead to output. When a file is 'stuck'\ninput did not lead to output.\n\n\nAnswer\n:\n\nSomehow the setup you made is not OK. Files go in, but nothing comes\nout.\n\nOften this is the problem: Have you put any\n\nfiltering\n on the output of your route? (under\n'Filtering for outchannel' in the route configuration).\n\nFiltering allows you send only particular files via an out-channel; but\na file that does not match one of the filters will end up \"stuck\"\nbecause Bots does not know where to send it. If you have only one\noutchannel, there is no need for filtering.\n\n\nIncoming edi-files are read over and over again\n\n\nAnswer:\n\nIn the in-channel, there is a 'remove'-option. Turn it on to\nhave incoming files removed after reading. (it is more normal to have\nthis on, but turning it off is handy in development).\n\n\nOutgoing files to sftp server result in \"IOError: \n[\nErrno 13\n]\n\nRequested operation is not supported.\"\n\n\nAnswer:\n\nIt appears that some sftp severs do not support append mode\n(bots default mode). In this case include {overwrite} in the channel\nfilename specification to force write mode. See\n\nhere\n\nfor output filename formatting.\n\n\nIncoming files can be seen but are not picked up by Bots\n(particularly with unc paths)\n\n\nAnswer:\n\nThis is usually a permission problem. Remember that if you\nare running Bots Engine as a daemon/service it may be running under a\nsystem user account. Make sure the user has rights to the folder/files,\nor run the engine with a special user account that does have the\nrequired rights. It is best to use the \nJobqueue\n so that\nengine runs started from the GUI also run under the special user\naccount.\n\n\nError in Internet Explorer: ValueError: invalid literal for int()\nwith base 10\n\n\nAnswer:\n\nThis has to do with the compatibility-settings of IE\n(tools->compatibility view settings). Text from Microsoft: Websites\nthat were designed for earlier versions of Internet Explorer might not\ndisplay correctly in IE8, IE9, or IE10. When you turn on Compatibility\nView, the webpage you're viewing, as well as any other webpages within\nthe website's domain, will be displayed as if you were using an earlier\nversion of Internet Explorer.\n\nSo: if the compatibility view is used this error occurs, else it goes\nOK.\n\nSolution: do not use the compatibility view in IE, or use another\nbrowser.  \n\n\nError in Internet Explorer: DoesNotExist: report matching query does\nnot exist.\n\n\nAnswer:\n\nSame problem as last question:\n\nThis has to do with the compatibility-settings of IE\n(tools->compatibility view settings). Text from Microsoft: Websites\nthat were designed for earlier versions of Internet Explorer might not\ndisplay correctly in IE8, IE9, or IE10. When you turn on Compatibility\nView, the webpage you're viewing, as well as any other webpages within\nthe website's domain, will be displayed as if you were using an earlier\nversion of Internet Explorer.\n\nSo: if the compatibility view is used this error occurs, else it goes\nOK.\n\nSolution: do not use the compatibility view in IE, or use another\nbrowser.  \n\n\n\"root\" of incoming message is empty; either split messages or use\ninn.getloop\n\n\nAnswer:\n\nThis may occur with incoming files that have only one record\nformat. Even if the whole file is one edi message, you need to use\n\nnextmessageblock\n\nin your incoming grammar.  \n\n\nerror_perm: 502 Command not implemented.\n\n\nAnswer1:\n\nSome FTP-servers do no support 'APPE' command (only\n'STOR').\n\nIn filename use: {overwrite}\n\nEg:  \n\n\n\n\nOUT_{messagetype}_{datetime:%Y%m%d%H%M%S}_*{overwrite}.edi\n \n\n\n\n\nNote:\nthis {overwrite} thing only takes care of using STOR instead of APPE.\nMake sure filename is unique (use \n*\n !).\n\n\nAnswer2:\n\nError occurs in communication via FTP. In channel, set the\n'FTP active mode' (under FTP specfic).\n\n\nftp server gives a timeout when writing file (connect is OK)\n\n\nAnswer1:\n\nIn channel, set the 'FTP active mode' (under FTP specfic).", 
            "title": "Troubleshooting FAQ"
        }, 
        {
            "location": "/Troubleshooting/#troubleshooting-faq", 
            "text": "Answers to common problems in bots...\"traps for new players\". See also: \n-    Installation FAQ  \n-    Get Bots Running FAQ  Files get \"stuck\"  Background : \nBasically bots expects input to lead to output. When a file is 'stuck'\ninput did not lead to output.  Answer : \nSomehow the setup you made is not OK. Files go in, but nothing comes\nout. \nOften this is the problem: Have you put any filtering  on the output of your route? (under\n'Filtering for outchannel' in the route configuration). \nFiltering allows you send only particular files via an out-channel; but\na file that does not match one of the filters will end up \"stuck\"\nbecause Bots does not know where to send it. If you have only one\noutchannel, there is no need for filtering.  Incoming edi-files are read over and over again  Answer: \nIn the in-channel, there is a 'remove'-option. Turn it on to\nhave incoming files removed after reading. (it is more normal to have\nthis on, but turning it off is handy in development).  Outgoing files to sftp server result in \"IOError:  [ Errno 13 ] \nRequested operation is not supported.\"  Answer: \nIt appears that some sftp severs do not support append mode\n(bots default mode). In this case include {overwrite} in the channel\nfilename specification to force write mode. See here \nfor output filename formatting.  Incoming files can be seen but are not picked up by Bots\n(particularly with unc paths)  Answer: \nThis is usually a permission problem. Remember that if you\nare running Bots Engine as a daemon/service it may be running under a\nsystem user account. Make sure the user has rights to the folder/files,\nor run the engine with a special user account that does have the\nrequired rights. It is best to use the  Jobqueue  so that\nengine runs started from the GUI also run under the special user\naccount.  Error in Internet Explorer: ValueError: invalid literal for int()\nwith base 10  Answer: \nThis has to do with the compatibility-settings of IE\n(tools->compatibility view settings). Text from Microsoft: Websites\nthat were designed for earlier versions of Internet Explorer might not\ndisplay correctly in IE8, IE9, or IE10. When you turn on Compatibility\nView, the webpage you're viewing, as well as any other webpages within\nthe website's domain, will be displayed as if you were using an earlier\nversion of Internet Explorer. \nSo: if the compatibility view is used this error occurs, else it goes\nOK. \nSolution: do not use the compatibility view in IE, or use another\nbrowser.    Error in Internet Explorer: DoesNotExist: report matching query does\nnot exist.  Answer: \nSame problem as last question: \nThis has to do with the compatibility-settings of IE\n(tools->compatibility view settings). Text from Microsoft: Websites\nthat were designed for earlier versions of Internet Explorer might not\ndisplay correctly in IE8, IE9, or IE10. When you turn on Compatibility\nView, the webpage you're viewing, as well as any other webpages within\nthe website's domain, will be displayed as if you were using an earlier\nversion of Internet Explorer. \nSo: if the compatibility view is used this error occurs, else it goes\nOK. \nSolution: do not use the compatibility view in IE, or use another\nbrowser.    \"root\" of incoming message is empty; either split messages or use\ninn.getloop  Answer: \nThis may occur with incoming files that have only one record\nformat. Even if the whole file is one edi message, you need to use nextmessageblock \nin your incoming grammar.    error_perm: 502 Command not implemented.  Answer1: \nSome FTP-servers do no support 'APPE' command (only\n'STOR'). \nIn filename use: {overwrite} \nEg:     OUT_{messagetype}_{datetime:%Y%m%d%H%M%S}_*{overwrite}.edi     Note:\nthis {overwrite} thing only takes care of using STOR instead of APPE.\nMake sure filename is unique (use  *  !).  Answer2: \nError occurs in communication via FTP. In channel, set the\n'FTP active mode' (under FTP specfic).  ftp server gives a timeout when writing file (connect is OK)  Answer1: \nIn channel, set the 'FTP active mode' (under FTP specfic).", 
            "title": "Troubleshooting FAQ"
        }, 
        {
            "location": "/OverviewIntroduction/", 
            "text": "Overview\n\n\nPurpose of the chapter of this wiki is to give some global overview for bots open source edi translator.\n\n\nAn overview of features is on \nsourceforge\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/OverviewIntroduction/#overview", 
            "text": "Purpose of the chapter of this wiki is to give some global overview for bots open source edi translator.  An overview of features is on  sourceforge .", 
            "title": "Overview"
        }, 
        {
            "location": "/BotsName/", 
            "text": "Where did the name \"Bots\" come from?\n\n\nEDI is about cooperation in the supply chain (collaboration, tying together, etc). That is true, but on the other hand it is also a clash of cultures. In Dutch 'bots' is like 'crash'\n\n\n'bots'  is also the nickname my grandfather-in-law used for my girlfriend.\nit was not clear where that name came from, probably that was how she pronouced her name (betsy) when she learned to talk.\n\n\nIn Dutch 'bots' is singular.\n\n\nbut...its just a name.\n\n\nkind regards,\nhenk-jan", 
            "title": "The name \"Bots\""
        }, 
        {
            "location": "/BotsName/#where-did-the-name-bots-come-from", 
            "text": "EDI is about cooperation in the supply chain (collaboration, tying together, etc). That is true, but on the other hand it is also a clash of cultures. In Dutch 'bots' is like 'crash'  'bots'  is also the nickname my grandfather-in-law used for my girlfriend.\nit was not clear where that name came from, probably that was how she pronouced her name (betsy) when she learned to talk.  In Dutch 'bots' is singular.  but...its just a name.  kind regards,\nhenk-jan", 
            "title": "Where did the name \"Bots\" come from?"
        }, 
        {
            "location": "/OverviewDetail/", 
            "text": "Technical overview of bots open source edi translator", 
            "title": "Technical overview"
        }, 
        {
            "location": "/OverviewDetail/#technical-overview-of-bots-open-source-edi-translator", 
            "text": "", 
            "title": "Technical overview of bots open source edi translator"
        }, 
        {
            "location": "/OverviewDirectoryLayout/", 
            "text": "Bots directories, executables and files\n\n\nWhere can I find bots on my system?\n\n\n\n\nWindows (depends upon python version used): \n\n\neg. \nC:\\python27\\Lib\\site-packages\\bots\n    \n\n\n\n\n\n\nLinux, Unix:\n\n\n/usr/lib/python2.7/site-packages/bots\n \n\n\n/usr/local/lib/python2.7/dist-packages/bots\n (Debian, Ubuntu) Note:\n    in the main screen (home) of bots-monitor (GUI) you can see where the\n    bots-directories are.\n\n\n\n\n\n\n\n\nWhere are the programs/executable scripts?\n\n\n\n\nWhere installed \n\n\nWindows (depends upon python version used):\n    \nC:\\python27\\Scripts\n \n\n\nLinux, Unix eg in \n/usr/bin/\n or \n/usr/local/bin/\n \n\n\n\n\nOverview of executables: \n\n\n\n\nbots-webserver.py - serves the html-pages for the bots-monitor. \n\n\nbots-engine.py - does the actual edi communication and translation. \n\n\nbots-jobqueueserver.py - the jobqueue-server maintains a queue with (job-engine) jobs and fires\n    these asap. \n\n\nbots-job2queue.py - to send jobs to the jobqueueserver \n\n\nbots-dirmonitor.py - monitors/watches directoriess; if a file is placed\n    in a directory, bots-engine stats (via jobqueueserver) \n\n\nbots-grammarcheck.py - utility to check a grammar.\n\n\nbots-xml2botsgrammar.py - utility to generate an xml-grammar from an xml\n    file. \n\n\nbots-updatedb.py - for version migrations: updates the $database\n    to new definition/schema \n\n\nbots-plugoutindex.py - for version control\n    systems: generate a file with the configuration (routes, channels, etc).\n    (configuration as in the database). \n\n\n\n\nNote: for the usage instructions of the executables use 'help', eg:  \n\n\nbots-engine.py --help \n\n\n\n\nWhere are the edi files?\n\n\n\n\nIncoming and outgoing\n\n\nSet this per channel, using 'path' and 'filename'.\n\n\nRelative path is relative to bots directory, absolute paths are\n    OK.\n\n\nIn the plugins the edi-files are in \nbots/botssys/infile\n\n\n\n\n\n\nThe archive/backup.\n\n\neach communication channel of bots CAN archive the incoming or\n    outgoing edi messages.\n\n\nSet this per channel, using 'archivepath'.\n\n\nThe place of the archive can be 'anywhere'. We mostly use\n    botssys/archive.\n\n\nRelative path is relative to bots directory, absolute paths are\n    OK.\n\n\n\n\n\n\nInternal storage of edi data.\n\n\nin subdirectories of bots/botssys/data.\n\n\nthis is where the edi files are fetched from by the bots-monitor\n    (the 'filer' module).\n\n\n\n\n\n\nCleanup of old files\\\n\n\nbots manages cleanup of archive and internal storage, based on\n    configuration settings for number of days to keep.\n\n\nIncoming files are (usually, unless testing) removed by the\n    channel setting \"remove\".\n\n\nOutgoing files are never removed by bots\n\n\n\n\n\n\n\n\nThe directory structure within bots directory\n\n\n\n\nbots\n: source code (\n*\n.py, \n*\n.pyc, \n*\n.pyo)\n\n\nbots/botssys\n: data file, database, etc\n\n\nbots/botssys\n: when installing a plugin bots makes a backup of\n    configuration here.\n\n\nbots/botssys/data\n: internal storage of edi data.\n\n\nbots/botssys/sqlitedb\n: database file(s) of SQLite.\n\n\nbots/botssys/logging\n: log file(s) for each run of bots-engine.\n\n\nbots/botssys/infile\n: plugins place here example edi data\n\n\nbots/botssys/outfile\n: plugins place here translated edi data\n\n\n\n\n\n\nbots/config\n: \nconfiguration files\n. See\n    also \nmultiple environments\n.\n\n\nbots/install\n: contains an empty sqlite database and default\n    configuration files.\n\n\nbots/installwin\n: (windows) python libraries used during installation.\n\n\nbots/locale\n: translation/internationalisation files for use of another\n    language.\n\n\nbots/media\n: static data for bots-webserver (CSS, html, images,\n    JavaScript)\n\n\nbots/sql\n: sql files for initialising a new database.\n\n\nbots/templates\n: templates for bots-webserver\n\n\nbots/templatetags\n: custom template-tags for use in django.\n\n\nbots/usersys\n: \nuser scripts\n.\n\n\nbots/usersys/charsets\n: e.g. edifact uses its own character-sets.\n\n\nbots/usersys/communicationscripts\n: user scripts for communication\n    (inchannel, outchannel).\n\n\nbots/usersys/envelopescripts\n: user scripts for enveloping.\n\n\nbots/usersys/grammars\n: grammars of edi-messages; directories per\n    editype (x12, edifact, tradacoms, etc).\n\n\nbots/usersys/mappings\n: mappings scripts; directories per editype\n    (incoming).\n\n\nbots/usersys/partners\n: partner specific syntax for outgoing messages;\n    directories per editype.\n\n\nbots/usersys/routescripts\n: user scripts for running (part of) route.\n\n\nbots/usersys/codeconversions\n: for conversions of codes (deprecated).\n\n\nbots/usersys/dbconnectors\n: user scripts for communication from/to\n    database (old database connector, deprecated).", 
            "title": "Directories and files"
        }, 
        {
            "location": "/OverviewDirectoryLayout/#bots-directories-executables-and-files", 
            "text": "", 
            "title": "Bots directories, executables and files"
        }, 
        {
            "location": "/OverviewDirectoryLayout/#where-can-i-find-bots-on-my-system", 
            "text": "Windows (depends upon python version used):   eg.  C:\\python27\\Lib\\site-packages\\bots         Linux, Unix:  /usr/lib/python2.7/site-packages/bots    /usr/local/lib/python2.7/dist-packages/bots  (Debian, Ubuntu) Note:\n    in the main screen (home) of bots-monitor (GUI) you can see where the\n    bots-directories are.", 
            "title": "Where can I find bots on my system?"
        }, 
        {
            "location": "/OverviewDirectoryLayout/#where-are-the-programsexecutable-scripts", 
            "text": "Where installed   Windows (depends upon python version used):\n     C:\\python27\\Scripts    Linux, Unix eg in  /usr/bin/  or  /usr/local/bin/     Overview of executables:    bots-webserver.py - serves the html-pages for the bots-monitor.   bots-engine.py - does the actual edi communication and translation.   bots-jobqueueserver.py - the jobqueue-server maintains a queue with (job-engine) jobs and fires\n    these asap.   bots-job2queue.py - to send jobs to the jobqueueserver   bots-dirmonitor.py - monitors/watches directoriess; if a file is placed\n    in a directory, bots-engine stats (via jobqueueserver)   bots-grammarcheck.py - utility to check a grammar.  bots-xml2botsgrammar.py - utility to generate an xml-grammar from an xml\n    file.   bots-updatedb.py - for version migrations: updates the $database\n    to new definition/schema   bots-plugoutindex.py - for version control\n    systems: generate a file with the configuration (routes, channels, etc).\n    (configuration as in the database).    Note: for the usage instructions of the executables use 'help', eg:    bots-engine.py --help", 
            "title": "Where are the programs/executable scripts?"
        }, 
        {
            "location": "/OverviewDirectoryLayout/#where-are-the-edi-files", 
            "text": "Incoming and outgoing  Set this per channel, using 'path' and 'filename'.  Relative path is relative to bots directory, absolute paths are\n    OK.  In the plugins the edi-files are in  bots/botssys/infile    The archive/backup.  each communication channel of bots CAN archive the incoming or\n    outgoing edi messages.  Set this per channel, using 'archivepath'.  The place of the archive can be 'anywhere'. We mostly use\n    botssys/archive.  Relative path is relative to bots directory, absolute paths are\n    OK.    Internal storage of edi data.  in subdirectories of bots/botssys/data.  this is where the edi files are fetched from by the bots-monitor\n    (the 'filer' module).    Cleanup of old files\\  bots manages cleanup of archive and internal storage, based on\n    configuration settings for number of days to keep.  Incoming files are (usually, unless testing) removed by the\n    channel setting \"remove\".  Outgoing files are never removed by bots", 
            "title": "Where are the edi files?"
        }, 
        {
            "location": "/OverviewDirectoryLayout/#the-directory-structure-within-bots-directory", 
            "text": "bots : source code ( * .py,  * .pyc,  * .pyo)  bots/botssys : data file, database, etc  bots/botssys : when installing a plugin bots makes a backup of\n    configuration here.  bots/botssys/data : internal storage of edi data.  bots/botssys/sqlitedb : database file(s) of SQLite.  bots/botssys/logging : log file(s) for each run of bots-engine.  bots/botssys/infile : plugins place here example edi data  bots/botssys/outfile : plugins place here translated edi data    bots/config :  configuration files . See\n    also  multiple environments .  bots/install : contains an empty sqlite database and default\n    configuration files.  bots/installwin : (windows) python libraries used during installation.  bots/locale : translation/internationalisation files for use of another\n    language.  bots/media : static data for bots-webserver (CSS, html, images,\n    JavaScript)  bots/sql : sql files for initialising a new database.  bots/templates : templates for bots-webserver  bots/templatetags : custom template-tags for use in django.  bots/usersys :  user scripts .  bots/usersys/charsets : e.g. edifact uses its own character-sets.  bots/usersys/communicationscripts : user scripts for communication\n    (inchannel, outchannel).  bots/usersys/envelopescripts : user scripts for enveloping.  bots/usersys/grammars : grammars of edi-messages; directories per\n    editype (x12, edifact, tradacoms, etc).  bots/usersys/mappings : mappings scripts; directories per editype\n    (incoming).  bots/usersys/partners : partner specific syntax for outgoing messages;\n    directories per editype.  bots/usersys/routescripts : user scripts for running (part of) route.  bots/usersys/codeconversions : for conversions of codes (deprecated).  bots/usersys/dbconnectors : user scripts for communication from/to\n    database (old database connector, deprecated).", 
            "title": "The directory structure within bots directory"
        }, 
        {
            "location": "/StartConfigurationFiles/", 
            "text": "Configuration Files\n\n\nBots has two configuration files.\n\nMostly the defaults will be OK to get started, but you may need to\ncustomize these to your own needs.\n\nSettings are documented in the files.\n\nOpen these files in your \ntext editor\n.\n\n\nThe configuration files are located in the \nbots/config\n directory\n(except when using \nmultiple\nenvironments\n.\n\n The original default versions can be found in the \nbots/install\n\ndirectory.\n\n\nbots.ini\n\n\n\n\nHow long to keep edi files and their registration\n\n\nSome GUI customisation settings\n\n\nTimeouts and time limits\n\n\nLogging options\n\n\nDebugging options\n\n\nWebserver settings (eg port)\n\n\nDirectory settings\n\n\n\n\nsettings.py\n\n\n\n\nMail server settings for error reports\n\n\nDatabase settings (eg. to use another database)\n\n\nSecurity / auto-logout\n\n\nLocalization (time zone!)", 
            "title": "Configuration files"
        }, 
        {
            "location": "/StartConfigurationFiles/#configuration-files", 
            "text": "Bots has two configuration files. \nMostly the defaults will be OK to get started, but you may need to\ncustomize these to your own needs. \nSettings are documented in the files. \nOpen these files in your  text editor .  The configuration files are located in the  bots/config  directory\n(except when using  multiple\nenvironments . \n The original default versions can be found in the  bots/install \ndirectory.", 
            "title": "Configuration Files"
        }, 
        {
            "location": "/StartConfigurationFiles/#botsini", 
            "text": "How long to keep edi files and their registration  Some GUI customisation settings  Timeouts and time limits  Logging options  Debugging options  Webserver settings (eg port)  Directory settings", 
            "title": "bots.ini"
        }, 
        {
            "location": "/StartConfigurationFiles/#settingspy", 
            "text": "Mail server settings for error reports  Database settings (eg. to use another database)  Security / auto-logout  Localization (time zone!)", 
            "title": "settings.py"
        }, 
        {
            "location": "/Glossary/", 
            "text": "Glossary of terms used in wiki\n\n\nIf you think any term used in the wiki is unclear please leave a comment and I will add it here\n\n\n\n\n\n\n\n\nalt\n\n\nUsed for chained translations.\n\n\n\n\n\n\n\n\n\n\nbotskey\n\n\nUsed for business document number, eg order number, invoice number. Used to set up \ndocument views\n (view business documents instead of edi-files).\n\n\n\n\n\n\nchannel type\n\n\nType of communication used for sending/receiving files like ftp, smtp, file I/O.\n\n\n\n\n\n\nchained translation\n\n\nA chained translations translate one incoming format to multiple outgoing formats.\n\n\n\n\n\n\neditype\n\n\nType of edi-file like x12, edifact, tradacoms, xml, csv, fixed record files.\n\n\n\n\n\n\nmapping script\n\n\nA python script containing instructions how to get data from incoming edi-message and put it in the outgoing edi-message.\n\n\n\n\n\n\nmessagetype\n\n\neg 850 (an x12 order), ORDERSD96AUN (edifact order) or your inhouse xml-orders. A messagetype is defined in a \ngrammar\n\n\n\n\n\n\nroute\n\n\na workflow for edi-files\n\n\n\n\n\n\ntranslation\n\n\nconvert a message of a certain editype, messagetype to another editype, messagetype using a mapping script.\n\n\n\n\n\n\ntranslation rule\n\n\ndetermines what translations are done for incoming files. In \nbots-monitor-\nConfiguration-\nTranslations", 
            "title": "Glossary of terms"
        }, 
        {
            "location": "/Glossary/#glossary-of-terms-used-in-wiki", 
            "text": "If you think any term used in the wiki is unclear please leave a comment and I will add it here     alt  Used for chained translations.      botskey  Used for business document number, eg order number, invoice number. Used to set up  document views  (view business documents instead of edi-files).    channel type  Type of communication used for sending/receiving files like ftp, smtp, file I/O.    chained translation  A chained translations translate one incoming format to multiple outgoing formats.    editype  Type of edi-file like x12, edifact, tradacoms, xml, csv, fixed record files.    mapping script  A python script containing instructions how to get data from incoming edi-message and put it in the outgoing edi-message.    messagetype  eg 850 (an x12 order), ORDERSD96AUN (edifact order) or your inhouse xml-orders. A messagetype is defined in a  grammar    route  a workflow for edi-files    translation  convert a message of a certain editype, messagetype to another editype, messagetype using a mapping script.    translation rule  determines what translations are done for incoming files. In  bots-monitor- Configuration- Translations", 
            "title": "Glossary of terms used in wiki"
        }, 
        {
            "location": "/Migrate/", 
            "text": "Migrate/upgrade bots\n\n\nIn this section details are given about how to migrate/upgrade to newer bots \nversions.\n\n\nIn general, try to upgrade to new bots version, especially if the\nversion is upward compatible.\n\n\nMost of the time migrating will be easy.\n\n\nGrammars and mappings have always worked for different versions.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Migrate/#migrateupgrade-bots", 
            "text": "In this section details are given about how to migrate/upgrade to newer bots \nversions.  In general, try to upgrade to new bots version, especially if the\nversion is upward compatible.  Most of the time migrating will be easy.  Grammars and mappings have always worked for different versions.", 
            "title": "Migrate/upgrade bots"
        }, 
        {
            "location": "/Migrate320/", 
            "text": "Bots 3.2.0rc was released 2014-03-22.\n\nBots 3.2.0rc2 was released 2014-05-27.\n\nBots 3.2.0 was released 2014-09-02.\n\nMigration notes:\n\n\nbots 3.2.0 is suited for django 1.4, 1.5, 1.6 and 1.7. Support for\nDjango 1.3 is dropped.\n\n\nin existing settings.py django requires parameter 'ALLOWED_HOSTS'. Add\nthis as eg:\n\n\n    ALLOWED_HOSTS = ['*']\n\n\n\nFor SQLite no database migration is needed. For MySQL and PostgreSQL: in\ntable unique, field 'domein' should be changed to 70 positions (was: 35)\nif using option to have in-communication connect failures reported after\nxx times (field 'Max failures' in channels).\n\n\nPython 2.5 is not supported anymore. use 2.6, preferably 2.7.\n\n\nBots does not support python \n 3 (yet). Reason is that python MySQL\nconnector is not suited for python 3 (yet).", 
            "title": "Bots 3.2.0"
        }, 
        {
            "location": "/V320changes/", 
            "text": "List of changes bots 3.2.0\n\n\nHighlights\n\n\n\n\nadded http(s) communication to communication methods (using 'requests' library).\n\n\nbetter reporting of partnerID for incoming files with errors.\n\n\nfile rename after outcommunication using tmp filenames to avoid 'reading before writing'.\n\n\nupdated edifax (print to html); is much easier to use now (edifax plugin will be updated).\n\n\n\n\nInterface (GUI)\n\n\n\n\nin run-screen: show used command for bots-engine, show if acceptance test.\n\n\nsearch by filename for incoming and outgoing files.\n\n\n'strange characters' like \u00eb\u00eb in routeID, channelID, etc will work now.\n\n\noption to have automaticretrycommunication in menu.\n\n\noption to add only routes that are not in default run to menu.\n\n\nadded bulk delete for persists data.\n\n\nuse 'rereceive' and 'resend' in screens (instead of 'retransmit').\n\n\nsimpler making bots suited for touchscreen.\n\n\nfilter routes for (not) in default run.\n\n\nimproved edifact indenting in file viewer.\n\n\ndiv small layout improvements in GUI.\n\n\n\n\nSmaller changes\n\n\n\n\nunicode handling is improved. This is about use of unicode in route-names, grammars, correct errors, etc\n\n\nset maxdaysarchive per channel.\n\n\nemail validation in django was too strict for certain email addresses.\n\n\ncheck CC-address when validating incoming email-addresses.\n\n\nimprove reporting on in-communication failures (give process-error after x time failure).\n\n\nsuited for django 1.4, 1.5, 1.6and 1.7. Django 1.3 support is dropped.\n\n\nadd incoming filename in email-report.\n\n\noption to use user script entries at start/end of a run and command.\n\n\nadded option 'parse and passthrough' for routes. Useful for eg generating 997/CONTROL.\n\n\nadded explicit enveloping indication (this indication can be set in mapping).\n\n\nmaking of plugin could take take a long time (better performance for large plugins).\n\n\nimprove processing of repeat separator in ISA version above 00403.\n\n\nxml2botsgrammar: order of elements is preserved now; all xml entities as records.\n\n\nxml2botsgrammar: added option to have all xml entities as 'record'.\n\n\nadded option to have function 'transform.partnerlookup' return 'None' if not found.\n\n\nimprove xmlrpc communication.\n\n\nfor persist: change timestamp on update.\n\n\nused new definitions for UNOA and UNOB. Definitions are clearer and easier to change, no change in functionality.\n\n\nbetter performance for one-on-one translations.\n\n\nbots-engine uses less memory.\n\n\nbetter reporting for import errors.\n\n\n\n\nBug fixes\n\n\n\n\npreprocessing not working for rereceive.\n\n\nfixed bug in windows installer (occurred when when UAC is disabled).\n\n\nrouteid did not always show up correct in error.\n\n\nrights problem: viewer can delete incoming files.\n\n\nshow filesize for passthrough files.\n\n\nMySQLdb version 1.2.5 gave error.\n\n\nchange password for non-staff user did not work.\n\n\nfound query's in GUI not using index (better performance).\n\n\nerror could not be displayed: \n.\n\n\nmultiple email-addresses were not used in sending emails.\n\n\ntransform.concat erroneously added spaces between elements.\n\n\ncallable in QUERIES should have 'node' as parameter.\n\n\nwhen received x12 message can not be parsed correctly, GS08 might not be found.\n\n\nrouteid did not show up correct in some errors.\n\n\nincoming tab-delimited file not parsed correct (for nobotsID \n first field Conditional).\n\n\nvia incoming/outgoing screen: button 'confirm (same selection)' did not work.\n\n\nin forms.py: reference was an..35, should be an..70", 
            "title": "Changes"
        }, 
        {
            "location": "/V320changes/#list-of-changes-bots-320", 
            "text": "", 
            "title": "List of changes bots 3.2.0"
        }, 
        {
            "location": "/V320changes/#highlights", 
            "text": "added http(s) communication to communication methods (using 'requests' library).  better reporting of partnerID for incoming files with errors.  file rename after outcommunication using tmp filenames to avoid 'reading before writing'.  updated edifax (print to html); is much easier to use now (edifax plugin will be updated).", 
            "title": "Highlights"
        }, 
        {
            "location": "/V320changes/#interface-gui", 
            "text": "in run-screen: show used command for bots-engine, show if acceptance test.  search by filename for incoming and outgoing files.  'strange characters' like \u00eb\u00eb in routeID, channelID, etc will work now.  option to have automaticretrycommunication in menu.  option to add only routes that are not in default run to menu.  added bulk delete for persists data.  use 'rereceive' and 'resend' in screens (instead of 'retransmit').  simpler making bots suited for touchscreen.  filter routes for (not) in default run.  improved edifact indenting in file viewer.  div small layout improvements in GUI.", 
            "title": "Interface (GUI)"
        }, 
        {
            "location": "/V320changes/#smaller-changes", 
            "text": "unicode handling is improved. This is about use of unicode in route-names, grammars, correct errors, etc  set maxdaysarchive per channel.  email validation in django was too strict for certain email addresses.  check CC-address when validating incoming email-addresses.  improve reporting on in-communication failures (give process-error after x time failure).  suited for django 1.4, 1.5, 1.6and 1.7. Django 1.3 support is dropped.  add incoming filename in email-report.  option to use user script entries at start/end of a run and command.  added option 'parse and passthrough' for routes. Useful for eg generating 997/CONTROL.  added explicit enveloping indication (this indication can be set in mapping).  making of plugin could take take a long time (better performance for large plugins).  improve processing of repeat separator in ISA version above 00403.  xml2botsgrammar: order of elements is preserved now; all xml entities as records.  xml2botsgrammar: added option to have all xml entities as 'record'.  added option to have function 'transform.partnerlookup' return 'None' if not found.  improve xmlrpc communication.  for persist: change timestamp on update.  used new definitions for UNOA and UNOB. Definitions are clearer and easier to change, no change in functionality.  better performance for one-on-one translations.  bots-engine uses less memory.  better reporting for import errors.", 
            "title": "Smaller changes"
        }, 
        {
            "location": "/V320changes/#bug-fixes", 
            "text": "preprocessing not working for rereceive.  fixed bug in windows installer (occurred when when UAC is disabled).  routeid did not always show up correct in error.  rights problem: viewer can delete incoming files.  show filesize for passthrough files.  MySQLdb version 1.2.5 gave error.  change password for non-staff user did not work.  found query's in GUI not using index (better performance).  error could not be displayed:  .  multiple email-addresses were not used in sending emails.  transform.concat erroneously added spaces between elements.  callable in QUERIES should have 'node' as parameter.  when received x12 message can not be parsed correctly, GS08 might not be found.  routeid did not show up correct in some errors.  incoming tab-delimited file not parsed correct (for nobotsID   first field Conditional).  via incoming/outgoing screen: button 'confirm (same selection)' did not work.  in forms.py: reference was an..35, should be an..70", 
            "title": "Bug fixes"
        }, 
        {
            "location": "/Migrate310/", 
            "text": "Bots 3.1.0RC was released 2013-07-17.\n\n\nNo database migration is needed.\n\n\nSome small changes in x12 grammar might be needed, see details.", 
            "title": "Bots 3.1.0"
        }, 
        {
            "location": "/V310changes/", 
            "text": "List of changes\n\n\nInterface (GUI)\n\n\n\n\nImproved and simplified many screens. Eg only filename is displayed (takes less space), a pop-up show full path name\n\n\nincoming\n\n\noutgoing\n\n\ndetail\n\n\ndocument; split up to incoming and outgoing screens;\n\n\nconfirm\n\n\n\n\n\n\nShow in configuration screen if there are routescripts, communicationscripts, mappingscripts, grammars. Routescripts etc can be viewed.\n\n\nPartners and partnergroups are split up (via menu and screens).\n\n\nAdded a cancel button in configuration editing.\n\n\nAdded a choice list for routes in Configuration-Confirm.\n\n\nDisplay edifact/x12: display per segment for better readability.\n\n\nShow correct number of messages for resends.\n\n\nEmail error report is extended with information about errors.\n\n\nImproved view/edit counters screen.\n\n\nIn errors the correct name of eg grammars is shown. This was confusing (using sometimes '.' instead of '\\' etc).\n\n\n\n\nHighlights\n\n\n\n\nExtra debug option: check all get/getloop if OK with grammars.\n\n\nSupport for repeating elements is added (x12/edifact).\n\n\nSimplified logic of syntax reading: default syntax is overridden by envelope syntax is overridden by message sytax is overridden by partner-syntax.\n\n\nAdded: fixed records can now be 'nobotsid': one record type, split to messages via field.\n\n\nGenerating 997's can be done/manipulated via user script .\n\n\n\n\nSmaller changes\n\n\n\n\nSkip empty json elements in incoming files.\n\n\nStartrecordID and endrecordID are not needed anymore for in grammars for fixed message/idoc, bots calculates this now.\n\n\nSmall improvements and bug fixes in XML reading/writing.\n\n\nQUERIES now also support callables.\n\n\nXml2botsgrammar: sort fields in recorddefs, use empty elements in grammar.\n\n\nIf 'alt' transaltion is not found, use default translation.\n\n\nMore consistent handling of exceptions and logging (coding only).\n\n\nFixed problems starting bots-engine from webserver in less common situations.\n\n\nGet correct incoming filename for re-receive.\n\n\nRemoved code for old database connector and code-conversion via file.\n\n\nAutomaticretry: first run only initialization (to avoid sending moch older files).\n\n\nExplicitly set for outgoing file: no automatic retry.\n\n\nPlugins: for different environments, path and testpath in channels are also relocated .\n\n\nPlugins: handling of unicode-characters is now correct.\n\n\nAdd mapping function: getdecimal(). Returns a python decimal; if not found or non-valid input: returns decimal 0.\n\n\nFor csv and fixed with 'noBOTSID': nextmessageblock can check for multiple fields, eg: nextmessageblock = ([{'BOTSID':'lin','field1':None},{'BOTSID':'lin','field2':None}])\n\n\nWhen deleting configuration items via 'bulk delete': make a backup plugin first.\n\n\n\n\nBug fixes\n\n\n\n\nThere was a missing import in xml2botsgrammar\n\n\nLogging of mapping debug did not work in 3.0\n\n\nCorrect handling of resends/rereceives for already resend/received files\n\n\nFixed bug in automaticretrycommunication\n\n\nConfirmation can now be asked via channel-rule.\n\n\nif multiple commands in run: reports etc are based on timestamp. This messed up the relation between runs and eg incoming files.", 
            "title": "Changes"
        }, 
        {
            "location": "/V310changes/#list-of-changes", 
            "text": "", 
            "title": "List of changes"
        }, 
        {
            "location": "/V310changes/#interface-gui", 
            "text": "Improved and simplified many screens. Eg only filename is displayed (takes less space), a pop-up show full path name  incoming  outgoing  detail  document; split up to incoming and outgoing screens;  confirm    Show in configuration screen if there are routescripts, communicationscripts, mappingscripts, grammars. Routescripts etc can be viewed.  Partners and partnergroups are split up (via menu and screens).  Added a cancel button in configuration editing.  Added a choice list for routes in Configuration-Confirm.  Display edifact/x12: display per segment for better readability.  Show correct number of messages for resends.  Email error report is extended with information about errors.  Improved view/edit counters screen.  In errors the correct name of eg grammars is shown. This was confusing (using sometimes '.' instead of '\\' etc).", 
            "title": "Interface (GUI)"
        }, 
        {
            "location": "/V310changes/#highlights", 
            "text": "Extra debug option: check all get/getloop if OK with grammars.  Support for repeating elements is added (x12/edifact).  Simplified logic of syntax reading: default syntax is overridden by envelope syntax is overridden by message sytax is overridden by partner-syntax.  Added: fixed records can now be 'nobotsid': one record type, split to messages via field.  Generating 997's can be done/manipulated via user script .", 
            "title": "Highlights"
        }, 
        {
            "location": "/V310changes/#smaller-changes", 
            "text": "Skip empty json elements in incoming files.  StartrecordID and endrecordID are not needed anymore for in grammars for fixed message/idoc, bots calculates this now.  Small improvements and bug fixes in XML reading/writing.  QUERIES now also support callables.  Xml2botsgrammar: sort fields in recorddefs, use empty elements in grammar.  If 'alt' transaltion is not found, use default translation.  More consistent handling of exceptions and logging (coding only).  Fixed problems starting bots-engine from webserver in less common situations.  Get correct incoming filename for re-receive.  Removed code for old database connector and code-conversion via file.  Automaticretry: first run only initialization (to avoid sending moch older files).  Explicitly set for outgoing file: no automatic retry.  Plugins: for different environments, path and testpath in channels are also relocated .  Plugins: handling of unicode-characters is now correct.  Add mapping function: getdecimal(). Returns a python decimal; if not found or non-valid input: returns decimal 0.  For csv and fixed with 'noBOTSID': nextmessageblock can check for multiple fields, eg: nextmessageblock = ([{'BOTSID':'lin','field1':None},{'BOTSID':'lin','field2':None}])  When deleting configuration items via 'bulk delete': make a backup plugin first.", 
            "title": "Smaller changes"
        }, 
        {
            "location": "/V310changes/#bug-fixes", 
            "text": "There was a missing import in xml2botsgrammar  Logging of mapping debug did not work in 3.0  Correct handling of resends/rereceives for already resend/received files  Fixed bug in automaticretrycommunication  Confirmation can now be asked via channel-rule.  if multiple commands in run: reports etc are based on timestamp. This messed up the relation between runs and eg incoming files.", 
            "title": "Bug fixes"
        }, 
        {
            "location": "/V310migrate/", 
            "text": "Migrate to version 3.1.0 (from 3.0.0)\n\n\nEditype x12: in ISA definition 'ISA11' has to be conditional\n\n\nBots 3.1.0 supports the repeating character (for ISA-versions >=\n00403).\n\nIf you use this, ISA11 has to be conditional in definition; file\nusersys/grammars/x12/envelope.py:\n\nwas:\n\n\n['ISA11','M',(1,1),'AN'],\n\nbecomes in 3.1.0:\n\n\n['ISA11','C',(1,1),'AN'],\n\nThis change also works for older ISA-version. Advised is to use this.\n\n\nEditype x12, edifact, tradacoms: different handling of syntax parameters\n\n\nBots handles the syntax parameters differently. In bots 3.0 and earlier\nthis was somewhat 'fuzzy'.\n\nThis works now like:\n\n\ndefault syntax parameters are overruled by envelope parameters,\n\nare overruled by message parameters,\n\nare overruled by frompartner parameters,\n\nare overruled by topartner parameters.\n\nMost common problem will be for x12: message grammars had by default in\nsyntax parameters:\n\n\n'version'    :  '00403',\n\nFormerly this was not used; now it is used.\n\nThis might lead to sending another version of ISA-envelope, this is\nprobably not what you want!\n\nSolution: delete (or uncomment) the 'version' syntax parameter for\nmessage grammar.  \n\n\nNote: the ISA-version you send now is probably in\nusersys/grammars/x12/x12.py\n\n\nEditype fixed and idoc: 'startrecordID' and 'endrecordID' not longer used\n\n\nBots calculates this automatically now. \nBots also checks for all used records if this is used the same over all\nrecords.\n\nThis might lead to errors.\n\nSolution: BOTSID should have correct length in all records and be at\ncorrect position.  \n\n\nEnvelope scripts\n\n\nwas:\n\n\nself._openoutenvelope(self.ta_info['editype'],self.ta_info['envelope'])\n\n becomes in 3.1.0:\n\n\nself._openoutenvelope()\n  \n\n\nRoute scripting\n\n\nFunction transform.translate is changed: parameters\nstartstatus,endstatus,idroute,rootidta have to be explicitly indicated\n(no more defaults).", 
            "title": "Migrate"
        }, 
        {
            "location": "/V310migrate/#migrate-to-version-310-from-300", 
            "text": "", 
            "title": "Migrate to version 3.1.0 (from 3.0.0)"
        }, 
        {
            "location": "/V310migrate/#editype-x12-in-isa-definition-isa11-has-to-be-conditional", 
            "text": "Bots 3.1.0 supports the repeating character (for ISA-versions >=\n00403). \nIf you use this, ISA11 has to be conditional in definition; file\nusersys/grammars/x12/envelope.py: \nwas:  ['ISA11','M',(1,1),'AN'], \nbecomes in 3.1.0:  ['ISA11','C',(1,1),'AN'], \nThis change also works for older ISA-version. Advised is to use this.", 
            "title": "Editype x12: in ISA definition 'ISA11' has to be conditional"
        }, 
        {
            "location": "/V310migrate/#editype-x12-edifact-tradacoms-different-handling-of-syntax-parameters", 
            "text": "Bots handles the syntax parameters differently. In bots 3.0 and earlier\nthis was somewhat 'fuzzy'. \nThis works now like:  default syntax parameters are overruled by envelope parameters, \nare overruled by message parameters, \nare overruled by frompartner parameters, \nare overruled by topartner parameters. \nMost common problem will be for x12: message grammars had by default in\nsyntax parameters:  'version'    :  '00403', \nFormerly this was not used; now it is used. \nThis might lead to sending another version of ISA-envelope, this is\nprobably not what you want! \nSolution: delete (or uncomment) the 'version' syntax parameter for\nmessage grammar.    Note: the ISA-version you send now is probably in\nusersys/grammars/x12/x12.py", 
            "title": "Editype x12, edifact, tradacoms: different handling of syntax parameters"
        }, 
        {
            "location": "/V310migrate/#editype-fixed-and-idoc-startrecordid-and-endrecordid-not-longer-used", 
            "text": "Bots calculates this automatically now. \nBots also checks for all used records if this is used the same over all\nrecords. \nThis might lead to errors. \nSolution: BOTSID should have correct length in all records and be at\ncorrect position.", 
            "title": "Editype fixed and idoc: 'startrecordID' and 'endrecordID' not longer used"
        }, 
        {
            "location": "/V310migrate/#envelope-scripts", 
            "text": "was:  self._openoutenvelope(self.ta_info['editype'],self.ta_info['envelope']) \n becomes in 3.1.0:  self._openoutenvelope()", 
            "title": "Envelope scripts"
        }, 
        {
            "location": "/V310migrate/#route-scripting", 
            "text": "Function transform.translate is changed: parameters\nstartstatus,endstatus,idroute,rootidta have to be explicitly indicated\n(no more defaults).", 
            "title": "Route scripting"
        }, 
        {
            "location": "/Migrate300/", 
            "text": "Bots 3.0.0 was released 2013-02-04\n\n\nBigger changes, and a database migration is needed.", 
            "title": "Bots 3.0.0"
        }, 
        {
            "location": "/V300changes/", 
            "text": "List of Changes\n\n\nWrapping of user script functionality into GUI\n\n\n\n\nFor outgoing filenames: can include partnerID, messagetype, botskey, data/time, etc in channel.\n\n\nPass-through is option in route.\n\n\nZip and unzip files as option in channel.\n\n\nSSL keyfile and certificate as options in channel.\n\n\nExcel as incoming messagetype (instead of via preprocessing).\n\n\nOption in channel to indicate edi file in email should be in body.\n\n\nAdd: communication-out type 'trash' to discard of edi files.\n\n\n\n\nImproved 'run' options\n\n\n\n\nRun options in GUI are simpler: new, rereceive, resend. (Automatic recommunication is possible via bots-engine).\n\n\nCommunication errors are visible in outgoing-screen and can be 'resend' manually.\n\n\nAdd 'resend all' and 'rereceive all' in incoming/outgoing screen; espc. useful in combination with selections.\n\n\nIndicate in screens a file has been resend; Keep track of number of resends of an outgoing file. Filer works 'over' resends now.\n\n\nDropped 'retry' option. This was not useful and confusing. Use 'rereceive'.\n\n\nDropped 'retry communication'. Use 'resend', easier and more consistent.\n\n\nAdd: use 'channel' in selects (eg useful for resend selects).\n\n\n\n\nBetter scheduling for bots-engine\n\n\n\n\nAdd: jobqueueserver. This makes complicated scheduling much better/easier; scheduled jobs will not be dropped anymore.\n\n\nAdd: directory-monitor: start engine when file is dropped in directory.\n\n\nCleanup runs only once a day now (in the first run of day); better performance.\n\n\nCleanup now also runs VACUUM for sqlite; better performance.\n\n\nAll edifact, x12, tradacoms files go via mailbag, x12. This is simpler. (there is a compatibility option in bots.ini).\n\n\nSet max file-size in translations (value can be changed in bots.ini). Very big edi files take a long time to process.\n\n\nImprove: engine now runs all routes if not new (unless routes have been specified as parameters).\n\n\n\n\nConfiguration change management \nsee wiki\n\n\n\n\nUse tools to push changes test-\n production\n\n\nVia GUI: write database configuration to usersys in order to compare environments.\n\n\nVia GUI: read the changed database configuration in usersys after pushing changes\n\n\n\n\n\n\nIsolated acceptation tests: run an acceptance test set without changes.\n\n\noption in bots.ini to active 'acceptance test'\n\n\nbots prevents communication to 'outside\n\n\nuse seperate path to read/write ('testpath')\n\n\ndo not change counters etc\n\n\nresults of acceptance tests can be deleted/removed\n\n\netc\n\n\n\n\n\n\n\n\nMany improvements in GUI, eg:\n\n\n\n\n'Detail' screen has a better layout.\n\n\nImprove: show name partner in selectlist (in configuration).\n\n\nImprove: show channel-type in selectlist and routes (in configuration). I find this very convenient.\n\n\nImprove: better sorting in configuration for in django 1.4, eg for routes, codelists, trasnlations.\n\n\nReferences in a configuration are better guarded. Eg: when deleting partner that is used in partner-specific translation: user is warned, has to confirm.\n\n\nImprove: removed charset from channel. This was not needed.\n\n\nImprove: selections in screens not only for partners but also for partner groups\n\n\nFix: download an edi-file via filer could give not-correct file.\n\n\nAdd: keep track of file-size of incoming/outgoing files.\n\n\n\n\nExtended partner functionality\n\n\n\n\nAdd: function 'partnerlookup' for use in mapping scripts to look-up/convert partner related functions.\n\n\nAdd: extra partner fields: address, user-defined fields.\n\n\nAdd: send a message to any bots partner from mapping script (use partners as the email address book).\n\n\nImprove: multiple email addresses in cc field.\n\n\n\n\nConfirmations\n\n\n\n\nFix: bug in confirmation logic for frompartner/topartner (I had them reversed...).\n\n\nBetter CONTRL-message.\n\n\nOption to run user exit either to generate CONTRL message or change the generated CONTRL message.\n\n\nmessagetype (for incoming) is now similar to other uses of message-type; edi-type is removed (is not needed)\n\n\nFix: better indexing for reference/botskey. This improves performance for confirmations.\n\n\n\n\nPlugins\n\n\n\n\nAlways make configuration backup when reading new plugin.\n\n\nDropped the date-indication for files that are overwritten.\n\n\nIndex file in plugin always starts with type of plugin and layout is sorted/predictable.\n\n\nFix for performance problem when generating plugin for big plugins.\n\n\nFixed bug for relations in database. Bug only occurs when reading 'hand-changed'-plugins.\n\n\n\n\nBetter handling of 'database is locked'/crash recovery\n\n\n\n\nFirst of all: use the jobqueue-server for more complicated scheduling (prevents running multiple engine!)\n\n\nDifferent way of detecting another instance of engine is running via locking of port.\n\n\nIf bots-engine finds no other engine is running, but the database is locked this indicates the previous run was ended unexpectedly (eg computer crash). In htis case bots will do an automatic 'crash recovery'. A warning is still given in logs or via email. Only ONE email is send.\n\n\n\n\nTechnical\n\n\n\n\nAn 64-bits installer for windows is available.\n\n\nRuns with django 1.4 now ; dropped support for django 1.1, 1.2\n\n\nDatabase has changed. A script is added to upgrade the database.\n\n\n\n\nOther changes\n\n\n\n\nAdd: startup script for bots-webserver using apache. Multiple bots-environments can run over one apache server.\n\n\nAdd: user exit for cleanup.\n\n\nImprove: use external file name in archive.\n\n\nAdd: archive as zip-files.\n\n\nFix: port was not used in initializing PostgreSQL.\n\n\nLess statuses in processing (simpler, faster).\n\n\nImprove: use unlimited text fields in database for errortext and persist.\n\n\nImprove: if message in incoming edi file has error in mapping script and/or writing outgoing file: process rest of edi file (there is a compatibility option in bots.ini).\n\n\nReworked errors for edi files (parsing, generating). All errors have numbers now (for referencing).\n\n\nAlways read incoming files sorted by name. Reason: predictability. Formerly the read order was not predicable.\n\n\nFix: better handling of import errors for user scripts. This could lead to confusing errors/situations.\n\n\nAdd: access to whole envelope in mapping.\n\n\nFix: nr of messages was not used correctly when writing multiple UNH in one mapping script.\n\n\nFix: bug for numerical fields with more than 4 decimal positions.\n\n\nAdd: counter(s) per bots-run in mapping script; eg useful for UNH/ST counter per interchange.\n\n\nFix: enveloping for edifact with keca-character-set.\n\n\nAdd: concatenate function for usage in mapping scripts.\n\n\nImprove: updated grammar-handling to allow for UNS-UNS construction.\n\n\nImprove: set explicit namespace when generating xml.\n\n\nAdd: determine translation via user scripting.\n\n\nAdd: user scripts can easy detect what type of run is done via routedict['command']\n\n\nDropped: intercommit connector.", 
            "title": "Changes"
        }, 
        {
            "location": "/V300changes/#list-of-changes", 
            "text": "", 
            "title": "List of Changes"
        }, 
        {
            "location": "/V300changes/#wrapping-of-user-script-functionality-into-gui", 
            "text": "For outgoing filenames: can include partnerID, messagetype, botskey, data/time, etc in channel.  Pass-through is option in route.  Zip and unzip files as option in channel.  SSL keyfile and certificate as options in channel.  Excel as incoming messagetype (instead of via preprocessing).  Option in channel to indicate edi file in email should be in body.  Add: communication-out type 'trash' to discard of edi files.", 
            "title": "Wrapping of user script functionality into GUI"
        }, 
        {
            "location": "/V300changes/#improved-run-options", 
            "text": "Run options in GUI are simpler: new, rereceive, resend. (Automatic recommunication is possible via bots-engine).  Communication errors are visible in outgoing-screen and can be 'resend' manually.  Add 'resend all' and 'rereceive all' in incoming/outgoing screen; espc. useful in combination with selections.  Indicate in screens a file has been resend; Keep track of number of resends of an outgoing file. Filer works 'over' resends now.  Dropped 'retry' option. This was not useful and confusing. Use 'rereceive'.  Dropped 'retry communication'. Use 'resend', easier and more consistent.  Add: use 'channel' in selects (eg useful for resend selects).", 
            "title": "Improved 'run' options"
        }, 
        {
            "location": "/V300changes/#better-scheduling-for-bots-engine", 
            "text": "Add: jobqueueserver. This makes complicated scheduling much better/easier; scheduled jobs will not be dropped anymore.  Add: directory-monitor: start engine when file is dropped in directory.  Cleanup runs only once a day now (in the first run of day); better performance.  Cleanup now also runs VACUUM for sqlite; better performance.  All edifact, x12, tradacoms files go via mailbag, x12. This is simpler. (there is a compatibility option in bots.ini).  Set max file-size in translations (value can be changed in bots.ini). Very big edi files take a long time to process.  Improve: engine now runs all routes if not new (unless routes have been specified as parameters).", 
            "title": "Better scheduling for bots-engine"
        }, 
        {
            "location": "/V300changes/#configuration-change-management-see-wiki", 
            "text": "Use tools to push changes test-  production  Via GUI: write database configuration to usersys in order to compare environments.  Via GUI: read the changed database configuration in usersys after pushing changes    Isolated acceptation tests: run an acceptance test set without changes.  option in bots.ini to active 'acceptance test'  bots prevents communication to 'outside  use seperate path to read/write ('testpath')  do not change counters etc  results of acceptance tests can be deleted/removed  etc", 
            "title": "Configuration change management see wiki"
        }, 
        {
            "location": "/V300changes/#many-improvements-in-gui-eg", 
            "text": "'Detail' screen has a better layout.  Improve: show name partner in selectlist (in configuration).  Improve: show channel-type in selectlist and routes (in configuration). I find this very convenient.  Improve: better sorting in configuration for in django 1.4, eg for routes, codelists, trasnlations.  References in a configuration are better guarded. Eg: when deleting partner that is used in partner-specific translation: user is warned, has to confirm.  Improve: removed charset from channel. This was not needed.  Improve: selections in screens not only for partners but also for partner groups  Fix: download an edi-file via filer could give not-correct file.  Add: keep track of file-size of incoming/outgoing files.", 
            "title": "Many improvements in GUI, eg:"
        }, 
        {
            "location": "/V300changes/#extended-partner-functionality", 
            "text": "Add: function 'partnerlookup' for use in mapping scripts to look-up/convert partner related functions.  Add: extra partner fields: address, user-defined fields.  Add: send a message to any bots partner from mapping script (use partners as the email address book).  Improve: multiple email addresses in cc field.", 
            "title": "Extended partner functionality"
        }, 
        {
            "location": "/V300changes/#confirmations", 
            "text": "Fix: bug in confirmation logic for frompartner/topartner (I had them reversed...).  Better CONTRL-message.  Option to run user exit either to generate CONTRL message or change the generated CONTRL message.  messagetype (for incoming) is now similar to other uses of message-type; edi-type is removed (is not needed)  Fix: better indexing for reference/botskey. This improves performance for confirmations.", 
            "title": "Confirmations"
        }, 
        {
            "location": "/V300changes/#plugins", 
            "text": "Always make configuration backup when reading new plugin.  Dropped the date-indication for files that are overwritten.  Index file in plugin always starts with type of plugin and layout is sorted/predictable.  Fix for performance problem when generating plugin for big plugins.  Fixed bug for relations in database. Bug only occurs when reading 'hand-changed'-plugins.", 
            "title": "Plugins"
        }, 
        {
            "location": "/V300changes/#better-handling-of-database-is-lockedcrash-recovery", 
            "text": "First of all: use the jobqueue-server for more complicated scheduling (prevents running multiple engine!)  Different way of detecting another instance of engine is running via locking of port.  If bots-engine finds no other engine is running, but the database is locked this indicates the previous run was ended unexpectedly (eg computer crash). In htis case bots will do an automatic 'crash recovery'. A warning is still given in logs or via email. Only ONE email is send.", 
            "title": "Better handling of 'database is locked'/crash recovery"
        }, 
        {
            "location": "/V300changes/#technical", 
            "text": "An 64-bits installer for windows is available.  Runs with django 1.4 now ; dropped support for django 1.1, 1.2  Database has changed. A script is added to upgrade the database.", 
            "title": "Technical"
        }, 
        {
            "location": "/V300changes/#other-changes", 
            "text": "Add: startup script for bots-webserver using apache. Multiple bots-environments can run over one apache server.  Add: user exit for cleanup.  Improve: use external file name in archive.  Add: archive as zip-files.  Fix: port was not used in initializing PostgreSQL.  Less statuses in processing (simpler, faster).  Improve: use unlimited text fields in database for errortext and persist.  Improve: if message in incoming edi file has error in mapping script and/or writing outgoing file: process rest of edi file (there is a compatibility option in bots.ini).  Reworked errors for edi files (parsing, generating). All errors have numbers now (for referencing).  Always read incoming files sorted by name. Reason: predictability. Formerly the read order was not predicable.  Fix: better handling of import errors for user scripts. This could lead to confusing errors/situations.  Add: access to whole envelope in mapping.  Fix: nr of messages was not used correctly when writing multiple UNH in one mapping script.  Fix: bug for numerical fields with more than 4 decimal positions.  Add: counter(s) per bots-run in mapping script; eg useful for UNH/ST counter per interchange.  Fix: enveloping for edifact with keca-character-set.  Add: concatenate function for usage in mapping scripts.  Improve: updated grammar-handling to allow for UNS-UNS construction.  Improve: set explicit namespace when generating xml.  Add: determine translation via user scripting.  Add: user scripts can easy detect what type of run is done via routedict['command']  Dropped: intercommit connector.", 
            "title": "Other changes"
        }, 
        {
            "location": "/V300migrate/", 
            "text": "Migrate/update to 3.0.0\n\n\nIntroduction\n\n\nVersion 3.0 is a bigger update for bots, view \nall\nchanges\n. \n\n\nOverview: \n\n\n\n\nDjango 1.1 and 1.2 are not supported anymore. Supported are django 1.3 and 1.4. \n\n\nSettings.py is changed. Advised: use the new settings.py, and do your\n    customization in the new setting.py (eg for error reports, maybe\n    database and timezone). \n\n\nThe database has changed. A script is included to change the database. \n    I had no database issues while testing this migration. \n\n\nlots of changes in bots.ini. The 'old' bots.ini is\n    OK, but it is advised to use new bots.ini, and do your customizations\n    there. \n\n\nExcel input: does work; but is now an incoming messagetype and\n    not via 'preprocessing'. \n\n\nMost user scripts will work; many user scripts are not needed anymore \n    because the functionality is provided by bots now. \n\n\nSome functions that may be used in user scripting have\n    changed: \n\n\nbotslib.change() -> botslib.changeq(). This function is\n    used to in processing incoming 997's and CONTRL!! \n\n\nbotsengine routescripts: for 'new' runs in routescript botsengine.py \n    called function postnewrun(routestorun) -> postnew(routestorun) \n\n\ncommunication.run(idchannel,idroute) ->\n    communication.run(idchannel,command,idroute). Command is one of:\n    'new','automaticretrycommunication','resend','rereceive'. \n\n\ntransform.run(idchannel,idroute) ->\n    transform.run(idchannel,command,idroute). Command is one of:\n    'new','automaticretrycommunication','resend','rereceive'. My\n    experiences: after changing settings.py and database migration, all\n    works (except for and issues mentioned above).\n\n\n\n\n\n\n\n\nSummary of procedure\n\n\n\n\nmake a backup!\n\n\nrename existing installation.\n\n\ndo a fresh install.\n\n\ncopy old data to new installation.\n\n\nchange settings\n\n\nupdate the database.\n     Comments:\n\n\nIt is critical to change the settings before updating the database!\n    Bots finds the right database via the settings!\n\n\nIf you use MySQL or PostGreSQL: same procedure. The bots-updatedb\n    script also updates MySQL or PostGreSQL.\n\n\nTested this for migration from bots2.2.1 -> 3.0.0, but works for\n    all bots2.\n*\n installations.\n\n\n\n\nWindows procedure\n\n\n\n\nmake a backup!\n\n\nrename existing installation\n\n\nexisting bots-installation is in C:\\Python27\\Lib\\site-packages\n\n\nrenamed bots directory to bots221\n\n\nalso renamed existing directories for cherrypy, django, genshi.\n\n\n\n\n\n\ndo a fresh install of bots3.0.0 installer (bots-3.0.0.win32.exe)\n\n\n\n\ncopy old data to new installation.\n\n\n\n\nin C:\\Python27\\Lib\\site-packages new directories have been\n    installed (bots, django, cherrypy, genshi)\n\n\ncopy directories botssys and usersys from bots221-directory to bots\n    directories. Everything can be overwritten.\n\n\n\n\n\n\n\n\nchange settings\n\n\n\n\nuse new config/bots.ini, adapt for your own values.\n\n\nuse new config/settings.py, adapt for your own values. Especially\n    the database settings are important; the format is slightly\n    different (but similar enough to give no problem); critical is using\n    the 'ENGINE'-value of the new settings.py.\n\n\n\n\n\n\n\n\nupdate the database.\n\n\n\n\nuse command-prompt/dos-box\\\n\n\ngoto directory C:\\Python27\\Scripts\\\n\n\ncommand-line: \nC:\\Python27\\python bots-updatedb.py\n\n\nshould report that database is successful changed.\\\n\n\n\n\n\n\n\n\nIf you use a 64-bits version of windows another option is to use\nthe 64-bits versions of python and bots.\n\n\nLinux procedure\n\n\n\n\n\n\nmake a backup!\n\n\n\n\n\n\nrename existing installation\n\n\n\n\nexisting bots-installation is in\n    /usr/local/lib/python2.7/dist-packages\n\n\nrenamed bots directory to bots221\n\n\nfor libraries: check you use at least django 1.3\n\n\n\n\n\n\n\n\ndo a fresh install: see \ninstallation\n    procedure\n\n\n\n\n\n\ncopy old data to new installation.\n\n\n\n\nin /usr/local/lib/python2.7/dist-packages new bots-directory is\n    installed.\n\n\ncopy directories botssys and usersys from bots221-directory to bots\n    directories. Everything can be overwritten.\n\n\nmind your rights!\n\n\n\n\n\n\n\n\nchange settings\n\n\n\n\nuse new config/bots.ini, adapt for your own values.\n\n\nuse new config/settings.py, adapt for your own values. Especially\n    the database settings are important; the format is slightly\n    different (but similar enough to give no problem); critical is using\n    the 'ENGINE'-value of the new settings.py.\n\n\n\n\n\n\n\n\nupdate the database.\n\n    command-line: \nbots-updatedb.py\n\n    should report that database is successful changed.", 
            "title": "Migrate"
        }, 
        {
            "location": "/V300migrate/#migrateupdate-to-300", 
            "text": "", 
            "title": "Migrate/update to 3.0.0"
        }, 
        {
            "location": "/V300migrate/#introduction", 
            "text": "Version 3.0 is a bigger update for bots, view  all\nchanges .   Overview:    Django 1.1 and 1.2 are not supported anymore. Supported are django 1.3 and 1.4.   Settings.py is changed. Advised: use the new settings.py, and do your\n    customization in the new setting.py (eg for error reports, maybe\n    database and timezone).   The database has changed. A script is included to change the database. \n    I had no database issues while testing this migration.   lots of changes in bots.ini. The 'old' bots.ini is\n    OK, but it is advised to use new bots.ini, and do your customizations\n    there.   Excel input: does work; but is now an incoming messagetype and\n    not via 'preprocessing'.   Most user scripts will work; many user scripts are not needed anymore \n    because the functionality is provided by bots now.   Some functions that may be used in user scripting have\n    changed:   botslib.change() -> botslib.changeq(). This function is\n    used to in processing incoming 997's and CONTRL!!   botsengine routescripts: for 'new' runs in routescript botsengine.py \n    called function postnewrun(routestorun) -> postnew(routestorun)   communication.run(idchannel,idroute) ->\n    communication.run(idchannel,command,idroute). Command is one of:\n    'new','automaticretrycommunication','resend','rereceive'.   transform.run(idchannel,idroute) ->\n    transform.run(idchannel,command,idroute). Command is one of:\n    'new','automaticretrycommunication','resend','rereceive'. My\n    experiences: after changing settings.py and database migration, all\n    works (except for and issues mentioned above).", 
            "title": "Introduction"
        }, 
        {
            "location": "/V300migrate/#summary-of-procedure", 
            "text": "make a backup!  rename existing installation.  do a fresh install.  copy old data to new installation.  change settings  update the database.\n     Comments:  It is critical to change the settings before updating the database!\n    Bots finds the right database via the settings!  If you use MySQL or PostGreSQL: same procedure. The bots-updatedb\n    script also updates MySQL or PostGreSQL.  Tested this for migration from bots2.2.1 -> 3.0.0, but works for\n    all bots2. *  installations.", 
            "title": "Summary of procedure"
        }, 
        {
            "location": "/V300migrate/#windows-procedure", 
            "text": "make a backup!  rename existing installation  existing bots-installation is in C:\\Python27\\Lib\\site-packages  renamed bots directory to bots221  also renamed existing directories for cherrypy, django, genshi.    do a fresh install of bots3.0.0 installer (bots-3.0.0.win32.exe)   copy old data to new installation.   in C:\\Python27\\Lib\\site-packages new directories have been\n    installed (bots, django, cherrypy, genshi)  copy directories botssys and usersys from bots221-directory to bots\n    directories. Everything can be overwritten.     change settings   use new config/bots.ini, adapt for your own values.  use new config/settings.py, adapt for your own values. Especially\n    the database settings are important; the format is slightly\n    different (but similar enough to give no problem); critical is using\n    the 'ENGINE'-value of the new settings.py.     update the database.   use command-prompt/dos-box\\  goto directory C:\\Python27\\Scripts\\  command-line:  C:\\Python27\\python bots-updatedb.py  should report that database is successful changed.\\     If you use a 64-bits version of windows another option is to use\nthe 64-bits versions of python and bots.", 
            "title": "Windows procedure"
        }, 
        {
            "location": "/V300migrate/#linux-procedure", 
            "text": "make a backup!    rename existing installation   existing bots-installation is in\n    /usr/local/lib/python2.7/dist-packages  renamed bots directory to bots221  for libraries: check you use at least django 1.3     do a fresh install: see  installation\n    procedure    copy old data to new installation.   in /usr/local/lib/python2.7/dist-packages new bots-directory is\n    installed.  copy directories botssys and usersys from bots221-directory to bots\n    directories. Everything can be overwritten.  mind your rights!     change settings   use new config/bots.ini, adapt for your own values.  use new config/settings.py, adapt for your own values. Especially\n    the database settings are important; the format is slightly\n    different (but similar enough to give no problem); critical is using\n    the 'ENGINE'-value of the new settings.py.     update the database. \n    command-line:  bots-updatedb.py \n    should report that database is successful changed.", 
            "title": "Linux procedure"
        }, 
        {
            "location": "/V300rcchanges/", 
            "text": "Changes in database format since version 3.0.0rc\n\n\nAlas: the database as used in the 3.0.0rc version has changed!\n\n\nChanged is:\n\n\n\n\ntable channel: field 'testpath' is added\n\n\ntable report: field 'acceptance' is added\n\n\ntabel ccode: field 'rightcode'-\n70pos\n\n\ntabel ccode: field 'attr1'-\n70pos", 
            "title": "Changes 3.0.0rc/3.0.0"
        }, 
        {
            "location": "/V300rcchanges/#changes-in-database-format-since-version-300rc", 
            "text": "Alas: the database as used in the 3.0.0rc version has changed!  Changed is:   table channel: field 'testpath' is added  table report: field 'acceptance' is added  tabel ccode: field 'rightcode'- 70pos  tabel ccode: field 'attr1'- 70pos", 
            "title": "Changes in database format since version 3.0.0rc"
        }, 
        {
            "location": "/Migrate220/", 
            "text": "Upgrade bots version 2.\n*\n.\n*\n -\n 2.2.0\n\n\nProcedure\n\n\nNOTE: please make backup first!\n\n\nfor all updates: settings.py \nHAS\n to be changed. One line has to be added (at end of file):\n\n\n  TEMPLATE_CONTEXT_PROCESSORS = (\n    \ndjango.core.context_processors.auth\n,\n    \ndjango.core.context_processors.debug\n,\n    \ndjango.core.context_processors.i18n\n,\n    \ndjango.core.context_processors.media\n,\n    \ndjango.core.context_processors.request\n,\n    \nbots.bots_context.set_context\n,    #THIS LINE IS ADDED!\n    )\n\n\n\n\n\n\nUpdate plugin:\n\n\nGet the plugin at \nsourceforge\n.\n\n\nMind there are 2 version of the plugin, depending upon the version of django you use.\n\n\nRead like a normal plugin (bots-monitor-\nsystasks-\nread plugin).\n\n\nBots-monitor will give an error...nasty but upgrade is done.\n\n\nStop the web-server.\n\n\nEdit bots/config/settings.py (See above)\n\n\nRestart bots-webserver.\n\n\n\n\n\n\nFor windows:\n\n\nGet the installer at \nsourceforge\n.\n\n\nInstall new version.\n\n\nDjango is upgraded to 1.3.1\n\n\nDatabase and mappings are not changed\n\n\nConfiguration files have not been changed\n\n\nEdit bots/config/settings.py (See above)\n\n\n\n\n\n\n\n\nCompatibility\n\n\nVersion 2.2.0 is upward compatible with previous versions in 2.\n*\n.\n*\n-series:\n\n\n\n\nno data migration needed\n\n\ngrammars, translations etc mostly will work as before\n\n\n\n\nCompatibility problems\n\n\n\n\nwhen upgrading from 2.0.\n*\n see \nmigration to 2.1.0\n\n\nas mentioned above: new line has to be added in settings.py in TEMPLATE_CONTEXT_PROCESSORS\n\n\n\n\nDeprecated\n\n\n\n\ndjango 1.1.\n*\n; use django \n 1.2.0, see for \ninstructions\n\n\neditype: database (=database connector with SQLalchemy). Use editype db; if wished you can use SQLalchemy in this new database connector.\n\n\ncode conversion via file (in bots/usersys/codeconversions). Use codeconversion via ccode table: better, faster, more flexible.\n\n\neditype template (with library 'kid'); use editype template-html (with library Genshi) instead. \n    Genshi is quite simular to kid, see for \ninstructions\n\n\ncommunication via intercommit (type intercommit). If needed, a plugin can be provided.\n\n\n\n\nChanges in bots.ini\n\n\nYou can use your old bots.ini with no problem, reasonable defaults have been used. New options added in 2.2.0:\n\n\n[webserver]\n\n#settings for logging of bots-webserver\n#console logging on (True) or off (False); default is True.\nwebserver_log_console = True\n#webserver_log_console_level: level for logging to console/screen. Values: DEBUG,INFO,STARTINFO,WARNING,ERROR or CRITICAL. Default: STARTINFO \n#actually useful: WARNING: only start-up text; info gives more info\nwebserver_log_console_level = STARTINFO\n\n# to customise name of botslogo html file (default: bots/botslogo.html)\nbotslogo = bots/botslogo.html\n# text displayed on right of bots logo. Useful to indicate different environments: TEST, PRODUCTION. Default: no text\nenvironment_text = \n\n#when True, the run menu contains entries to run each route indivudually. Default: False\nmenu_all_routes = False\n\n[custommenus]\n#it is possible to add a custom menu to the default bots menu. Features\n#1. the menuname to appear on the menu bar in bots monitor; Default: Custom. Eg:\n#menuname = MyMenu\n#2. Entries ins the custom menu: all \nname: value\n entries in this section will be added to the custom menu in bots monitor. Eg:\n#Incoming = /incoming/?all\n#3. Menu divider lines can be added with special value \n---\n. Eg:\n#divider1 = ---\n# note: sequence of entries is preserved, but case of menu entry is not; title case will be applied", 
            "title": "Changes/migrate 2.2.0"
        }, 
        {
            "location": "/Migrate220/#upgrade-bots-version-2-220", 
            "text": "", 
            "title": "Upgrade bots version 2.*.* -&gt; 2.2.0"
        }, 
        {
            "location": "/Migrate220/#procedure", 
            "text": "NOTE: please make backup first!  for all updates: settings.py  HAS  to be changed. One line has to be added (at end of file):    TEMPLATE_CONTEXT_PROCESSORS = (\n     django.core.context_processors.auth ,\n     django.core.context_processors.debug ,\n     django.core.context_processors.i18n ,\n     django.core.context_processors.media ,\n     django.core.context_processors.request ,\n     bots.bots_context.set_context ,    #THIS LINE IS ADDED!\n    )   Update plugin:  Get the plugin at  sourceforge .  Mind there are 2 version of the plugin, depending upon the version of django you use.  Read like a normal plugin (bots-monitor- systasks- read plugin).  Bots-monitor will give an error...nasty but upgrade is done.  Stop the web-server.  Edit bots/config/settings.py (See above)  Restart bots-webserver.    For windows:  Get the installer at  sourceforge .  Install new version.  Django is upgraded to 1.3.1  Database and mappings are not changed  Configuration files have not been changed  Edit bots/config/settings.py (See above)", 
            "title": "Procedure"
        }, 
        {
            "location": "/Migrate220/#compatibility", 
            "text": "Version 2.2.0 is upward compatible with previous versions in 2. * . * -series:   no data migration needed  grammars, translations etc mostly will work as before", 
            "title": "Compatibility"
        }, 
        {
            "location": "/Migrate220/#compatibility-problems", 
            "text": "when upgrading from 2.0. *  see  migration to 2.1.0  as mentioned above: new line has to be added in settings.py in TEMPLATE_CONTEXT_PROCESSORS", 
            "title": "Compatibility problems"
        }, 
        {
            "location": "/Migrate220/#deprecated", 
            "text": "django 1.1. * ; use django   1.2.0, see for  instructions  editype: database (=database connector with SQLalchemy). Use editype db; if wished you can use SQLalchemy in this new database connector.  code conversion via file (in bots/usersys/codeconversions). Use codeconversion via ccode table: better, faster, more flexible.  editype template (with library 'kid'); use editype template-html (with library Genshi) instead. \n    Genshi is quite simular to kid, see for  instructions  communication via intercommit (type intercommit). If needed, a plugin can be provided.", 
            "title": "Deprecated"
        }, 
        {
            "location": "/Migrate220/#changes-in-botsini", 
            "text": "You can use your old bots.ini with no problem, reasonable defaults have been used. New options added in 2.2.0:  [webserver]\n\n#settings for logging of bots-webserver\n#console logging on (True) or off (False); default is True.\nwebserver_log_console = True\n#webserver_log_console_level: level for logging to console/screen. Values: DEBUG,INFO,STARTINFO,WARNING,ERROR or CRITICAL. Default: STARTINFO \n#actually useful: WARNING: only start-up text; info gives more info\nwebserver_log_console_level = STARTINFO\n\n# to customise name of botslogo html file (default: bots/botslogo.html)\nbotslogo = bots/botslogo.html\n# text displayed on right of bots logo. Useful to indicate different environments: TEST, PRODUCTION. Default: no text\nenvironment_text = \n\n#when True, the run menu contains entries to run each route indivudually. Default: False\nmenu_all_routes = False\n\n[custommenus]\n#it is possible to add a custom menu to the default bots menu. Features\n#1. the menuname to appear on the menu bar in bots monitor; Default: Custom. Eg:\n#menuname = MyMenu\n#2. Entries ins the custom menu: all  name: value  entries in this section will be added to the custom menu in bots monitor. Eg:\n#Incoming = /incoming/?all\n#3. Menu divider lines can be added with special value  --- . Eg:\n#divider1 = ---\n# note: sequence of entries is preserved, but case of menu entry is not; title case will be applied", 
            "title": "Changes in bots.ini"
        }, 
        {
            "location": "/Migrate210/", 
            "text": "Upgrade bots version 2.0.\n*\n -\n 2.1.0\n\n\nProcedure\n\n\n\n\nUse update plugin:\n\n\nGet the plugin at \nsourceforge:\n.\n\n\nMind there are 2 version of the plugin, depending upon the version of django you use.\n\n\nRead like a normal plugin (bots-monitor-\nsystasks-\nread plugin).\n\n\nStop the web-server.\n\n\nRestart bots-webserver.\n\n\n\n\n\n\n\n\nCompatibility\n\n\nVersion 2.1.0 is upward compatible with previous versions in 2.\n*\n.\n*\n-series:\n\n\n\n\nno data migration needed\n\n\ngrammars, translations etc mostly will work as before\n\n\n\n\nCompatibility notes\n\n\n\n\nAfter upgrading, some (eg. older edifact) grammars can give errors. This is due to stricter checking of grammars. \n    The records in a grammar are now checked for unique field-names: the same field name is not allowed in a record. \n    This was never OK, but was not checked). Typical error:\n\n\n\n\nGrammarError: Grammar \n...usersys/grammars/edifact.ORDERSD96AUNEAN008\n, record \nFII\n: field \nC078.3192\n appears twice. Field names should be unique within a record. \n\n\n\n\n\n\nThe culprit is the file D96Arecords (or similar), the FII segment has an error in it.\n    * Solution 1: adapt grammar manually; change FII segment:\n\n\n\n\n ['C078.3192','C',35,'A'],\n ['C078.3192','C',35,'A'],\n\n\n\n\n\n\n\n\nto:\n\n\n\n\n\n\n ['C078.3192','C',35,'A'],\n ['C078.3192#2','C',35,'A'],\n\n\n\n\n* Solution 2: use plugin 'update\\_edifact\\_recorddefs.zip' (same directory as update-plugins. this plugin only contains edifact records for D93A and D96A).\n\n\n\nChanges in bots.ini\n\n\nYou can use your old bots.ini with no problem, reasonable defaults have been used. Following are the new options added.\n\n\n[settings]\n\n#adminlimit: number of lines displayed on one screen for configuration items; default is value of 'limit'\n#adminlimit = 30\n\n#for incoming channels: limit the time in-communication is done (in seconds). Default is 60. This is the global parameter, can also be limited per channel (in GUI)\nmaxsecondsperchannel = 60\n\n#sendreportifprocesserror : do not send a report by mail if only process errors occurred. useful if outcommunication often gives error. default= True (send if there is a process error)\nsendreportifprocesserror = True\n\n#imap4debug: print detailed information about imap4 session(s). Default 0 (no debug) (can use 0,1,2,3,4,5)\nimap4debug=0\n\n[webserver]\n\n#the server_name. Used to distinguish different bots-environments. defaults: bots-webserver\nname = bots-webserver\n\n#in order to use ssl/https:\n#    - indicate here the file for the ssl_certificate and ssl_private_key. (both can be in the same file)\n#    - uncomment the lines\n#(and of course you will have to make the certificate and private key yourself)\n#self-signed certificates are allowed.\n#ssl_certificate = /path/to/filename\n#ssl_private_key = /path/to/filename\n\n\n\n\nDetails\n\n\nMore details about version 2.10 are \nhere\n.", 
            "title": "Changes/migrate 2.1.0"
        }, 
        {
            "location": "/Migrate210/#upgrade-bots-version-20-210", 
            "text": "", 
            "title": "Upgrade bots version 2.0.* -&gt; 2.1.0"
        }, 
        {
            "location": "/Migrate210/#procedure", 
            "text": "Use update plugin:  Get the plugin at  sourceforge: .  Mind there are 2 version of the plugin, depending upon the version of django you use.  Read like a normal plugin (bots-monitor- systasks- read plugin).  Stop the web-server.  Restart bots-webserver.", 
            "title": "Procedure"
        }, 
        {
            "location": "/Migrate210/#compatibility", 
            "text": "Version 2.1.0 is upward compatible with previous versions in 2. * . * -series:   no data migration needed  grammars, translations etc mostly will work as before", 
            "title": "Compatibility"
        }, 
        {
            "location": "/Migrate210/#compatibility-notes", 
            "text": "After upgrading, some (eg. older edifact) grammars can give errors. This is due to stricter checking of grammars. \n    The records in a grammar are now checked for unique field-names: the same field name is not allowed in a record. \n    This was never OK, but was not checked). Typical error:   GrammarError: Grammar  ...usersys/grammars/edifact.ORDERSD96AUNEAN008 , record  FII : field  C078.3192  appears twice. Field names should be unique within a record.    The culprit is the file D96Arecords (or similar), the FII segment has an error in it.\n    * Solution 1: adapt grammar manually; change FII segment:    ['C078.3192','C',35,'A'],\n ['C078.3192','C',35,'A'],    to:     ['C078.3192','C',35,'A'],\n ['C078.3192#2','C',35,'A'],  * Solution 2: use plugin 'update\\_edifact\\_recorddefs.zip' (same directory as update-plugins. this plugin only contains edifact records for D93A and D96A).", 
            "title": "Compatibility notes"
        }, 
        {
            "location": "/Migrate210/#changes-in-botsini", 
            "text": "You can use your old bots.ini with no problem, reasonable defaults have been used. Following are the new options added.  [settings]\n\n#adminlimit: number of lines displayed on one screen for configuration items; default is value of 'limit'\n#adminlimit = 30\n\n#for incoming channels: limit the time in-communication is done (in seconds). Default is 60. This is the global parameter, can also be limited per channel (in GUI)\nmaxsecondsperchannel = 60\n\n#sendreportifprocesserror : do not send a report by mail if only process errors occurred. useful if outcommunication often gives error. default= True (send if there is a process error)\nsendreportifprocesserror = True\n\n#imap4debug: print detailed information about imap4 session(s). Default 0 (no debug) (can use 0,1,2,3,4,5)\nimap4debug=0\n\n[webserver]\n\n#the server_name. Used to distinguish different bots-environments. defaults: bots-webserver\nname = bots-webserver\n\n#in order to use ssl/https:\n#    - indicate here the file for the ssl_certificate and ssl_private_key. (both can be in the same file)\n#    - uncomment the lines\n#(and of course you will have to make the certificate and private key yourself)\n#self-signed certificates are allowed.\n#ssl_certificate = /path/to/filename\n#ssl_private_key = /path/to/filename", 
            "title": "Changes in bots.ini"
        }, 
        {
            "location": "/Migrate210/#details", 
            "text": "More details about version 2.10 are  here .", 
            "title": "Details"
        }, 
        {
            "location": "/MigrateKidGenshi/", 
            "text": "Migrate from Kid to Genshi for templates\n\n\nIf you use bots edi type _template_ then you are using kid for those \ntemplates. From version 2.1.0 onwards, using Genshi is also supported, \nusing edi type _template-html_. In a future bots version, kid will be \nremoved as it is no longer being developed. \n\n\nYou may have copied templates from a plugin, or developed your own. \nEach template normally consists of three files: \n\n\n\n\nusersys/grammars/template/\nmessagetype\n.py\n is the grammar configured\n    in the translation and defines the actual template files used. \n\n\nusersys/grammars/template/templates/\nmessagetype\n.kid\n is the template\n    containing html code for the main body of the message. \n\n\nusersys/grammars/template/templates/\nmessagetype\n_envelope.kid\n is the\n    envelope template containing header and footer html code. \n\n\nYour naming standard for the .kid files may differ from the above example \n\n\n\n\nTo convert this to a Genshi template, at least the following steps are required.\nThere may be additional changes depending on your template complexity.\nFor more info see \nComparing Genshi to\nKid\n. \n\n\n\n\nOf course, the \nGenshi\n library must be \n    installed for this to work. \n\n\nCopy the three source files from \nusersys/template\n to\n    \nusersys/templatehtml\n. The compiled .pyc files are not copied. Keep\n    the same \n/templates\n sub-directory structure for the templates. \n\n\nAlso copy the \n__init.py__\n files when first creating this\n    new directory structure. \n\n\nRename the two copied .kid files to .html (ie. just change the file extension) \n\n\nEdit the \nmessagetype\n.py\n file and change it's \ntemplate\n and \nenvelope-template\n settings that refer\n    to the .kid files to .html files. \n\n\n\n\nsyntax = { \n    'charset':'utf-8',\n    'contenttype':'text/html', \n    'merge':False, \n    'template':'\nmessagetype\n.html',\n    'envelope-template':'\nmessagetype\n_envelope.html'} \n\n\n\n\n\n\nEdit the two .html template files and make the following changes: \n\n\nNamespaces should be changed \n\n\n\n\n\n\n\n\n!-- Kid namespace --\n\n\nhtml xmlns:py=\nhttp://purl.org/kid/ns#\n\n\n\n\n\n* xi:include should be used instead of py:replace in the envelope template \n\n\n\n\n!-- Kid syntax for replace --\n\n\ndiv py:strip=\nTrue\n py:for=\nmessage in data\n\n    \ndiv py:replace=\ndocument(message)\n/\n\n\n/div\n\n\n\n\n\n!-- Genshi syntax for include --\n\n\ndiv py:strip=\nTrue\n py:for=\nmessage in data\n\n    \nxi:include href=\n${message}\n /\n\n\n/div\n\n\n\n\n\n\n\nChange your translation: change template to template-html. \n\n\nLast, but not least: test this ;-)", 
            "title": "Migrate Kid to Genshi"
        }, 
        {
            "location": "/MigrateKidGenshi/#migrate-from-kid-to-genshi-for-templates", 
            "text": "If you use bots edi type _template_ then you are using kid for those \ntemplates. From version 2.1.0 onwards, using Genshi is also supported, \nusing edi type _template-html_. In a future bots version, kid will be \nremoved as it is no longer being developed.   You may have copied templates from a plugin, or developed your own. \nEach template normally consists of three files:    usersys/grammars/template/ messagetype .py  is the grammar configured\n    in the translation and defines the actual template files used.   usersys/grammars/template/templates/ messagetype .kid  is the template\n    containing html code for the main body of the message.   usersys/grammars/template/templates/ messagetype _envelope.kid  is the\n    envelope template containing header and footer html code.   Your naming standard for the .kid files may differ from the above example    To convert this to a Genshi template, at least the following steps are required.\nThere may be additional changes depending on your template complexity.\nFor more info see  Comparing Genshi to\nKid .    Of course, the  Genshi  library must be \n    installed for this to work.   Copy the three source files from  usersys/template  to\n     usersys/templatehtml . The compiled .pyc files are not copied. Keep\n    the same  /templates  sub-directory structure for the templates.   Also copy the  __init.py__  files when first creating this\n    new directory structure.   Rename the two copied .kid files to .html (ie. just change the file extension)   Edit the  messagetype .py  file and change it's  template  and  envelope-template  settings that refer\n    to the .kid files to .html files.    syntax = { \n    'charset':'utf-8',\n    'contenttype':'text/html', \n    'merge':False, \n    'template':' messagetype .html',\n    'envelope-template':' messagetype _envelope.html'}    Edit the two .html template files and make the following changes:   Namespaces should be changed      !-- Kid namespace --  html xmlns:py= http://purl.org/kid/ns#   * xi:include should be used instead of py:replace in the envelope template   !-- Kid syntax for replace --  div py:strip= True  py:for= message in data \n     div py:replace= document(message) /  /div   !-- Genshi syntax for include --  div py:strip= True  py:for= message in data \n     xi:include href= ${message}  /  /div    Change your translation: change template to template-html.   Last, but not least: test this ;-)", 
            "title": "Migrate from Kid to Genshi for templates"
        }, 
        {
            "location": "/MigrateDjango/", 
            "text": "Migrate Django to version 1.3 or greater\n\n\n\n\nRemove\n the 1.1 version of Django\n\n\nDownload\n new version.\n\n\nMind: bots 2.2.0 does not support Django 1.4.\n*\n.\n\n\nDjango version 1.3.1 is tested and recommended.\n\n\n\n\n\n\nInstall\n the new version\n\n\nRestart\n the bots webserver\n\n\n\n\nBe sure to use the correct bots upgrade plugin to match the version of Django you have installed.\n\n\nBots includes copies of some Django files in it's directory structure. You may need to refresh these from your current Django version if you notice any admin interface \"bugs\". (eg. selection checkboxes not working correctly).\n\n\n\n\nCopy from: \n\\Lib\\site-packages\\django\\contrib\\admin\\media\n\n\nCopy to: \n\\Lib\\site-packages\\bots\\media\n\n\nInclude sub-directories: css, img, js", 
            "title": "Migrate Django versions"
        }, 
        {
            "location": "/MigrateDjango/#migrate-django-to-version-13-or-greater", 
            "text": "Remove  the 1.1 version of Django  Download  new version.  Mind: bots 2.2.0 does not support Django 1.4. * .  Django version 1.3.1 is tested and recommended.    Install  the new version  Restart  the bots webserver   Be sure to use the correct bots upgrade plugin to match the version of Django you have installed.  Bots includes copies of some Django files in it's directory structure. You may need to refresh these from your current Django version if you notice any admin interface \"bugs\". (eg. selection checkboxes not working correctly).   Copy from:  \\Lib\\site-packages\\django\\contrib\\admin\\media  Copy to:  \\Lib\\site-packages\\bots\\media  Include sub-directories: css, img, js", 
            "title": "Migrate Django to version 1.3 or greater"
        }, 
        {
            "location": "/MigrateDatabase/", 
            "text": "Migrate your data between databases\n\n\nIf you choose to use \nanother database\n rather than SQLite, you may want to migrate some or all of your data. You may also migrate data between development and production environments. There are several approaches to this, depending on your needs.\n\n\n\n\nMigrate all configuration and transactional data\n\n\nMigrate only the configuration, start fresh with transactional data\n\n\nMigrate only partial configuration (eg. adding a new route, channels and translation)\n\n\n\n\nDepending on the approach and the amount of data, several methods could be used.\n\n\n\n\n\n\nUsing bots \nplugin\n mechanism (write plugin, read plugin)\n\n\n\n\nSimple, good for configuration\n\n\nWorks independently of underlying database in use\n\n\nDisadvantage: very slow (or fails with memory error) for large volumes of transactional or code-conversion data.\n\n\n\n\n\n\n\n\nUsing bots \nplugin\n mechanism, and \"editing\" the plugin\n\n\n\n\nPlugins are just zip files, you can open them with any zip tool\n\n\nUse a tool that allows you to edit files within the zip and re-save them (eg. \nIZArc\n works for this)\n\n\nAlternatively, unzip the whole directory structure, make your changes, then zip it again. Make sure the same structure is kept.\n\n\nPlugin contains all configuration, you can remove files that are not required (eg. usersys files)\n\n\nThe file \nbotsindex.py\n contains all of the database configuration. You can edit this file and \n    delete records not required. Be careful to keep linked records (eg. channels used by a route). \n    The layout of this file is not very user-friendly, you will need to use \"find\" in your editor a lot! \n    Records are grouped by type, do not re-arrange their sequence.\n\n\n\n\n\n\n\n\nUsing SQL (dump, insert)\n\n\n\n\nIf you have a large volume of data to migrate, this will probably be faster.\n\n\nadd details of how to do this here (I am testing this)\n\n\n\n\n\n\n\n\nhttp://www.redmine.org/boards/2/topics/12793", 
            "title": "Migrate database"
        }, 
        {
            "location": "/MigrateDatabase/#migrate-your-data-between-databases", 
            "text": "If you choose to use  another database  rather than SQLite, you may want to migrate some or all of your data. You may also migrate data between development and production environments. There are several approaches to this, depending on your needs.   Migrate all configuration and transactional data  Migrate only the configuration, start fresh with transactional data  Migrate only partial configuration (eg. adding a new route, channels and translation)   Depending on the approach and the amount of data, several methods could be used.    Using bots  plugin  mechanism (write plugin, read plugin)   Simple, good for configuration  Works independently of underlying database in use  Disadvantage: very slow (or fails with memory error) for large volumes of transactional or code-conversion data.     Using bots  plugin  mechanism, and \"editing\" the plugin   Plugins are just zip files, you can open them with any zip tool  Use a tool that allows you to edit files within the zip and re-save them (eg.  IZArc  works for this)  Alternatively, unzip the whole directory structure, make your changes, then zip it again. Make sure the same structure is kept.  Plugin contains all configuration, you can remove files that are not required (eg. usersys files)  The file  botsindex.py  contains all of the database configuration. You can edit this file and \n    delete records not required. Be careful to keep linked records (eg. channels used by a route). \n    The layout of this file is not very user-friendly, you will need to use \"find\" in your editor a lot! \n    Records are grouped by type, do not re-arrange their sequence.     Using SQL (dump, insert)   If you have a large volume of data to migrate, this will probably be faster.  add details of how to do this here (I am testing this)     http://www.redmine.org/boards/2/topics/12793", 
            "title": "Migrate your data between databases"
        }, 
        {
            "location": "/TutorialHome/", 
            "text": "Introduction\n\n\nGeneral EDI and implementation tutorials\n\n\nTutorials\n\n\n\n\nEDI Basics\n\n\nIntegration with Odoo/OpenERP", 
            "title": "Introduction"
        }, 
        {
            "location": "/TutorialHome/#introduction", 
            "text": "General EDI and implementation tutorials", 
            "title": "Introduction"
        }, 
        {
            "location": "/TutorialHome/#tutorials", 
            "text": "EDI Basics  Integration with Odoo/OpenERP", 
            "title": "Tutorials"
        }, 
        {
            "location": "/TutorialEdiBasics/", 
            "text": "Introduction\n\n\nA high level introduction to EDI - business process focused\n\n\nDetails\n\n\nBusiness Process\n\n\nHigh Level Business Flow", 
            "title": "EDI Basics"
        }, 
        {
            "location": "/TutorialEdiBasics/#introduction", 
            "text": "A high level introduction to EDI - business process focused", 
            "title": "Introduction"
        }, 
        {
            "location": "/TutorialEdiBasics/#details", 
            "text": "Business Process  High Level Business Flow", 
            "title": "Details"
        }, 
        {
            "location": "/OdooIntegration/", 
            "text": "Odoo Integration\n\n\nBots can add EDI support to Odoo (previously OpenERP).\n\n\nNote\n The standard Odoo EDI module only transfers data between\ntwo Odoo installations and is \nNOT\n X12, EDIFACT or similar EDI.\n\n\nDetails\n\n\nTo do:\n\n\n\n\nTutorialHighLevelBusinessFlow\n\n\nThe Odoo XMLRPC interface\n\n\nThe bots_connector module\n\n\nExample script - Sending an X12 810 invoice\n\n\nExample script - Creating a sale order from X12 850 purchase order", 
            "title": "Integration with Odoo/OpenERP"
        }, 
        {
            "location": "/OdooIntegration/#odoo-integration", 
            "text": "Bots can add EDI support to Odoo (previously OpenERP).  Note  The standard Odoo EDI module only transfers data between\ntwo Odoo installations and is  NOT  X12, EDIFACT or similar EDI.", 
            "title": "Odoo Integration"
        }, 
        {
            "location": "/OdooIntegration/#details", 
            "text": "To do:   TutorialHighLevelBusinessFlow  The Odoo XMLRPC interface  The bots_connector module  Example script - Sending an X12 810 invoice  Example script - Creating a sale order from X12 850 purchase order", 
            "title": "Details"
        }, 
        {
            "location": "/NewToPython/", 
            "text": "Some tips when you are new to python\n\n\nShort Explanation\n\n\n\n\nPython is an interpreted language. This means for you: edit a python source file (eg mappingscript, grammar), \n    save it and run again. No compilation, no linking.\n\n\nPython source files always have extension '.py'.\n\n\nIf you see a '.pyc' file: that is an intermediate file. OK, python does some compilation automatically. \n    Never mind, it is not important. Some systems have '.pyo' files instead. Again, not important.\n\n\nPython does not use curly braces ('{...}') or 'BEGIN...END' for functions, loops etc. Python uses \n    'indentation' instead. Some people love it, some hate it. For me: this is what I always did with all \n    programming languages; now everybody uses the same layout ;-))\n\n\nLinks to more learning about python are in the \npage with external links\n\n\n\n\nTips\n\n\n\n\nUse a good text editor. This is VERY important. It saves you a lot of time. See \nin tools page\n. Three main reasons:\n\n\na good editor has a feature called 'syntax highlighting'. This makes it is lot easier to work with eg mapping scripts.\n\n\na good editor can do a python syntax check on the python source file (a check if it is valid python). This will point \n    you directly to any errors you made.\n\n\nmake the editor use spaces instead of tabs. This is an important feature when working with python. Never mix tabs and spaces.\n\n\n\n\n\n\n\n\nCreating grammars and mapping scripts does not require an \"in depth\" knowledge of Python, but you need to \n    at least understand general principles of:\n\n\n\n\nvariables and expressions\n\n\nfunctions\n\n\nstrings\n\n\nlists\n, \ndicts\n and \ntuples\n\n\n\n\n\n\n\n\nStart with a plugin or example\n\n\n\n\nmost grammars are \"similar\" (csv, fixed are simple; edifact, x12 are more complex)\n\n\nmost mappings are \"similar\" (same functions are used, only \"mpaths\" change)\n\n\nfind something close to what you need, see how it works, adapt it.\n\n\n\n\n\n\n\n\nInstalling extra libraries/dependencies\n\n\n\n\nFor linux lots of \ninformation about installing libraries is here\n. Think this is also useful for windows.\n\n\nA advanced method is \nusing virtualenv\n\n\n\n\nFeedback\n\n\nPlease share your experiences and tips via the \nmailing list\n!", 
            "title": "New to python?"
        }, 
        {
            "location": "/NewToPython/#some-tips-when-you-are-new-to-python", 
            "text": "", 
            "title": "Some tips when you are new to python"
        }, 
        {
            "location": "/NewToPython/#short-explanation", 
            "text": "Python is an interpreted language. This means for you: edit a python source file (eg mappingscript, grammar), \n    save it and run again. No compilation, no linking.  Python source files always have extension '.py'.  If you see a '.pyc' file: that is an intermediate file. OK, python does some compilation automatically. \n    Never mind, it is not important. Some systems have '.pyo' files instead. Again, not important.  Python does not use curly braces ('{...}') or 'BEGIN...END' for functions, loops etc. Python uses \n    'indentation' instead. Some people love it, some hate it. For me: this is what I always did with all \n    programming languages; now everybody uses the same layout ;-))  Links to more learning about python are in the  page with external links", 
            "title": "Short Explanation"
        }, 
        {
            "location": "/NewToPython/#tips", 
            "text": "Use a good text editor. This is VERY important. It saves you a lot of time. See  in tools page . Three main reasons:  a good editor has a feature called 'syntax highlighting'. This makes it is lot easier to work with eg mapping scripts.  a good editor can do a python syntax check on the python source file (a check if it is valid python). This will point \n    you directly to any errors you made.  make the editor use spaces instead of tabs. This is an important feature when working with python. Never mix tabs and spaces.     Creating grammars and mapping scripts does not require an \"in depth\" knowledge of Python, but you need to \n    at least understand general principles of:   variables and expressions  functions  strings  lists ,  dicts  and  tuples     Start with a plugin or example   most grammars are \"similar\" (csv, fixed are simple; edifact, x12 are more complex)  most mappings are \"similar\" (same functions are used, only \"mpaths\" change)  find something close to what you need, see how it works, adapt it.", 
            "title": "Tips"
        }, 
        {
            "location": "/NewToPython/#installing-extra-librariesdependencies", 
            "text": "For linux lots of  information about installing libraries is here . Think this is also useful for windows.  A advanced method is  using virtualenv", 
            "title": "Installing extra libraries/dependencies"
        }, 
        {
            "location": "/NewToPython/#feedback", 
            "text": "Please share your experiences and tips via the  mailing list !", 
            "title": "Feedback"
        }, 
        {
            "location": "/Links/", 
            "text": "Links to external references and information\n\n\nEDI\n\n\nSome of these pages are provided by companies promoting their own EDI services\nor software, but contain some good information.\n\n\nhttp://www.gs1.se/eancom%202000/index.htm\n\n\nhttp://www.gs1.se/EANCOM_2002/ean02s4/experts/index.htm\n\n\nEANCOM. In trade EANCOM is the most used edifact standard. Guides are\nmuch better than the edifact general documentation.\n\n\nUN/EDIFACT reference\n\nThe official source of edifact (the one and only). All other\ninformation is derived from this.\n\n\nStylus Studio EDIFACTreference\n\nI have found this page very useful as my main EDIFACT reference. All\nthe versions are there back to D93A and everything is hyperlinked.\n\n\nLiason EDI Notepad\n\nEDI editor/validator )free) for Windows platform. It provides rendering\nof EDI/EDIFACT/TRADACOMS/X12.\n\n\nPlease note that the official X12 documentation is not free and should\nbe purchased.\n\n\n\n\nPython\n\n\nYou don't need to know a lot about Python to get started with bots, but\nit will help you to do more advanced mapping and user scripts (or even\nadd new features to bots code!)\n\n\nBeginners Guide\n\nNew to programming? Python is free and easy to learn if you know where\nto start! This guide will help you to get started quickly.\n\n\nSimple Programs\n\nGives around 30 simple working code samples, gradually introducing more\nadvanced concepts.\n\n\nGoogle's Python Class\n\nThis is a free class for people with a little bit of programming\nexperience who want to learn Python. The class includes written\nmaterials, lecture videos, and lots of code exercises to practice Python\ncoding.\n\n\nString Methods\n\nThese are often used to manipulate string data in mapping scripts.", 
            "title": "External reference links"
        }, 
        {
            "location": "/Links/#links-to-external-references-and-information", 
            "text": "", 
            "title": "Links to external references and information"
        }, 
        {
            "location": "/Links/#edi", 
            "text": "Some of these pages are provided by companies promoting their own EDI services\nor software, but contain some good information.  http://www.gs1.se/eancom%202000/index.htm  http://www.gs1.se/EANCOM_2002/ean02s4/experts/index.htm  EANCOM. In trade EANCOM is the most used edifact standard. Guides are\nmuch better than the edifact general documentation.  UN/EDIFACT reference \nThe official source of edifact (the one and only). All other\ninformation is derived from this.  Stylus Studio EDIFACTreference \nI have found this page very useful as my main EDIFACT reference. All\nthe versions are there back to D93A and everything is hyperlinked.  Liason EDI Notepad \nEDI editor/validator )free) for Windows platform. It provides rendering\nof EDI/EDIFACT/TRADACOMS/X12.  Please note that the official X12 documentation is not free and should\nbe purchased.", 
            "title": "EDI"
        }, 
        {
            "location": "/Links/#python", 
            "text": "You don't need to know a lot about Python to get started with bots, but\nit will help you to do more advanced mapping and user scripts (or even\nadd new features to bots code!)  Beginners Guide \nNew to programming? Python is free and easy to learn if you know where\nto start! This guide will help you to get started quickly.  Simple Programs \nGives around 30 simple working code samples, gradually introducing more\nadvanced concepts.  Google's Python Class \nThis is a free class for people with a little bit of programming\nexperience who want to learn Python. The class includes written\nmaterials, lecture videos, and lots of code exercises to practice Python\ncoding.  String Methods \nThese are often used to manipulate string data in mapping scripts.", 
            "title": "Python"
        }, 
        {
            "location": "/UsefulTools/", 
            "text": "Useful tools for working with Bots\n\n\nThese are programs you can use in bots development and deployment. (please add more)\\\n\n\nText Editors\n\n\nAny text editor you use should have syntax colouring/highlighting. This\nmakes it much easier to spot any mistakes. It is also good to be able to\nrun python to do syntax checks. Also a good search/replace function (eg\nto add extra CR/LF in edifact or x12 files).\n\n\n\n\nEditPlus\n (Windows) is the\n    editor I have used for many years and so continued to use it with\n    Python. There are no python syntax files in the default installation\n    but you can easily \ndownload\n\n    and add them, several versions are available. You can also add a\n    \"user tool\" option to run a python syntax check directly in the\n    editor, and one to run the bots grammar check.\n\n\nScite\n (Windows, Linux)\n    provides Python syntax highlighting and python syntax check directly\n    in the editor to check the correctness of Python scripts.\n\n\nGeany\n (Windows, Linux) provides Python\n    syntax highlighting and python syntax check directly in the editor\n    to check the correctness of Python scripts. Quite similar to scite,\n    but more fancy eg with spell checking. Web site calls it an IDE.\n\n\nTextWrangler\n\n    (Mac) provides Python syntax highlighting and python syntax check\n    directly in the editor to check the correctness of Python scripts.\n    Also quite similar to Scite, very interesting access to remote\n    scripts via SSH/SFTP.\n\n\n\n\nIDE (Integrated Development Environment)\n\n\nThese are a \"step up\" from just using a text editor. Please add more if\nyou have anny experience with these.\n\n\n\n\nEclipse\n\n    with \nPyDev\n. You just\n    create a project in the bots directory and edit everything from that\n    folder.\n\n\n\n\nCompare and merge\n\n\nTool for comparing files and directories, analyse changes and copy code\nchanges eg between test and production environments.\n\n\n\n\nWinmerge\n (Windows)\n\n\nMeld\n (linux)\n\n\nTkdiff\n\n    (windows,linux)\n\n\nKDiff3\n (linux)\n\n\n\n\nDatabase\n\n\n\n\nSQLite Expert\n (Windows, Linux) is a\n    database browser tool for SQLite. Useful for advanced\n    troubleshooting or learning more about Bots internal workings. You\n    can use SQL commands to do quick updates or create reports. Note: I\n    use an old version (1.7) as the newer versions are much larger and\n    slower and offer nothing more useful.\n\n\nHeidiSQL\n (Windows) can\n    be used similarly to the above for bots installations using the\n    MySQL database. A lightweight interface for managing MySQL and\n    Microsoft SQL databases. It enables you to browse and edit data,\n    create and edit tables, views, procedures, triggers and scheduled\n    events. Also, you can export structure and data either to SQL file,\n    clipboard or to other servers.\n\n\nMySQL Workbench\n\n    (multiple platforms) is the full blown MySQL management toolset. It\n    provides an integrated tools environment for Database Design \n\n    Modeling, SQL Development (replacing MySQL Query Browser) and\n    Database Administration (replacing MySQL Administrator). The\n    Community (OSS) Edition is available from this page under the GPL.\n\n\n\n\nOther tools\n\n\n\n\nIZArc\n (Windows) is an archive tool that\n    allows you to open bots plugins (zip files) and easily modify their\n    contents.\n\n\nBareTail\n (Windows) is a\n    free real-time log file monitoring tool. It is useful for watching Bots\n    log files (engine.log, webserver.log etc). Multiple tabbed interface,\n    colour highlighting, single small program, no installer.", 
            "title": "Useful Tools"
        }, 
        {
            "location": "/UsefulTools/#useful-tools-for-working-with-bots", 
            "text": "These are programs you can use in bots development and deployment. (please add more)\\", 
            "title": "Useful tools for working with Bots"
        }, 
        {
            "location": "/UsefulTools/#text-editors", 
            "text": "Any text editor you use should have syntax colouring/highlighting. This\nmakes it much easier to spot any mistakes. It is also good to be able to\nrun python to do syntax checks. Also a good search/replace function (eg\nto add extra CR/LF in edifact or x12 files).   EditPlus  (Windows) is the\n    editor I have used for many years and so continued to use it with\n    Python. There are no python syntax files in the default installation\n    but you can easily  download \n    and add them, several versions are available. You can also add a\n    \"user tool\" option to run a python syntax check directly in the\n    editor, and one to run the bots grammar check.  Scite  (Windows, Linux)\n    provides Python syntax highlighting and python syntax check directly\n    in the editor to check the correctness of Python scripts.  Geany  (Windows, Linux) provides Python\n    syntax highlighting and python syntax check directly in the editor\n    to check the correctness of Python scripts. Quite similar to scite,\n    but more fancy eg with spell checking. Web site calls it an IDE.  TextWrangler \n    (Mac) provides Python syntax highlighting and python syntax check\n    directly in the editor to check the correctness of Python scripts.\n    Also quite similar to Scite, very interesting access to remote\n    scripts via SSH/SFTP.", 
            "title": "Text Editors"
        }, 
        {
            "location": "/UsefulTools/#ide-integrated-development-environment", 
            "text": "These are a \"step up\" from just using a text editor. Please add more if\nyou have anny experience with these.   Eclipse \n    with  PyDev . You just\n    create a project in the bots directory and edit everything from that\n    folder.", 
            "title": "IDE (Integrated Development Environment)"
        }, 
        {
            "location": "/UsefulTools/#compare-and-merge", 
            "text": "Tool for comparing files and directories, analyse changes and copy code\nchanges eg between test and production environments.   Winmerge  (Windows)  Meld  (linux)  Tkdiff \n    (windows,linux)  KDiff3  (linux)", 
            "title": "Compare and merge"
        }, 
        {
            "location": "/UsefulTools/#database", 
            "text": "SQLite Expert  (Windows, Linux) is a\n    database browser tool for SQLite. Useful for advanced\n    troubleshooting or learning more about Bots internal workings. You\n    can use SQL commands to do quick updates or create reports. Note: I\n    use an old version (1.7) as the newer versions are much larger and\n    slower and offer nothing more useful.  HeidiSQL  (Windows) can\n    be used similarly to the above for bots installations using the\n    MySQL database. A lightweight interface for managing MySQL and\n    Microsoft SQL databases. It enables you to browse and edit data,\n    create and edit tables, views, procedures, triggers and scheduled\n    events. Also, you can export structure and data either to SQL file,\n    clipboard or to other servers.  MySQL Workbench \n    (multiple platforms) is the full blown MySQL management toolset. It\n    provides an integrated tools environment for Database Design  \n    Modeling, SQL Development (replacing MySQL Query Browser) and\n    Database Administration (replacing MySQL Administrator). The\n    Community (OSS) Edition is available from this page under the GPL.", 
            "title": "Database"
        }, 
        {
            "location": "/UsefulTools/#other-tools", 
            "text": "IZArc  (Windows) is an archive tool that\n    allows you to open bots plugins (zip files) and easily modify their\n    contents.  BareTail  (Windows) is a\n    free real-time log file monitoring tool. It is useful for watching Bots\n    log files (engine.log, webserver.log etc). Multiple tabbed interface,\n    colour highlighting, single small program, no installer.", 
            "title": "Other tools"
        }
    ]
}